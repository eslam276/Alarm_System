
ALARM_SYSTEM_BLUE_BILL_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000186c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800199c  0800199c  0001199c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019e0  080019e0  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080019e0  080019e0  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019e0  080019e0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019e0  080019e0  000119e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019e4  080019e4  000119e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080019e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000028  08001a10  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08001a10  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003e96  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ec3  00000000  00000000  00023f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003e0  00000000  00000000  00024df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002f1  00000000  00000000  000251d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ae7  00000000  00000000  000254c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004b76  00000000  00000000  00026fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000665c  00000000  00000000  0002bb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c70  00000000  00000000  0003217c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00032dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000028 	.word	0x20000028
 800014c:	00000000 	.word	0x00000000
 8000150:	08001984 	.word	0x08001984

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000002c 	.word	0x2000002c
 800016c:	08001984 	.word	0x08001984

08000170 <AFIO_U8SetEXTIPort>:
 * @param : EXTI_Line -> Options of All Available EXTI Lines
 * @param : GPIO_Port -> Options of All Available Ports
 * @return: ErrorStatus to Indicate if function Worked Correctly or NOT
 */
uint8_t AFIO_U8SetEXTIPort( AFIO_EXTI_Line EXTI_Line, AFIO_Port_t GPIO_Port)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	uint8_t Error_State = OK;
 8000180:	2300      	movs	r3, #0
 8000182:	73fb      	strb	r3, [r7, #15]

	if ( (EXTI_Line < Max_EXTI_Line) && (GPIO_Port < Max_GPIO_Port) )
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	2b0f      	cmp	r3, #15
 8000188:	d826      	bhi.n	80001d8 <AFIO_U8SetEXTIPort+0x68>
 800018a:	79bb      	ldrb	r3, [r7, #6]
 800018c:	2b07      	cmp	r3, #7
 800018e:	d823      	bhi.n	80001d8 <AFIO_U8SetEXTIPort+0x68>
	{
		uint8_t REG_Number = EXTI_Line /4 ;
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	089b      	lsrs	r3, r3, #2
 8000194:	73bb      	strb	r3, [r7, #14]

		uint8_t Bits_Number = (EXTI_Line %4 ) *4 ;
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	f003 0303 	and.w	r3, r3, #3
 800019c:	b2db      	uxtb	r3, r3
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	737b      	strb	r3, [r7, #13]

		/*Clear the Required 4 Bits*/
		AFIO->EXTICR[REG_Number] &=(~(0b1111 << Bits_Number));
 80001a2:	4a11      	ldr	r2, [pc, #68]	; (80001e8 <AFIO_U8SetEXTIPort+0x78>)
 80001a4:	7bbb      	ldrb	r3, [r7, #14]
 80001a6:	3302      	adds	r3, #2
 80001a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ac:	7b7b      	ldrb	r3, [r7, #13]
 80001ae:	210f      	movs	r1, #15
 80001b0:	fa01 f303 	lsl.w	r3, r1, r3
 80001b4:	43db      	mvns	r3, r3
 80001b6:	4618      	mov	r0, r3
 80001b8:	490b      	ldr	r1, [pc, #44]	; (80001e8 <AFIO_U8SetEXTIPort+0x78>)
 80001ba:	7bbb      	ldrb	r3, [r7, #14]
 80001bc:	4002      	ands	r2, r0
 80001be:	3302      	adds	r3, #2
 80001c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		AFIO->EXTICR[REG_Number]= ( GPIO_Port << Bits_Number ) ;
 80001c4:	79ba      	ldrb	r2, [r7, #6]
 80001c6:	7b7b      	ldrb	r3, [r7, #13]
 80001c8:	fa02 f103 	lsl.w	r1, r2, r3
 80001cc:	4a06      	ldr	r2, [pc, #24]	; (80001e8 <AFIO_U8SetEXTIPort+0x78>)
 80001ce:	7bbb      	ldrb	r3, [r7, #14]
 80001d0:	3302      	adds	r3, #2
 80001d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	{
 80001d6:	e001      	b.n	80001dc <AFIO_U8SetEXTIPort+0x6c>
	}
	else
	{
		Error_State = NOK;
 80001d8:	2301      	movs	r3, #1
 80001da:	73fb      	strb	r3, [r7, #15]
	}
	return Error_State;
 80001dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80001de:	4618      	mov	r0, r3
 80001e0:	3714      	adds	r7, #20
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	40010000 	.word	0x40010000

080001ec <RCC_Clock_Init>:
SPI_CONFIGS_t *SPICONFIG;

uint8_t RecivedData[30] ={0};

void RCC_Clock_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
    RCC_APB2EnableClock(APB2_IOPA);
 80001f0:	2002      	movs	r0, #2
 80001f2:	f000 fe65 	bl	8000ec0 <RCC_APB2EnableClock>
    RCC_APB2EnableClock(APB2_IOPB);
 80001f6:	2003      	movs	r0, #3
 80001f8:	f000 fe62 	bl	8000ec0 <RCC_APB2EnableClock>
	RCC_APB2EnableClock(APB2_IOPC);
 80001fc:	2004      	movs	r0, #4
 80001fe:	f000 fe5f 	bl	8000ec0 <RCC_APB2EnableClock>
	RCC_APB2EnableClock(APB2_SPI1);
 8000202:	200c      	movs	r0, #12
 8000204:	f000 fe5c 	bl	8000ec0 <RCC_APB2EnableClock>
	RCC_APB2EnableClock(APB2_AFIO);
 8000208:	2000      	movs	r0, #0
 800020a:	f000 fe59 	bl	8000ec0 <RCC_APB2EnableClock>
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <Pins_Init>:
void Pins_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	/* RED LED1 Configuration*/
	LED_Init(PORTA ,PIN2);
 800021a:	2102      	movs	r1, #2
 800021c:	2000      	movs	r0, #0
 800021e:	f000 fdf7 	bl	8000e10 <LED_Init>
	/* GREEN LED Configuration*/
	LED_Init(PORTC ,PIN15);
 8000222:	210f      	movs	r1, #15
 8000224:	2002      	movs	r0, #2
 8000226:	f000 fdf3 	bl	8000e10 <LED_Init>
	/*BUZZER Configuration*/
	BZR_Init();
 800022a:	f000 f96f 	bl	800050c <BZR_Init>

	/* Initialize the EXTI Pin */
	GPIO_PinConfig_t EXTI_PC1 = {.Port = PORTC, .PinNum = PIN13, .Mode = INPUT,  .Input = PULLUP_PULLDOWN};
 800022e:	f107 0310 	add.w	r3, r7, #16
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	711a      	strb	r2, [r3, #4]
 8000238:	2302      	movs	r3, #2
 800023a:	743b      	strb	r3, [r7, #16]
 800023c:	230d      	movs	r3, #13
 800023e:	747b      	strb	r3, [r7, #17]
 8000240:	2302      	movs	r3, #2
 8000242:	74fb      	strb	r3, [r7, #19]

	/* Initialize the EXTI Pin */
	GPIO_u8PinInit(&EXTI_PC1);
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fce1 	bl	8000c10 <GPIO_u8PinInit>

	/* SPI Pins Configuration */
	/* MOSI Pin */
	GPIO_PinConfig_t MOSI_PIN = {.Mode = INPUT, .Input = FLOATING, .PinNum = PIN7, .Port = PORTA , .Output=AF_PUSH_PULL};
 800024e:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <Pins_Init+0x74>)
 8000250:	f107 0308 	add.w	r3, r7, #8
 8000254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000258:	6018      	str	r0, [r3, #0]
 800025a:	3304      	adds	r3, #4
 800025c:	7019      	strb	r1, [r3, #0]

	/* SCK Pin */
	GPIO_PinConfig_t SCK_PIN = {.Mode = INPUT, .Input = FLOATING, .PinNum = PIN5, .Port = PORTA};
 800025e:	463b      	mov	r3, r7
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	711a      	strb	r2, [r3, #4]
 8000266:	2305      	movs	r3, #5
 8000268:	707b      	strb	r3, [r7, #1]
 800026a:	2301      	movs	r3, #1
 800026c:	70fb      	strb	r3, [r7, #3]

	/* Initialize SPI1 Pins */
	GPIO_u8PinInit(&MOSI_PIN);
 800026e:	f107 0308 	add.w	r3, r7, #8
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fccc 	bl	8000c10 <GPIO_u8PinInit>
	GPIO_u8PinInit(&SCK_PIN);
 8000278:	463b      	mov	r3, r7
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fcc8 	bl	8000c10 <GPIO_u8PinInit>
}
 8000280:	bf00      	nop
 8000282:	3718      	adds	r7, #24
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	0800199c 	.word	0x0800199c

0800028c <SPI1_Init>:
void SPI1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
		static SPI_CONFIGS_t SPI1_Config =
			{
				.CRC_State = CRC_STATE_DISABLED, .Chip_Mode = CHIP_MODE_SLAVE, .Clock_Phase = CLOCK_PHASE_CAPTURE_FIRST, .Clock_Polarity = CLOCK_POLARITY_IDLE_LOW, .Frame_Size = DATA_FRAME_SIZE_8BITS, .Frame_Type = FRAME_FORMAT_MSB_FIRST, .SPI_Num = SPI_NUMBER1, .Slave_Manage_State = SLAVE_MANAGE_SW_SLAVE_ACTIVE, .Transfer_Mode = TRANSFER_MODE_FULL_DUPLEX};

		/* Initialize SPI */
		SPI_Init(&SPI1_Config);
 8000290:	4803      	ldr	r0, [pc, #12]	; (80002a0 <SPI1_Init+0x14>)
 8000292:	f000 fe2b 	bl	8000eec <SPI_Init>

		/* Initialize SPI1 Configuration Struct Globally */
		SPICONFIG = &SPI1_Config;
 8000296:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <SPI1_Init+0x18>)
 8000298:	4a01      	ldr	r2, [pc, #4]	; (80002a0 <SPI1_Init+0x14>)
 800029a:	601a      	str	r2, [r3, #0]
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000000 	.word	0x20000000
 80002a4:	20000044 	.word	0x20000044

080002a8 <EXTI13_Init>:
void EXTI13_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	/* Initialize the EXTI Configuration */
	EXTI_Confg PC1_EXTIConfig = {.LINE = EXTI13, .Mode = Enable, .Trigger = RaisingEdge, .EXTI_CallBackFunc = &EXTI13_ISR};
 80002ae:	4a09      	ldr	r2, [pc, #36]	; (80002d4 <EXTI13_Init+0x2c>)
 80002b0:	463b      	mov	r3, r7
 80002b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002b6:	e883 0003 	stmia.w	r3, {r0, r1}

	/* Initialize the EXTI */
	EXTI_Init(&PC1_EXTIConfig);
 80002ba:	463b      	mov	r3, r7
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 faf3 	bl	80008a8 <EXTI_Init>

	/* Initialize the AFIO For EXTI13 */
	AFIO_U8SetEXTIPort(AFIO_EXTI13, AFIO_PortC);
 80002c2:	2102      	movs	r1, #2
 80002c4:	200d      	movs	r0, #13
 80002c6:	f7ff ff53 	bl	8000170 <AFIO_U8SetEXTIPort>
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	080019a4 	.word	0x080019a4

080002d8 <Interrupts_Init>:
void Interrupts_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(NVIC_IRQ_SPI1);
 80002dc:	2023      	movs	r0, #35	; 0x23
 80002de:	f000 fdc5 	bl	8000e6c <NVIC_EnableIRQ>
	NVIC_EnableIRQ(NVIC_IRQ_EXTI15_10);
 80002e2:	2028      	movs	r0, #40	; 0x28
 80002e4:	f000 fdc2 	bl	8000e6c <NVIC_EnableIRQ>
	NVIC_EnableIRQ(NVIC_IRQ_SPI1);
 80002e8:	2023      	movs	r0, #35	; 0x23
 80002ea:	f000 fdbf 	bl	8000e6c <NVIC_EnableIRQ>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <DisplayAlarmInfo>:
void DisplayAlarmInfo(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
	CLCD_voidSendCmd(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 f9db 	bl	80006b6 <CLCD_voidSendCmd>

	uint8_t counter=0;
 8000300:	2300      	movs	r3, #0
 8000302:	71fb      	strb	r3, [r7, #7]
	for(counter=1 ; RecivedData[counter] != 13 ;counter++)
 8000304:	2301      	movs	r3, #1
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	e01b      	b.n	8000342 <DisplayAlarmInfo+0x4e>
	{
		if(counter == 1)
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d10f      	bne.n	8000330 <DisplayAlarmInfo+0x3c>
		{
			CLCD_u8SendString("Alarm Number=");
 8000310:	4818      	ldr	r0, [pc, #96]	; (8000374 <DisplayAlarmInfo+0x80>)
 8000312:	f000 fa24 	bl	800075e <CLCD_u8SendString>
			CLCD_voidSendData(RecivedData[counter] + 48);
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <DisplayAlarmInfo+0x84>)
 800031a:	5cd3      	ldrb	r3, [r2, r3]
 800031c:	3330      	adds	r3, #48	; 0x30
 800031e:	b2db      	uxtb	r3, r3
 8000320:	4618      	mov	r0, r3
 8000322:	f000 f9e4 	bl	80006ee <CLCD_voidSendData>
			CLCD_voidGoToXY(1, 0);
 8000326:	2100      	movs	r1, #0
 8000328:	2001      	movs	r0, #1
 800032a:	f000 fa95 	bl	8000858 <CLCD_voidGoToXY>
 800032e:	e005      	b.n	800033c <DisplayAlarmInfo+0x48>
		}
		else
		{
			CLCD_voidSendData(RecivedData[counter]);
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	4a11      	ldr	r2, [pc, #68]	; (8000378 <DisplayAlarmInfo+0x84>)
 8000334:	5cd3      	ldrb	r3, [r2, r3]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f9d9 	bl	80006ee <CLCD_voidSendData>
	for(counter=1 ; RecivedData[counter] != 13 ;counter++)
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	3301      	adds	r3, #1
 8000340:	71fb      	strb	r3, [r7, #7]
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	4a0c      	ldr	r2, [pc, #48]	; (8000378 <DisplayAlarmInfo+0x84>)
 8000346:	5cd3      	ldrb	r3, [r2, r3]
 8000348:	2b0d      	cmp	r3, #13
 800034a:	d1de      	bne.n	800030a <DisplayAlarmInfo+0x16>
		}
	}
	for(counter=0 ; counter<4 ;counter++)
 800034c:	2300      	movs	r3, #0
 800034e:	71fb      	strb	r3, [r7, #7]
 8000350:	e006      	b.n	8000360 <DisplayAlarmInfo+0x6c>
	{
		SYSTIC_delay_ms(890);
 8000352:	f240 307a 	movw	r0, #890	; 0x37a
 8000356:	f001 f9e3 	bl	8001720 <SYSTIC_delay_ms>
	for(counter=0 ; counter<4 ;counter++)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	3301      	adds	r3, #1
 800035e:	71fb      	strb	r3, [r7, #7]
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	2b03      	cmp	r3, #3
 8000364:	d9f5      	bls.n	8000352 <DisplayAlarmInfo+0x5e>
	}

	CLCD_voidSendCmd(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f000 f9a5 	bl	80006b6 <CLCD_voidSendCmd>
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	080019ac 	.word	0x080019ac
 8000378:	20000048 	.word	0x20000048

0800037c <Display_Time>:
void Display_Time(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	CLCD_voidGoToXY(1, 0);
 8000380:	2100      	movs	r1, #0
 8000382:	2001      	movs	r0, #1
 8000384:	f000 fa68 	bl	8000858 <CLCD_voidGoToXY>

	CLCD_voidSendNumber(RecivedData[5]);
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <Display_Time+0x60>)
 800038a:	795b      	ldrb	r3, [r3, #5]
 800038c:	4618      	mov	r0, r3
 800038e:	f000 fa0b 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[6]);
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <Display_Time+0x60>)
 8000394:	799b      	ldrb	r3, [r3, #6]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fa06 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendData(':');
 800039c:	203a      	movs	r0, #58	; 0x3a
 800039e:	f000 f9a6 	bl	80006ee <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[3]);
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <Display_Time+0x60>)
 80003a4:	78db      	ldrb	r3, [r3, #3]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 f9fe 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[4]);
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <Display_Time+0x60>)
 80003ae:	791b      	ldrb	r3, [r3, #4]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f9f9 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendData(':');
 80003b6:	203a      	movs	r0, #58	; 0x3a
 80003b8:	f000 f999 	bl	80006ee <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[1]);
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <Display_Time+0x60>)
 80003be:	785b      	ldrb	r3, [r3, #1]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f9f1 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[2]);
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <Display_Time+0x60>)
 80003c8:	789b      	ldrb	r3, [r3, #2]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f9ec 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendData(':');
 80003d0:	203a      	movs	r0, #58	; 0x3a
 80003d2:	f000 f98c 	bl	80006ee <CLCD_voidSendData>

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000048 	.word	0x20000048

080003e0 <Display_Date>:
void Display_Date(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	CLCD_voidGoToXY(0, 0);
 80003e4:	2100      	movs	r1, #0
 80003e6:	2000      	movs	r0, #0
 80003e8:	f000 fa36 	bl	8000858 <CLCD_voidGoToXY>

	switch (RecivedData[7])
 80003ec:	4b2b      	ldr	r3, [pc, #172]	; (800049c <Display_Date+0xbc>)
 80003ee:	79db      	ldrb	r3, [r3, #7]
 80003f0:	3b31      	subs	r3, #49	; 0x31
 80003f2:	2b06      	cmp	r3, #6
 80003f4:	d82c      	bhi.n	8000450 <Display_Date+0x70>
 80003f6:	a201      	add	r2, pc, #4	; (adr r2, 80003fc <Display_Date+0x1c>)
 80003f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003fc:	08000419 	.word	0x08000419
 8000400:	08000421 	.word	0x08000421
 8000404:	08000429 	.word	0x08000429
 8000408:	08000431 	.word	0x08000431
 800040c:	08000439 	.word	0x08000439
 8000410:	08000441 	.word	0x08000441
 8000414:	08000449 	.word	0x08000449
	{
	case '1'    : CLCD_u8SendString( (char *)"SUN") ; break;
 8000418:	4821      	ldr	r0, [pc, #132]	; (80004a0 <Display_Date+0xc0>)
 800041a:	f000 f9a0 	bl	800075e <CLCD_u8SendString>
 800041e:	e017      	b.n	8000450 <Display_Date+0x70>
	case '2'    : CLCD_u8SendString( (char *)"MON") ; break;
 8000420:	4820      	ldr	r0, [pc, #128]	; (80004a4 <Display_Date+0xc4>)
 8000422:	f000 f99c 	bl	800075e <CLCD_u8SendString>
 8000426:	e013      	b.n	8000450 <Display_Date+0x70>
	case '3'    : CLCD_u8SendString( (char *)"TUE") ; break;
 8000428:	481f      	ldr	r0, [pc, #124]	; (80004a8 <Display_Date+0xc8>)
 800042a:	f000 f998 	bl	800075e <CLCD_u8SendString>
 800042e:	e00f      	b.n	8000450 <Display_Date+0x70>
	case '4'    : CLCD_u8SendString( (char *)"WED") ; break;
 8000430:	481e      	ldr	r0, [pc, #120]	; (80004ac <Display_Date+0xcc>)
 8000432:	f000 f994 	bl	800075e <CLCD_u8SendString>
 8000436:	e00b      	b.n	8000450 <Display_Date+0x70>
	case '5'    : CLCD_u8SendString( (char *)"THU") ; break;
 8000438:	481d      	ldr	r0, [pc, #116]	; (80004b0 <Display_Date+0xd0>)
 800043a:	f000 f990 	bl	800075e <CLCD_u8SendString>
 800043e:	e007      	b.n	8000450 <Display_Date+0x70>
	case '6'    : CLCD_u8SendString( (char *)"FRI") ; break;
 8000440:	481c      	ldr	r0, [pc, #112]	; (80004b4 <Display_Date+0xd4>)
 8000442:	f000 f98c 	bl	800075e <CLCD_u8SendString>
 8000446:	e003      	b.n	8000450 <Display_Date+0x70>
	case '7'    : CLCD_u8SendString( (char *)"SAT") ; break;
 8000448:	481b      	ldr	r0, [pc, #108]	; (80004b8 <Display_Date+0xd8>)
 800044a:	f000 f988 	bl	800075e <CLCD_u8SendString>
 800044e:	bf00      	nop
	}

	CLCD_voidSendNumber(RecivedData[8]);
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <Display_Date+0xbc>)
 8000452:	7a1b      	ldrb	r3, [r3, #8]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f9a7 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[9]);
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <Display_Date+0xbc>)
 800045c:	7a5b      	ldrb	r3, [r3, #9]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 f9a2 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendData('/');
 8000464:	202f      	movs	r0, #47	; 0x2f
 8000466:	f000 f942 	bl	80006ee <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[10]);
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <Display_Date+0xbc>)
 800046c:	7a9b      	ldrb	r3, [r3, #10]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f99a 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[11]);
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <Display_Date+0xbc>)
 8000476:	7adb      	ldrb	r3, [r3, #11]
 8000478:	4618      	mov	r0, r3
 800047a:	f000 f995 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendData('/');
 800047e:	202f      	movs	r0, #47	; 0x2f
 8000480:	f000 f935 	bl	80006ee <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[12]);
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <Display_Date+0xbc>)
 8000486:	7b1b      	ldrb	r3, [r3, #12]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 f98d 	bl	80007a8 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[13]);
 800048e:	4b03      	ldr	r3, [pc, #12]	; (800049c <Display_Date+0xbc>)
 8000490:	7b5b      	ldrb	r3, [r3, #13]
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f988 	bl	80007a8 <CLCD_voidSendNumber>

}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000048 	.word	0x20000048
 80004a0:	080019bc 	.word	0x080019bc
 80004a4:	080019c0 	.word	0x080019c0
 80004a8:	080019c4 	.word	0x080019c4
 80004ac:	080019c8 	.word	0x080019c8
 80004b0:	080019cc 	.word	0x080019cc
 80004b4:	080019d0 	.word	0x080019d0
 80004b8:	080019d4 	.word	0x080019d4

080004bc <TURN_ON_LED>:
void TURN_ON_LED(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	LED_On(PORTA, PIN2);
 80004c0:	2102      	movs	r1, #2
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fcbf 	bl	8000e46 <LED_On>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <Receive_withInterrupt>:
void Receive_withInterrupt(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	SPI_Receive_IT(SPICONFIG, RecivedData, 30, &SPI1_CallBack);
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <Receive_withInterrupt+0x18>)
 80004d2:	6818      	ldr	r0, [r3, #0]
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <Receive_withInterrupt+0x1c>)
 80004d6:	221e      	movs	r2, #30
 80004d8:	4904      	ldr	r1, [pc, #16]	; (80004ec <Receive_withInterrupt+0x20>)
 80004da:	f000 ff3b 	bl	8001354 <SPI_Receive_IT>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000044 	.word	0x20000044
 80004e8:	08001889 	.word	0x08001889
 80004ec:	20000048 	.word	0x20000048

080004f0 <CLEAR_DISPLAY>:
void CLEAR_DISPLAY(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	CLCD_ClearDisplay();
 80004f4:	f000 f9d0 	bl	8000898 <CLCD_ClearDisplay>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <_delay_1s>:
void _delay_1s( void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	SYSTIC_delay_ms(890);
 8000500:	f240 307a 	movw	r0, #890	; 0x37a
 8000504:	f001 f90c 	bl	8001720 <SYSTIC_delay_ms>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <BZR_Init>:

/********************************************************************************
 *************** ### FUNCTION IMPLEMENTATION SECTION ### ************************
 ********************************************************************************/
void BZR_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t Copy_PinConfig={
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <BZR_Init+0x30>)
 8000514:	463b      	mov	r3, r7
 8000516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051a:	6018      	str	r0, [r3, #0]
 800051c:	3304      	adds	r3, #4
 800051e:	7019      	strb	r1, [r3, #0]
				.Mode		= OUTPUT_SPEED_2MHz	,
				.Output	= OUTPUT_PUSH_PULL		,
				.Input	= ANALOGE
		};
		/*GPIO pin initialization*/
		GPIO_u8PinInit(&Copy_PinConfig);
 8000520:	463b      	mov	r3, r7
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fb74 	bl	8000c10 <GPIO_u8PinInit>
		GPIO_u8SetPinValue(BZR_PORT, BZR_PIN, PIN_LOW);
 8000528:	2200      	movs	r2, #0
 800052a:	2104      	movs	r1, #4
 800052c:	2001      	movs	r0, #1
 800052e:	f000 fc27 	bl	8000d80 <GPIO_u8SetPinValue>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	080019d8 	.word	0x080019d8

08000540 <BZR_On>:

void BZR_On(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(BZR_PORT, BZR_PIN, PIN_HIGH);
 8000544:	2201      	movs	r2, #1
 8000546:	2104      	movs	r1, #4
 8000548:	2001      	movs	r0, #1
 800054a:	f000 fc19 	bl	8000d80 <GPIO_u8SetPinValue>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}

08000552 <BZR_Off>:

void BZR_Off(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(BZR_PORT, BZR_PIN, PIN_LOW);
 8000556:	2200      	movs	r2, #0
 8000558:	2104      	movs	r1, #4
 800055a:	2001      	movs	r0, #1
 800055c:	f000 fc10 	bl	8000d80 <GPIO_u8SetPinValue>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <CLCD_voidPinInit>:




void CLCD_voidPinInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08c      	sub	sp, #48	; 0x30
 8000568:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t A11 = { .Port = PORTA , .PinNum = PIN11 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 800056a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	711a      	strb	r2, [r3, #4]
 8000574:	230b      	movs	r3, #11
 8000576:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800057a:	2302      	movs	r3, #2
 800057c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GPIO_PinConfig_t A8  = { .Port = PORTA , .PinNum = PIN8  , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	711a      	strb	r2, [r3, #4]
 800058a:	2308      	movs	r3, #8
 800058c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000590:	2302      	movs	r3, #2
 8000592:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	GPIO_PinConfig_t B12 = { .Port = PORTB , .PinNum = PIN12 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	711a      	strb	r2, [r3, #4]
 80005a0:	2301      	movs	r3, #1
 80005a2:	763b      	strb	r3, [r7, #24]
 80005a4:	230c      	movs	r3, #12
 80005a6:	767b      	strb	r3, [r7, #25]
 80005a8:	2302      	movs	r3, #2
 80005aa:	76bb      	strb	r3, [r7, #26]
	GPIO_PinConfig_t B13 = { .Port = PORTB , .PinNum = PIN13 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	711a      	strb	r2, [r3, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	743b      	strb	r3, [r7, #16]
 80005ba:	230d      	movs	r3, #13
 80005bc:	747b      	strb	r3, [r7, #17]
 80005be:	2302      	movs	r3, #2
 80005c0:	74bb      	strb	r3, [r7, #18]
	GPIO_PinConfig_t B14 = { .Port = PORTB , .PinNum = PIN14 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	711a      	strb	r2, [r3, #4]
 80005cc:	2301      	movs	r3, #1
 80005ce:	723b      	strb	r3, [r7, #8]
 80005d0:	230e      	movs	r3, #14
 80005d2:	727b      	strb	r3, [r7, #9]
 80005d4:	2302      	movs	r3, #2
 80005d6:	72bb      	strb	r3, [r7, #10]
	GPIO_PinConfig_t B15 = { .Port = PORTB , .PinNum = PIN15 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	711a      	strb	r2, [r3, #4]
 80005e0:	2301      	movs	r3, #1
 80005e2:	703b      	strb	r3, [r7, #0]
 80005e4:	230f      	movs	r3, #15
 80005e6:	707b      	strb	r3, [r7, #1]
 80005e8:	2302      	movs	r3, #2
 80005ea:	70bb      	strb	r3, [r7, #2]


	GPIO_u8PinInit(&A11);
 80005ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fb0d 	bl	8000c10 <GPIO_u8PinInit>
	GPIO_u8PinInit(&A8 );
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fb08 	bl	8000c10 <GPIO_u8PinInit>

	GPIO_u8PinInit(&B12);
 8000600:	f107 0318 	add.w	r3, r7, #24
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fb03 	bl	8000c10 <GPIO_u8PinInit>
	GPIO_u8PinInit(&B13);
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fafe 	bl	8000c10 <GPIO_u8PinInit>
	GPIO_u8PinInit(&B14);
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	4618      	mov	r0, r3
 800061a:	f000 faf9 	bl	8000c10 <GPIO_u8PinInit>
	GPIO_u8PinInit(&B15);
 800061e:	463b      	mov	r3, r7
 8000620:	4618      	mov	r0, r3
 8000622:	f000 faf5 	bl	8000c10 <GPIO_u8PinInit>


}
 8000626:	bf00      	nop
 8000628:	3730      	adds	r7, #48	; 0x30
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <voidSendEnablePulse>:




static void voidSendEnablePulse(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
	/*Send enable pulse*/
	GPIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,PIN_HIGH);
 8000632:	2201      	movs	r2, #1
 8000634:	2108      	movs	r1, #8
 8000636:	2000      	movs	r0, #0
 8000638:	f000 fba2 	bl	8000d80 <GPIO_u8SetPinValue>
	
	SYSTIC_delay_ms(2);
 800063c:	2002      	movs	r0, #2
 800063e:	f001 f86f 	bl	8001720 <SYSTIC_delay_ms>
	GPIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,PIN_LOW);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	2000      	movs	r0, #0
 8000648:	f000 fb9a 	bl	8000d80 <GPIO_u8SetPinValue>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <voidSetLCDHalfDataPort>:




static void voidSetLCDHalfDataPort(uint8_t Copy_u8Nipple)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]

	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D4_PIN, GET_BIT(Copy_u8Nipple,0));
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	461a      	mov	r2, r3
 8000664:	210f      	movs	r1, #15
 8000666:	2001      	movs	r0, #1
 8000668:	f000 fb8a 	bl	8000d80 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D5_PIN, GET_BIT(Copy_u8Nipple,1));
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	085b      	lsrs	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	210e      	movs	r1, #14
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fb7f 	bl	8000d80 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D6_PIN, GET_BIT(Copy_u8Nipple,2));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	089b      	lsrs	r3, r3, #2
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	210d      	movs	r1, #13
 8000692:	2001      	movs	r0, #1
 8000694:	f000 fb74 	bl	8000d80 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D7_PIN, GET_BIT(Copy_u8Nipple,3));
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	210c      	movs	r1, #12
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fb69 	bl	8000d80 <GPIO_u8SetPinValue>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <CLCD_voidSendCmd>:




void CLCD_voidSendCmd(uint8_t Copy_u8Cmd)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4603      	mov	r3, r0
 80006be:	71fb      	strb	r3, [r7, #7]
	/*Set RS pin to low for command*/
	GPIO_u8SetPinValue( CLCD_CTRL_PORT, CLCD_RS_PIN, PIN_LOW);
 80006c0:	2200      	movs	r2, #0
 80006c2:	210b      	movs	r1, #11
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fb5b 	bl	8000d80 <GPIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	091b      	lsrs	r3, r3, #4
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffbd 	bl	8000650 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 80006d6:	f7ff ffaa 	bl	800062e <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffb7 	bl	8000650 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 80006e2:	f7ff ffa4 	bl	800062e <voidSendEnablePulse>
#endif
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <CLCD_voidSendData>:




void CLCD_voidSendData(uint8_t Copy_u8Data)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	71fb      	strb	r3, [r7, #7]
	/*Set RS pin to high for Data*/
	GPIO_u8SetPinValue( CLCD_CTRL_PORT, CLCD_RS_PIN, PIN_HIGH);
 80006f8:	2201      	movs	r2, #1
 80006fa:	210b      	movs	r1, #11
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 fb3f 	bl	8000d80 <GPIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	091b      	lsrs	r3, r3, #4
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffa1 	bl	8000650 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 800070e:	f7ff ff8e 	bl	800062e <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff9b 	bl	8000650 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 800071a:	f7ff ff88 	bl	800062e <voidSendEnablePulse>
#endif

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <CLCD_voidInit>:




void CLCD_voidInit(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
	/*wait for more than 30ms after power on*/
	SYSTIC_delay_ms(40);
 800072a:	2028      	movs	r0, #40	; 0x28
 800072c:	f000 fff8 	bl	8001720 <SYSTIC_delay_ms>
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
 8000730:	2002      	movs	r0, #2
 8000732:	f7ff ff8d 	bl	8000650 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000736:	f7ff ff7a 	bl	800062e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
 800073a:	2002      	movs	r0, #2
 800073c:	f7ff ff88 	bl	8000650 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000740:	f7ff ff75 	bl	800062e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
 8000744:	2008      	movs	r0, #8
 8000746:	f7ff ff83 	bl	8000650 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 800074a:	f7ff ff70 	bl	800062e <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
 800074e:	200c      	movs	r0, #12
 8000750:	f7ff ffb1 	bl	80006b6 <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff ffae 	bl	80006b6 <CLCD_voidSendCmd>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}

0800075e <CLCD_u8SendString>:




uint8_t CLCD_u8SendString(const char* Copy_chString)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b084      	sub	sp, #16
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState= OK;
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]
	if(Copy_chString != NULL)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d013      	beq.n	8000798 <CLCD_u8SendString+0x3a>
	{
		uint8_t Local_u8Counter=0u;
 8000770:	2300      	movs	r3, #0
 8000772:	73bb      	strb	r3, [r7, #14]
		while(Copy_chString[Local_u8Counter] != '\0')
 8000774:	e009      	b.n	800078a <CLCD_u8SendString+0x2c>
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
 8000776:	7bbb      	ldrb	r3, [r7, #14]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ffb5 	bl	80006ee <CLCD_voidSendData>
			Local_u8Counter++;
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	3301      	adds	r3, #1
 8000788:	73bb      	strb	r3, [r7, #14]
		while(Copy_chString[Local_u8Counter] != '\0')
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1ef      	bne.n	8000776 <CLCD_u8SendString+0x18>
 8000796:	e001      	b.n	800079c <CLCD_u8SendString+0x3e>
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
 8000798:	2302      	movs	r3, #2
 800079a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <CLCD_voidSendNumber>:




void CLCD_voidSendNumber(signed int Copy_s32Number)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	

	char Local_chNumberArr[10];
	uint8_t Local_u8RightDigit;
	uint8_t Local_u8Counter=0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	75fb      	strb	r3, [r7, #23]
	signed char Local_s8Counter2;

	if (Copy_s32Number == 0)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d103      	bne.n	80007c2 <CLCD_voidSendNumber+0x1a>
	{
		CLCD_voidSendData('0');
 80007ba:	2030      	movs	r0, #48	; 0x30
 80007bc:	f7ff ff97 	bl	80006ee <CLCD_voidSendData>
 80007c0:	e045      	b.n	800084e <CLCD_voidSendNumber+0xa6>
		return ;
	}
	else if(Copy_s32Number < 0)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	da27      	bge.n	8000818 <CLCD_voidSendNumber+0x70>
	{
		CLCD_voidSendData('-');
 80007c8:	202d      	movs	r0, #45	; 0x2d
 80007ca:	f7ff ff90 	bl	80006ee <CLCD_voidSendData>
		Copy_s32Number *= -1;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	425b      	negs	r3, r3
 80007d2:	607b      	str	r3, [r7, #4]
	}
	while(Copy_s32Number != 0)
 80007d4:	e020      	b.n	8000818 <CLCD_voidSendNumber+0x70>
	{
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <CLCD_voidSendNumber+0xac>)
 80007da:	fb83 1302 	smull	r1, r3, r3, r2
 80007de:	1099      	asrs	r1, r3, #2
 80007e0:	17d3      	asrs	r3, r2, #31
 80007e2:	1ac9      	subs	r1, r1, r3
 80007e4:	460b      	mov	r3, r1
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	1ad1      	subs	r1, r2, r3
 80007ee:	460b      	mov	r3, r1
 80007f0:	757b      	strb	r3, [r7, #21]
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a17      	ldr	r2, [pc, #92]	; (8000854 <CLCD_voidSendNumber+0xac>)
 80007f6:	fb82 1203 	smull	r1, r2, r2, r3
 80007fa:	1092      	asrs	r2, r2, #2
 80007fc:	17db      	asrs	r3, r3, #31
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	607b      	str	r3, [r7, #4]
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
 8000802:	7dfb      	ldrb	r3, [r7, #23]
 8000804:	7d7a      	ldrb	r2, [r7, #21]
 8000806:	3230      	adds	r2, #48	; 0x30
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	3318      	adds	r3, #24
 800080c:	443b      	add	r3, r7
 800080e:	f803 2c10 	strb.w	r2, [r3, #-16]
		Local_u8Counter++;
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	3301      	adds	r3, #1
 8000816:	75fb      	strb	r3, [r7, #23]
	while(Copy_s32Number != 0)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1db      	bne.n	80007d6 <CLCD_voidSendNumber+0x2e>
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
 800081e:	7dfb      	ldrb	r3, [r7, #23]
 8000820:	3b01      	subs	r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	75bb      	strb	r3, [r7, #22]
 8000826:	e00e      	b.n	8000846 <CLCD_voidSendNumber+0x9e>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
 8000828:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800082c:	3318      	adds	r3, #24
 800082e:	443b      	add	r3, r7
 8000830:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff5a 	bl	80006ee <CLCD_voidSendData>
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
 800083a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3b01      	subs	r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	75bb      	strb	r3, [r7, #22]
 8000846:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800084a:	2b00      	cmp	r3, #0
 800084c:	daec      	bge.n	8000828 <CLCD_voidSendNumber+0x80>
	}
}
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	66666667 	.word	0x66666667

08000858 <CLCD_voidGoToXY>:




void CLCD_voidGoToXY(uint8_t Copy_u8XPos, uint8_t Copy_u8YPos)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8DDRamAdd;
	if(Copy_u8YPos == 0u)
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d102      	bne.n	8000874 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRamAdd= Copy_u8XPos;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e005      	b.n	8000880 <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8YPos == 1u)
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d102      	bne.n	8000880 <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	3340      	adds	r3, #64	; 0x40
 800087e:	73fb      	strb	r3, [r7, #15]
	}
	/*Set bit 7 for Set DDRAM address command */
	Local_u8DDRamAdd |= 1<<7u;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000886:	73fb      	strb	r3, [r7, #15]

	CLCD_voidSendCmd(Local_u8DDRamAdd);
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff13 	bl	80006b6 <CLCD_voidSendCmd>
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <CLCD_ClearDisplay>:
	/*Display the pattern written inside CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
}

void CLCD_ClearDisplay(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	CLCD_voidSendCmd(DISPLAY_CLEAR);
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff ff0a 	bl	80006b6 <CLCD_voidSendCmd>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <EXTI_Init>:
 * @parameter[in] EXTI_Confg : the initialization values of the EXTI
 * @retval ErrorStatus
 */

uint8_t EXTI_Init(EXTI_Confg* Copy_EXTI)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	uint8_t Error_state =OK;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]

	if( (Copy_EXTI != NULL) && (Copy_EXTI->EXTI_CallBackFunc != NULL) )
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f000 808d 	beq.w	80009d6 <EXTI_Init+0x12e>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	f000 8088 	beq.w	80009d6 <EXTI_Init+0x12e>
	{
		EXTI_GPCallBackFunc[Copy_EXTI->LINE] = (Copy_EXTI->EXTI_CallBackFunc) ;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4619      	mov	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	4a45      	ldr	r2, [pc, #276]	; (80009e8 <EXTI_Init+0x140>)
 80008d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	d878      	bhi.n	80009d0 <EXTI_Init+0x128>
		{
			if( (Copy_EXTI->Mode) == Enable)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10b      	bne.n	80008fe <EXTI_Init+0x56>
			{
				/* enable EXTI Line */
				EXTI->IMR |= ( 1 << (Copy_EXTI->LINE)) ;
 80008e6:	4b41      	ldr	r3, [pc, #260]	; (80009ec <EXTI_Init+0x144>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	4611      	mov	r1, r2
 80008f0:	2201      	movs	r2, #1
 80008f2:	408a      	lsls	r2, r1
 80008f4:	4611      	mov	r1, r2
 80008f6:	4a3d      	ldr	r2, [pc, #244]	; (80009ec <EXTI_Init+0x144>)
 80008f8:	430b      	orrs	r3, r1
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	e012      	b.n	8000924 <EXTI_Init+0x7c>
			}
			else if( (Copy_EXTI->Mode) == Disable)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	789b      	ldrb	r3, [r3, #2]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10c      	bne.n	8000920 <EXTI_Init+0x78>
			{
				/* disable EXTI Line */
				EXTI->IMR &= ~( 1 << (Copy_EXTI->LINE)) ;
 8000906:	4b39      	ldr	r3, [pc, #228]	; (80009ec <EXTI_Init+0x144>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	7812      	ldrb	r2, [r2, #0]
 800090e:	4611      	mov	r1, r2
 8000910:	2201      	movs	r2, #1
 8000912:	408a      	lsls	r2, r1
 8000914:	43d2      	mvns	r2, r2
 8000916:	4611      	mov	r1, r2
 8000918:	4a34      	ldr	r2, [pc, #208]	; (80009ec <EXTI_Init+0x144>)
 800091a:	400b      	ands	r3, r1
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	e001      	b.n	8000924 <EXTI_Init+0x7c>
			}
			else
			{
				Error_state =NOK;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
			}

			if( (Copy_EXTI->Trigger) == FallingEdge)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	785b      	ldrb	r3, [r3, #1]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d117      	bne.n	800095c <EXTI_Init+0xb4>
			{
				/* set trigger configuration to Falling edge */
				EXTI->FTSR |= ( 1 << (Copy_EXTI->LINE)) ;
 800092c:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <EXTI_Init+0x144>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	4611      	mov	r1, r2
 8000936:	2201      	movs	r2, #1
 8000938:	408a      	lsls	r2, r1
 800093a:	4611      	mov	r1, r2
 800093c:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <EXTI_Init+0x144>)
 800093e:	430b      	orrs	r3, r1
 8000940:	60d3      	str	r3, [r2, #12]
				/* Clear trigger configuration to Raising edge */
				EXTI->RTSR &= ~( 1 << (Copy_EXTI->LINE)) ;
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <EXTI_Init+0x144>)
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	4611      	mov	r1, r2
 800094c:	2201      	movs	r2, #1
 800094e:	408a      	lsls	r2, r1
 8000950:	43d2      	mvns	r2, r2
 8000952:	4611      	mov	r1, r2
 8000954:	4a25      	ldr	r2, [pc, #148]	; (80009ec <EXTI_Init+0x144>)
 8000956:	400b      	ands	r3, r1
 8000958:	6093      	str	r3, [r2, #8]
		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 800095a:	e03e      	b.n	80009da <EXTI_Init+0x132>
			}
			else if( (Copy_EXTI->Trigger) == RaisingEdge)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	785b      	ldrb	r3, [r3, #1]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d117      	bne.n	8000994 <EXTI_Init+0xec>
			{
				/* set trigger configuration to Raising edge */
				EXTI->RTSR |= ( 1 << (Copy_EXTI->LINE)) ;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <EXTI_Init+0x144>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	4611      	mov	r1, r2
 800096e:	2201      	movs	r2, #1
 8000970:	408a      	lsls	r2, r1
 8000972:	4611      	mov	r1, r2
 8000974:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <EXTI_Init+0x144>)
 8000976:	430b      	orrs	r3, r1
 8000978:	6093      	str	r3, [r2, #8]
				/* Clear trigger configuration to Falling edge */
				EXTI->FTSR &= ~( 1 << (Copy_EXTI->LINE)) ;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <EXTI_Init+0x144>)
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	4611      	mov	r1, r2
 8000984:	2201      	movs	r2, #1
 8000986:	408a      	lsls	r2, r1
 8000988:	43d2      	mvns	r2, r2
 800098a:	4611      	mov	r1, r2
 800098c:	4a17      	ldr	r2, [pc, #92]	; (80009ec <EXTI_Init+0x144>)
 800098e:	400b      	ands	r3, r1
 8000990:	60d3      	str	r3, [r2, #12]
		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 8000992:	e022      	b.n	80009da <EXTI_Init+0x132>
			}
			else if( (Copy_EXTI->Trigger) == Both)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	785b      	ldrb	r3, [r3, #1]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d116      	bne.n	80009ca <EXTI_Init+0x122>
			{
				/* set trigger configuration to Raising edge */
				EXTI->RTSR |= ( 1 << (Copy_EXTI->LINE)) ;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <EXTI_Init+0x144>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	7812      	ldrb	r2, [r2, #0]
 80009a4:	4611      	mov	r1, r2
 80009a6:	2201      	movs	r2, #1
 80009a8:	408a      	lsls	r2, r1
 80009aa:	4611      	mov	r1, r2
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <EXTI_Init+0x144>)
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6093      	str	r3, [r2, #8]
				/* set trigger configuration to Falling edge */
				EXTI->FTSR |= ( 1 << (Copy_EXTI->LINE)) ;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <EXTI_Init+0x144>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	4611      	mov	r1, r2
 80009bc:	2201      	movs	r2, #1
 80009be:	408a      	lsls	r2, r1
 80009c0:	4611      	mov	r1, r2
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <EXTI_Init+0x144>)
 80009c4:	430b      	orrs	r3, r1
 80009c6:	60d3      	str	r3, [r2, #12]
		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 80009c8:	e007      	b.n	80009da <EXTI_Init+0x132>
			}
			else
			{
				Error_state =NOK;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 80009ce:	e004      	b.n	80009da <EXTI_Init+0x132>
			}
		}
		else
		{
			Error_state =NOK;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 80009d4:	e001      	b.n	80009da <EXTI_Init+0x132>
		}
	}

	else
	{
		Error_state =NOK;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
	}
	return Error_state;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000068 	.word	0x20000068
 80009ec:	40010400 	.word	0x40010400

080009f0 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI0)) ;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <EXTI0_IRQHandler+0x1c>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <EXTI0_IRQHandler+0x1c>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI0]();
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <EXTI0_IRQHandler+0x20>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4798      	blx	r3

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40010400 	.word	0x40010400
 8000a10:	20000068 	.word	0x20000068

08000a14 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI1)) ;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <EXTI1_IRQHandler+0x1c>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <EXTI1_IRQHandler+0x1c>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI1]();
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <EXTI1_IRQHandler+0x20>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4798      	blx	r3

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40010400 	.word	0x40010400
 8000a34:	20000068 	.word	0x20000068

08000a38 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI2)) ;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <EXTI2_IRQHandler+0x1c>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <EXTI2_IRQHandler+0x1c>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI2]();
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <EXTI2_IRQHandler+0x20>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	4798      	blx	r3

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010400 	.word	0x40010400
 8000a58:	20000068 	.word	0x20000068

08000a5c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI3)) ;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <EXTI3_IRQHandler+0x1c>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <EXTI3_IRQHandler+0x1c>)
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI3]();
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <EXTI3_IRQHandler+0x20>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	4798      	blx	r3

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40010400 	.word	0x40010400
 8000a7c:	20000068 	.word	0x20000068

08000a80 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI4)) ;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <EXTI4_IRQHandler+0x1c>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <EXTI4_IRQHandler+0x1c>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI4]();
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <EXTI4_IRQHandler+0x20>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	4798      	blx	r3

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40010400 	.word	0x40010400
 8000aa0:	20000068 	.word	0x20000068

08000aa4 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	if(GET_BIT( (EXTI->PR),EXTI5 ))
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d008      	beq.n	8000ac6 <EXTI9_5_IRQHandler+0x22>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI5)) ;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI5]();
 8000ac0:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <EXTI9_5_IRQHandler+0xa4>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI6 ))
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d008      	beq.n	8000ae4 <EXTI9_5_IRQHandler+0x40>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI6)) ;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000adc:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI6]();
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <EXTI9_5_IRQHandler+0xa4>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI7 ))
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <EXTI9_5_IRQHandler+0x5e>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI7)) ;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afa:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI7]();
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <EXTI9_5_IRQHandler+0xa4>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI8 ))
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d008      	beq.n	8000b20 <EXTI9_5_IRQHandler+0x7c>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI8)) ;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b18:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI8]();
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <EXTI9_5_IRQHandler+0xa4>)
 8000b1c:	6a1b      	ldr	r3, [r3, #32]
 8000b1e:	4798      	blx	r3


	}
	if(GET_BIT( (EXTI->PR),EXTI9 ))
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <EXTI9_5_IRQHandler+0x9a>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI9)) ;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <EXTI9_5_IRQHandler+0xa0>)
 8000b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b36:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI9]();
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <EXTI9_5_IRQHandler+0xa4>)
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3c:	4798      	blx	r3

	}
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010400 	.word	0x40010400
 8000b48:	20000068 	.word	0x20000068

08000b4c <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	if(GET_BIT( (EXTI->PR),EXTI10 ))
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d008      	beq.n	8000b6e <EXTI15_10_IRQHandler+0x22>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI10)) ;
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a29      	ldr	r2, [pc, #164]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b66:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI10]();
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <EXTI15_10_IRQHandler+0xc0>)
 8000b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6c:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI11 ))
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d008      	beq.n	8000b8c <EXTI15_10_IRQHandler+0x40>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI11)) ;
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000b80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b84:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI11]();
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <EXTI15_10_IRQHandler+0xc0>)
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI12 ))
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d008      	beq.n	8000baa <EXTI15_10_IRQHandler+0x5e>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI12)) ;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000b9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba2:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI12]();
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <EXTI15_10_IRQHandler+0xc0>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI13 ))
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d008      	beq.n	8000bc8 <EXTI15_10_IRQHandler+0x7c>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI13)) ;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000bbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bc0:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI13]();
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <EXTI15_10_IRQHandler+0xc0>)
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc6:	4798      	blx	r3


	}
	if(GET_BIT( (EXTI->PR),EXTI14 ))
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d008      	beq.n	8000be6 <EXTI15_10_IRQHandler+0x9a>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI14)) ;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI14]();
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <EXTI15_10_IRQHandler+0xc0>)
 8000be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be4:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI15 ))
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d008      	beq.n	8000c04 <EXTI15_10_IRQHandler+0xb8>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI15)) ;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <EXTI15_10_IRQHandler+0xbc>)
 8000bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bfc:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI15]();
 8000bfe:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <EXTI15_10_IRQHandler+0xc0>)
 8000c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c02:	4798      	blx	r3

	}

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40010400 	.word	0x40010400
 8000c0c:	20000068 	.word	0x20000068

08000c10 <GPIO_u8PinInit>:
 * @param[in] PinConfig : the initialization variables of the pins
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_t *PinConfig)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
	if(PinConfig!=NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 80a4 	beq.w	8000d6c <GPIO_u8PinInit+0x15c>
	{
		if((PinConfig->Port <= PORTH)&&(PinConfig->PinNum <=PIN15))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	f200 809c 	bhi.w	8000d66 <GPIO_u8PinInit+0x156>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	2b0f      	cmp	r3, #15
 8000c34:	f200 8097 	bhi.w	8000d66 <GPIO_u8PinInit+0x156>
		{
			/*Select GPIO mode : Input , Output  */
			uint8_t Local_u8RegNum = (PinConfig->PinNum / 8);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	785b      	ldrb	r3, [r3, #1]
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	73bb      	strb	r3, [r7, #14]
			uint8_t Local_u8BitNum = (PinConfig->PinNum % 8);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	785b      	ldrb	r3, [r3, #1]
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	737b      	strb	r3, [r7, #13]
			(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] &= ~(MODE_MASK << (Local_u8BitNum * MODE_PIN_ACCESS));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b4a      	ldr	r3, [pc, #296]	; (8000d7c <GPIO_u8PinInit+0x16c>)
 8000c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c56:	7bba      	ldrb	r2, [r7, #14]
 8000c58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c5c:	7b7b      	ldrb	r3, [r7, #13]
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	2203      	movs	r2, #3
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	4618      	mov	r0, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <GPIO_u8PinInit+0x16c>)
 8000c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c76:	7bba      	ldrb	r2, [r7, #14]
 8000c78:	4001      	ands	r1, r0
 8000c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] |= ((PinConfig->Mode) << (Local_u8BitNum * MODE_PIN_ACCESS));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <GPIO_u8PinInit+0x16c>)
 8000c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8a:	7bba      	ldrb	r2, [r7, #14]
 8000c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	789b      	ldrb	r3, [r3, #2]
 8000c94:	461a      	mov	r2, r3
 8000c96:	7b7b      	ldrb	r3, [r7, #13]
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <GPIO_u8PinInit+0x16c>)
 8000ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cac:	7bba      	ldrb	r2, [r7, #14]
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] &= ~(CNF_MASK << ((Local_u8BitNum * CNF_PIN_ACCESS) + CNF_PIN_SHIFT));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <GPIO_u8PinInit+0x16c>)
 8000cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc0:	7bba      	ldrb	r2, [r7, #14]
 8000cc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000cc6:	7b7b      	ldrb	r3, [r7, #13]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <GPIO_u8PinInit+0x16c>)
 8000cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce2:	7bba      	ldrb	r2, [r7, #14]
 8000ce4:	4001      	ands	r1, r0
 8000ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if((PinConfig->Mode) == INPUT)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	789b      	ldrb	r3, [r3, #2]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d11c      	bne.n	8000d2c <GPIO_u8PinInit+0x11c>
			{
				/*Select input type : Analog, Floating, PULLUP PULLDOWN*/
				(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] |= ((PinConfig->Input) << ((Local_u8BitNum * CNF_PIN_ACCESS) + CNF_PIN_SHIFT));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <GPIO_u8PinInit+0x16c>)
 8000cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfe:	7bba      	ldrb	r2, [r7, #14]
 8000d00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	78db      	ldrb	r3, [r3, #3]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	7b7b      	ldrb	r3, [r7, #13]
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <GPIO_u8PinInit+0x16c>)
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	4301      	orrs	r1, r0
 8000d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		{
 8000d2a:	e021      	b.n	8000d70 <GPIO_u8PinInit+0x160>
			}
			else
			{
				/*Select output type : OUTPUT Push Pull, Output OpenDrain, Alternate function Push Pull, Alternate function OpenDrain*/
				(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] |= (PinConfig->Output << ((Local_u8BitNum * CNF_PIN_ACCESS) + CNF_PIN_SHIFT));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <GPIO_u8PinInit+0x16c>)
 8000d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d38:	7bba      	ldrb	r2, [r7, #14]
 8000d3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	791b      	ldrb	r3, [r3, #4]
 8000d42:	461a      	mov	r2, r3
 8000d44:	7b7b      	ldrb	r3, [r7, #13]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <GPIO_u8PinInit+0x16c>)
 8000d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5c:	7bba      	ldrb	r2, [r7, #14]
 8000d5e:	4301      	orrs	r1, r0
 8000d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		{
 8000d64:	e004      	b.n	8000d70 <GPIO_u8PinInit+0x160>
			}
		}
		else
		{
			Local_u8ErrorState =NOK;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
 8000d6a:	e001      	b.n	8000d70 <GPIO_u8PinInit+0x160>
		}
	}
	else{
		Local_u8ErrorState = NULL_PTR_ERR;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	2000000c 	.word	0x2000000c

08000d80 <GPIO_u8SetPinValue>:
 * @param[in] PinVal : the pin value, get options @PinVal_t enum
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8SetPinValue(Port_t Port, Pin_t PinNum, PinVal_t PinVal)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	71bb      	strb	r3, [r7, #6]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
	if((Port<=PORTH)&&(PinNum<=PIN15))
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b07      	cmp	r3, #7
 8000d9a:	d82e      	bhi.n	8000dfa <GPIO_u8SetPinValue+0x7a>
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d82b      	bhi.n	8000dfa <GPIO_u8SetPinValue+0x7a>
	{
		if(PinVal == PIN_LOW)
 8000da2:	797b      	ldrb	r3, [r7, #5]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d111      	bne.n	8000dcc <GPIO_u8SetPinValue+0x4c>
		{
			GPIOPORT[Port]->ODR &= ~(1<<PinNum);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <GPIO_u8SetPinValue+0x8c>)
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2101      	movs	r1, #1
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	4912      	ldr	r1, [pc, #72]	; (8000e0c <GPIO_u8SetPinValue+0x8c>)
 8000dc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dc6:	4002      	ands	r2, r0
 8000dc8:	60da      	str	r2, [r3, #12]
		if(PinVal == PIN_LOW)
 8000dca:	e018      	b.n	8000dfe <GPIO_u8SetPinValue+0x7e>
			/* GPIOPort[Port]->BSRR = 1<< 16 + PinNum ; */
		}


		else if(PinVal == PIN_HIGH)
 8000dcc:	797b      	ldrb	r3, [r7, #5]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d110      	bne.n	8000df4 <GPIO_u8SetPinValue+0x74>
		{
			GPIOPORT[Port]->ODR |= (1<<PinNum);
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <GPIO_u8SetPinValue+0x8c>)
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	2101      	movs	r1, #1
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	4618      	mov	r0, r3
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4908      	ldr	r1, [pc, #32]	; (8000e0c <GPIO_u8SetPinValue+0x8c>)
 8000dea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dee:	4302      	orrs	r2, r0
 8000df0:	60da      	str	r2, [r3, #12]
		if(PinVal == PIN_LOW)
 8000df2:	e004      	b.n	8000dfe <GPIO_u8SetPinValue+0x7e>
			/* GPIOPort[Port]->BSRR = 1<<  PinNum ; */
		}
		else{
			Local_u8ErrorState =NOK;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
		if(PinVal == PIN_LOW)
 8000df8:	e001      	b.n	8000dfe <GPIO_u8SetPinValue+0x7e>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000000c 	.word	0x2000000c

08000e10 <LED_Init>:

/********************************************************************************
 *************** ### FUNCTION IMPLEMENTATION SECTION ### ************************
 ********************************************************************************/
void LED_Init(Port_t	Port , Pin_t	PinNum )
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71bb      	strb	r3, [r7, #6]

	GPIO_PinConfig_t Copy_PinConfig={
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	723b      	strb	r3, [r7, #8]
 8000e24:	79bb      	ldrb	r3, [r7, #6]
 8000e26:	727b      	strb	r3, [r7, #9]
 8000e28:	2302      	movs	r3, #2
 8000e2a:	72bb      	strb	r3, [r7, #10]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	72fb      	strb	r3, [r7, #11]
 8000e30:	2300      	movs	r3, #0
 8000e32:	733b      	strb	r3, [r7, #12]
			.Mode		= OUTPUT_SPEED_2MHz	,
			.Output	= OUTPUT_PUSH_PULL		,
			.Input	= FLOATING
	};
	/*GPIO pin initialization*/
	GPIO_u8PinInit(&Copy_PinConfig);
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fee9 	bl	8000c10 <GPIO_u8PinInit>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <LED_On>:

void LED_On(Port_t	Port , Pin_t	PinNum )
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	460a      	mov	r2, r1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71bb      	strb	r3, [r7, #6]
	GPIO_u8SetPinValue(Port, PinNum, PIN_HIGH);
 8000e56:	79b9      	ldrb	r1, [r7, #6]
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff8f 	bl	8000d80 <GPIO_u8SetPinValue>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <NVIC_EnableIRQ>:
 * @param : IRQn				(ENUM: @NVIC_IRQn_t)
 * @retval: Local_ErrorState	(ENUM: @ErrorState_t)
 *
 * */
ErrorState_t NVIC_EnableIRQ(NVIC_IRQn_t IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	ErrorState_t Local_ErrorState = OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_RegNumber = (IRQn / 32);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	095b      	lsrs	r3, r3, #5
 8000e7e:	73bb      	strb	r3, [r7, #14]
	uint8_t Local_PinNumber = (IRQn % 32);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	737b      	strb	r3, [r7, #13]

	if((IRQn >= NVIC_IRQ_WWDG) && (IRQn <= NVIC_IRQ_OTG_FS))
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b43      	cmp	r3, #67	; 0x43
 8000e8c:	d80e      	bhi.n	8000eac <NVIC_EnableIRQ+0x40>
	{

		NVIC->ISER[Local_RegNumber] |= (NVIC_SET_MASK << Local_PinNumber);
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <NVIC_EnableIRQ+0x50>)
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e96:	7b7b      	ldrb	r3, [r7, #13]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	4906      	ldr	r1, [pc, #24]	; (8000ebc <NVIC_EnableIRQ+0x50>)
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	4302      	orrs	r2, r0
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000eaa:	e001      	b.n	8000eb0 <NVIC_EnableIRQ+0x44>
	}
	else
	{
		Local_ErrorState = NOK;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ErrorState;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <RCC_APB2EnableClock>:
 * @brief:	Enable APB2 clock for peripheral
 * @param:	Copy_Peripheral		(ENUM: @APB2Peripherals_t)
 * @retval:	void
 * */
void RCC_APB2EnableClock(APB2Peripherals_t Copy_Peripheral)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_APB2ENR |= ( SET_MASK << Copy_Peripheral );
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <RCC_APB2EnableClock+0x28>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	79fa      	ldrb	r2, [r7, #7]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <RCC_APB2EnableClock+0x28>)
 8000eda:	430b      	orrs	r3, r1
 8000edc:	6193      	str	r3, [r2, #24]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40021000 	.word	0x40021000

08000eec <SPI_Init>:
/*******************************************************/

/****************** MAIN FUNCTIONS *********************/

ErrorState_t SPI_Init(const SPI_CONFIGS_t * SPI_Config)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	ErrorState_t Error_State = OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
	/*Check Passed Configurations*/
	if (OK == SPI_Check_Configs(SPI_Config))
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 faa7 	bl	800144c <SPI_Check_Configs>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f040 819e 	bne.w	8001242 <SPI_Init+0x356>
	{
		/*1- Set Baud Rate Value if Master*/
		if (SPI_Config->Chip_Mode == CHIP_MODE_MASTER)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	79db      	ldrb	r3, [r3, #7]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d122      	bne.n	8000f54 <SPI_Init+0x68>
		{
			SPIs[SPI_Config->SPI_Num]->SPI_CR1 &= ~((BAUD_RATE_MASK)<<BAUD_RATE_START_BITS);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b46      	ldr	r3, [pc, #280]	; (8001030 <SPI_Init+0x144>)
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4b43      	ldr	r3, [pc, #268]	; (8001030 <SPI_Init+0x144>)
 8000f24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f28:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000f2c:	601a      	str	r2, [r3, #0]
			SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  ((SPI_Config->BaudRate_Value)<<BAUD_RATE_START_BITS);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b3e      	ldr	r3, [pc, #248]	; (8001030 <SPI_Init+0x144>)
 8000f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	785b      	ldrb	r3, [r3, #1]
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4619      	mov	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	4b39      	ldr	r3, [pc, #228]	; (8001030 <SPI_Init+0x144>)
 8000f4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
		}
		/*2- Set Clock Polarity*/
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 &= ~((CLOCK_POL_MASK)<<CLOCK_POL_START_BITS);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <SPI_Init+0x144>)
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	4b31      	ldr	r3, [pc, #196]	; (8001030 <SPI_Init+0x144>)
 8000f6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f6e:	f022 0202 	bic.w	r2, r2, #2
 8000f72:	601a      	str	r2, [r3, #0]
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  ((SPI_Config->Clock_Polarity)<<CLOCK_POL_START_BITS);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <SPI_Init+0x144>)
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	789b      	ldrb	r3, [r3, #2]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <SPI_Init+0x144>)
 8000f92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]

		/*3- Set Clock Phase*/
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 &= ~((CLOCK_PHASE_MASK)<<CLOCK_PHASE_START_BITS);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <SPI_Init+0x144>)
 8000fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <SPI_Init+0x144>)
 8000fb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  ((SPI_Config->Clock_Phase)<<CLOCK_PHASE_START_BITS);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <SPI_Init+0x144>)
 8000fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	78db      	ldrb	r3, [r3, #3]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <SPI_Init+0x144>)
 8000fd6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

		/*4- Set Transfer Mode*/
		if(SPI_Config->Transfer_Mode != TRANSFER_MODE_SIMPLEX)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	791b      	ldrb	r3, [r3, #4]
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d026      	beq.n	8001034 <SPI_Init+0x148>
		{
			SPIs[SPI_Config->SPI_Num]->SPI_CR1 &= ~((TRANSFER_MODE_MASK)<<TRANS_MODE_START_BITS);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <SPI_Init+0x144>)
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <SPI_Init+0x144>)
 8000ffc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001000:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001004:	601a      	str	r2, [r3, #0]
			SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  ((SPI_Config->Transfer_Mode)<<TRANS_MODE_START_BITS);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <SPI_Init+0x144>)
 800100e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	039b      	lsls	r3, r3, #14
 800101a:	4619      	mov	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	4b03      	ldr	r3, [pc, #12]	; (8001030 <SPI_Init+0x144>)
 8001024:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001028:	430a      	orrs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e022      	b.n	8001074 <SPI_Init+0x188>
 800102e:	bf00      	nop
 8001030:	20000018 	.word	0x20000018
		}
		else {
			SPIs[SPI_Config->SPI_Num]->SPI_CR1 &= ~((RX_ONLY_MODE_MASK)<<RX_ONLY_START_BITS);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b87      	ldr	r3, [pc, #540]	; (8001258 <SPI_Init+0x36c>)
 800103c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4b83      	ldr	r3, [pc, #524]	; (8001258 <SPI_Init+0x36c>)
 800104a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800104e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001052:	601a      	str	r2, [r3, #0]
			SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  (1<<RX_ONLY_START_BITS);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b7f      	ldr	r3, [pc, #508]	; (8001258 <SPI_Init+0x36c>)
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4619      	mov	r1, r3
 8001068:	4b7b      	ldr	r3, [pc, #492]	; (8001258 <SPI_Init+0x36c>)
 800106a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800106e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001072:	601a      	str	r2, [r3, #0]

		}
		/*5- Set Frame Format Type*/
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 &= ~((FRAME_TYPE_MASK)<<FRAME_TYPE_START_BITS);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b77      	ldr	r3, [pc, #476]	; (8001258 <SPI_Init+0x36c>)
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	4b73      	ldr	r3, [pc, #460]	; (8001258 <SPI_Init+0x36c>)
 800108a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800108e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001092:	601a      	str	r2, [r3, #0]
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  ((SPI_Config->Frame_Type)<<FRAME_TYPE_START_BITS);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <SPI_Init+0x36c>)
 800109c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	795b      	ldrb	r3, [r3, #5]
 80010a6:	01db      	lsls	r3, r3, #7
 80010a8:	4619      	mov	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	4b69      	ldr	r3, [pc, #420]	; (8001258 <SPI_Init+0x36c>)
 80010b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]

		/*6- Set CRC Enable State*/
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 &= ~((CRC_ENABLE_MASK)<<CRC_ENABLE_START_BITS);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	4b65      	ldr	r3, [pc, #404]	; (8001258 <SPI_Init+0x36c>)
 80010c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4b62      	ldr	r3, [pc, #392]	; (8001258 <SPI_Init+0x36c>)
 80010d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010d8:	601a      	str	r2, [r3, #0]
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  ((SPI_Config->CRC_State)<<CRC_ENABLE_START_BITS);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <SPI_Init+0x36c>)
 80010e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7a5b      	ldrb	r3, [r3, #9]
 80010ec:	035b      	lsls	r3, r3, #13
 80010ee:	4619      	mov	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	4b58      	ldr	r3, [pc, #352]	; (8001258 <SPI_Init+0x36c>)
 80010f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]

		/*7- Set Slave Management state*/
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 &= ~((SLAVE_MANAGE_MASK)<<SLAVE_MANAGE_START_BITS);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b54      	ldr	r3, [pc, #336]	; (8001258 <SPI_Init+0x36c>)
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4619      	mov	r1, r3
 8001114:	4b50      	ldr	r3, [pc, #320]	; (8001258 <SPI_Init+0x36c>)
 8001116:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800111a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800111e:	601a      	str	r2, [r3, #0]
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  ((SPI_Config->Slave_Manage_State)<<SLAVE_MANAGE_START_BITS);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <SPI_Init+0x36c>)
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7a1b      	ldrb	r3, [r3, #8]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	4619      	mov	r1, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	4b46      	ldr	r3, [pc, #280]	; (8001258 <SPI_Init+0x36c>)
 800113e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]

		/*8- Set CHIP State*/
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 &= ~((CHIP_MODE_MASK)<<CHIP_MODE_START_BITS);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b42      	ldr	r3, [pc, #264]	; (8001258 <SPI_Init+0x36c>)
 800114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <SPI_Init+0x36c>)
 800115c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001160:	f022 0204 	bic.w	r2, r2, #4
 8001164:	601a      	str	r2, [r3, #0]
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  ((SPI_Config->Chip_Mode)<<CHIP_MODE_START_BITS);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <SPI_Init+0x36c>)
 800116e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	79db      	ldrb	r3, [r3, #7]
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4619      	mov	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	4b35      	ldr	r3, [pc, #212]	; (8001258 <SPI_Init+0x36c>)
 8001184:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]

		/*9- Set Data Frame SIZE*/
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 &= ~((FRAME_SIZE_MASK)<<FRAME_SIZE_START_BITS);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <SPI_Init+0x36c>)
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <SPI_Init+0x36c>)
 80011a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011aa:	601a      	str	r2, [r3, #0]
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  ((SPI_Config->Frame_Size)<<FRAME_SIZE_START_BITS);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <SPI_Init+0x36c>)
 80011b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	799b      	ldrb	r3, [r3, #6]
 80011be:	02db      	lsls	r3, r3, #11
 80011c0:	4619      	mov	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <SPI_Init+0x36c>)
 80011ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]

		/*10- Set MultiMaster Ability State if Master*/
		if (SPI_Config->Chip_Mode == CHIP_MODE_MASTER)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	79db      	ldrb	r3, [r3, #7]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d122      	bne.n	8001220 <SPI_Init+0x334>
		{
			SPIs[SPI_Config->SPI_Num]->SPI_CR2 &= ~((SSOE_MASK)<<SSOE_BIT_START);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <SPI_Init+0x36c>)
 80011e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <SPI_Init+0x36c>)
 80011f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011f4:	f022 0204 	bic.w	r2, r2, #4
 80011f8:	605a      	str	r2, [r3, #4]
			SPIs[SPI_Config->SPI_Num]->SPI_CR2 |=  ((SPI_Config->MultiMaster_State)<<SSOE_BIT_START);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <SPI_Init+0x36c>)
 8001202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7a9b      	ldrb	r3, [r3, #10]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4619      	mov	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <SPI_Init+0x36c>)
 8001218:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800121c:	430a      	orrs	r2, r1
 800121e:	605a      	str	r2, [r3, #4]
		}
		/*11- Enable SPI*/
		SPIs[SPI_Config->SPI_Num]->SPI_CR1 |=  ((1)<<SPI_ENABLE_BIT_START);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <SPI_Init+0x36c>)
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4619      	mov	r1, r3
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <SPI_Init+0x36c>)
 8001236:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800123a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e004      	b.n	800124c <SPI_Init+0x360>
	}
	else
	{
		Error_State = SPI_Check_Configs(SPI_Config);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f902 	bl	800144c <SPI_Check_Configs>
 8001248:	4603      	mov	r3, r0
 800124a:	73fb      	strb	r3, [r7, #15]
	}
	return Error_State;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000018 	.word	0x20000018

0800125c <SPI_Receive>:
 * @param			:	Buffer to save Data
 * @param 			: 	Data Buffer Size
 * @retval			:	Error State
 */
ErrorState_t SPI_Receive(const SPI_CONFIGS_t * SPI_Config, uint16_t * Received_Data ,uint8_t Buffer_Size)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	4613      	mov	r3, r2
 8001268:	71fb      	strb	r3, [r7, #7]
	ErrorState_t 	Error_State = 	OK	;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
	uint8_t 	  	Counter	  	=	0 	;
 800126e:	2300      	movs	r3, #0
 8001270:	75bb      	strb	r3, [r7, #22]
	uint8_t 	 	Flag_State  =	FLAG_RESET 	;
 8001272:	2300      	movs	r3, #0
 8001274:	757b      	strb	r3, [r7, #21]
	if (NULL != Received_Data)
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d060      	beq.n	800133e <SPI_Receive+0xe2>
	{
		if ((SPI_Config->SPI_Num>=SPI_NUMBER1) && (SPI_Config->SPI_Num<=SPI_NUMBER2))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d859      	bhi.n	8001338 <SPI_Receive+0xdc>
		{
			if (SPI_Config->Chip_Mode == CHIP_MODE_SLAVE)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	79db      	ldrb	r3, [r3, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d122      	bne.n	80012d2 <SPI_Receive+0x76>
			{
				while (Counter < Buffer_Size)
 800128c:	e01c      	b.n	80012c8 <SPI_Receive+0x6c>
				{
					/*Wait till data is Received*/
					while (Flag_State != FLAG_SET)
					{
						Flag_State	=	GET_BIT(SPIs[SPI_Config->SPI_Num]->SPI_SR , SPI_FLAGS_RXNE);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <SPI_Receive+0xf4>)
 8001296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	757b      	strb	r3, [r7, #21]
					while (Flag_State != FLAG_SET)
 80012a4:	7d7b      	ldrb	r3, [r7, #21]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d1f1      	bne.n	800128e <SPI_Receive+0x32>
					}
					/*Read the Received data*/
					Received_Data[Counter++] = SPIs[SPI_Config->SPI_Num]->SPI_DR ;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <SPI_Receive+0xf4>)
 80012b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b6:	68d9      	ldr	r1, [r3, #12]
 80012b8:	7dbb      	ldrb	r3, [r7, #22]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	75ba      	strb	r2, [r7, #22]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	b28a      	uxth	r2, r1
 80012c6:	801a      	strh	r2, [r3, #0]
				while (Counter < Buffer_Size)
 80012c8:	7dba      	ldrb	r2, [r7, #22]
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d3e9      	bcc.n	80012a4 <SPI_Receive+0x48>
 80012d0:	e037      	b.n	8001342 <SPI_Receive+0xe6>
				}
			}
			else if (SPI_Config->Chip_Mode == CHIP_MODE_MASTER)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	79db      	ldrb	r3, [r3, #7]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d12b      	bne.n	8001332 <SPI_Receive+0xd6>
			{
				while (Counter < Buffer_Size)
 80012da:	e025      	b.n	8001328 <SPI_Receive+0xcc>
				{
					/* writing garbage in the Tx Buffer to start Receiving*/
					SPIs[SPI_Config->SPI_Num]->SPI_DR = GARBAGE_VALUE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <SPI_Receive+0xf4>)
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
					/*Wait till data is Received*/
					while (Flag_State != FLAG_SET)
 80012ec:	e00a      	b.n	8001304 <SPI_Receive+0xa8>
					{
						Flag_State	=	GET_BIT(SPIs[SPI_Config->SPI_Num]->SPI_SR , SPI_FLAGS_RXNE);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <SPI_Receive+0xf4>)
 80012f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	757b      	strb	r3, [r7, #21]
					while (Flag_State != FLAG_SET)
 8001304:	7d7b      	ldrb	r3, [r7, #21]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d1f1      	bne.n	80012ee <SPI_Receive+0x92>
					}
					/*Read the Received data*/
					Received_Data[Counter++] = SPIs[SPI_Config->SPI_Num]->SPI_DR ;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <SPI_Receive+0xf4>)
 8001312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001316:	68d9      	ldr	r1, [r3, #12]
 8001318:	7dbb      	ldrb	r3, [r7, #22]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	75ba      	strb	r2, [r7, #22]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	4413      	add	r3, r2
 8001324:	b28a      	uxth	r2, r1
 8001326:	801a      	strh	r2, [r3, #0]
				while (Counter < Buffer_Size)
 8001328:	7dba      	ldrb	r2, [r7, #22]
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	429a      	cmp	r2, r3
 800132e:	d3d5      	bcc.n	80012dc <SPI_Receive+0x80>
 8001330:	e007      	b.n	8001342 <SPI_Receive+0xe6>
				}
			}
			else {
				Error_State = NOK;
 8001332:	2301      	movs	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
 8001336:	e004      	b.n	8001342 <SPI_Receive+0xe6>
			}

		}
		else {
			Error_State = NOK;
 8001338:	2301      	movs	r3, #1
 800133a:	75fb      	strb	r3, [r7, #23]
 800133c:	e001      	b.n	8001342 <SPI_Receive+0xe6>
		}
	}
	else {
		Error_State = NULL_PTR_ERR ;
 800133e:	2302      	movs	r3, #2
 8001340:	75fb      	strb	r3, [r7, #23]
	}
	return Error_State	;
 8001342:	7dfb      	ldrb	r3, [r7, #23]
}
 8001344:	4618      	mov	r0, r3
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000018 	.word	0x20000018

08001354 <SPI_Receive_IT>:
 * @param 			: 	Data Buffer Size
 * @param			:	CallBack Function
 * @retval			:	Error State
 */
ErrorState_t SPI_Receive_IT(const SPI_CONFIGS_t * SPI_Config, uint8_t * Received_Data ,uint8_t Buffer_Size , void (* SPI_RXC_CallBackFunc)(void))
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	4613      	mov	r3, r2
 8001362:	71fb      	strb	r3, [r7, #7]
	ErrorState_t 	Error_State = 	OK	;
 8001364:	2300      	movs	r3, #0
 8001366:	75fb      	strb	r3, [r7, #23]
	if ((NULL != Received_Data) && (NULL != SPI_RXC_CallBackFunc))
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d05b      	beq.n	8001426 <SPI_Receive_IT+0xd2>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d058      	beq.n	8001426 <SPI_Receive_IT+0xd2>
	{
		if (( SPI_Config->SPI_Num >=SPI_NUMBER1) && ( SPI_Config->SPI_Num <=SPI_NUMBER2))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d851      	bhi.n	8001420 <SPI_Receive_IT+0xcc>
		{
			/*Set Call Back Globally*/
			SPI_pf_CallBackFuncs[SPI_Config->SPI_Num][SPI_FLAGS_RXNE]= SPI_RXC_CallBackFunc ;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <SPI_Receive_IT+0xe4>)
 8001384:	460b      	mov	r3, r1
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	440b      	add	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	601a      	str	r2, [r3, #0]

			/*Set data to be RECEIVED globally*/
			Global_Received_Data = Received_Data ;
 8001392:	4a2a      	ldr	r2, [pc, #168]	; (800143c <SPI_Receive_IT+0xe8>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	6013      	str	r3, [r2, #0]

			/*Set Buffer Size Globally*/
			Global_Data_Size   = Buffer_Size;
 8001398:	4a29      	ldr	r2, [pc, #164]	; (8001440 <SPI_Receive_IT+0xec>)
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	7013      	strb	r3, [r2, #0]

			if (SPI_Config->Chip_Mode == CHIP_MODE_SLAVE)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	79db      	ldrb	r3, [r3, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <SPI_Receive_IT+0x80>
			{
				/*Set IRQ Source*/
				IRQ_Source[SPI_Config->SPI_Num] = SOURCE_RX_SLAVE;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <SPI_Receive_IT+0xf0>)
 80013ae:	2102      	movs	r1, #2
 80013b0:	5499      	strb	r1, [r3, r2]

				/*Enable Receive complete Interrupt*/
				SPIs[SPI_Config->SPI_Num]->SPI_CR2 |= (1<<(SPI_INTERRUPT_RXNEIE));
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <SPI_Receive_IT+0xf4>)
 80013ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <SPI_Receive_IT+0xf4>)
 80013c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013d0:	605a      	str	r2, [r3, #4]
		if (( SPI_Config->SPI_Num >=SPI_NUMBER1) && ( SPI_Config->SPI_Num <=SPI_NUMBER2))
 80013d2:	e02a      	b.n	800142a <SPI_Receive_IT+0xd6>

			}
			else if (SPI_Config->Chip_Mode == CHIP_MODE_MASTER)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	79db      	ldrb	r3, [r3, #7]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d11e      	bne.n	800141a <SPI_Receive_IT+0xc6>
			{
				/*Set IRQ Source*/
				IRQ_Source[SPI_Config->SPI_Num] = SOURCE_RX_MASTER;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <SPI_Receive_IT+0xf0>)
 80013e4:	2103      	movs	r1, #3
 80013e6:	5499      	strb	r1, [r3, r2]
				/* writing garbage in the Tx Buffer to start Receiving*/
				SPIs[SPI_Config->SPI_Num]->SPI_DR = GARBAGE_VALUE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <SPI_Receive_IT+0xf4>)
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]

				/*Enable Receive complete Interrupt*/
				SPIs[SPI_Config->SPI_Num]->SPI_CR2 |= (1<<(SPI_INTERRUPT_RXNEIE));
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <SPI_Receive_IT+0xf4>)
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <SPI_Receive_IT+0xf4>)
 800140e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001416:	605a      	str	r2, [r3, #4]
		if (( SPI_Config->SPI_Num >=SPI_NUMBER1) && ( SPI_Config->SPI_Num <=SPI_NUMBER2))
 8001418:	e007      	b.n	800142a <SPI_Receive_IT+0xd6>
			}
			else {
				Error_State = NOK;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
		if (( SPI_Config->SPI_Num >=SPI_NUMBER1) && ( SPI_Config->SPI_Num <=SPI_NUMBER2))
 800141e:	e004      	b.n	800142a <SPI_Receive_IT+0xd6>
			}
		}
		else {
			Error_State = NOK;
 8001420:	2301      	movs	r3, #1
 8001422:	75fb      	strb	r3, [r7, #23]
		if (( SPI_Config->SPI_Num >=SPI_NUMBER1) && ( SPI_Config->SPI_Num <=SPI_NUMBER2))
 8001424:	e001      	b.n	800142a <SPI_Receive_IT+0xd6>
		}
	}
	else {
		Error_State = NULL_PTR_ERR ;
 8001426:	2302      	movs	r3, #2
 8001428:	75fb      	strb	r3, [r7, #23]
	}
	return Error_State	;
 800142a:	7dfb      	ldrb	r3, [r7, #23]


}
 800142c:	4618      	mov	r0, r3
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	200000ac 	.word	0x200000ac
 800143c:	200000d8 	.word	0x200000d8
 8001440:	200000d0 	.word	0x200000d0
 8001444:	200000a8 	.word	0x200000a8
 8001448:	20000018 	.word	0x20000018

0800144c <SPI_Check_Configs>:
 * @brief			:	Private Function To Check Passed SPI Configurations
 * @param			:	SPI_Configs
 * @retval			:	Error State
 */
static ErrorState_t SPI_Check_Configs(const SPI_CONFIGS_t * SPI_Configs)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	ErrorState_t Error_State = OK ;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]

	if (NULL != SPI_Configs)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d070      	beq.n	8001540 <SPI_Check_Configs+0xf4>
	{
		if ((SPI_Configs->SPI_Num >= SPI_NUMBER1)&&(SPI_Configs->SPI_Num <= SPI_NUMBER2))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d869      	bhi.n	800153a <SPI_Check_Configs+0xee>
		{
			if ((SPI_Configs->BaudRate_Value>=BAUDRATE_FpclkBY2)&&(SPI_Configs->BaudRate_Value<=BAUDRATE_FpclkBY256))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	2b07      	cmp	r3, #7
 800146c:	d862      	bhi.n	8001534 <SPI_Check_Configs+0xe8>
			{
				if((SPI_Configs->CRC_State == CRC_STATE_ENABLED)||(SPI_Configs->CRC_State == CRC_STATE_DISABLED))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7a5b      	ldrb	r3, [r3, #9]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d003      	beq.n	800147e <SPI_Check_Configs+0x32>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7a5b      	ldrb	r3, [r3, #9]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d157      	bne.n	800152e <SPI_Check_Configs+0xe2>
				{
					if ((SPI_Configs->Chip_Mode == CHIP_MODE_MASTER)||(SPI_Configs->Chip_Mode == CHIP_MODE_SLAVE))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	79db      	ldrb	r3, [r3, #7]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d003      	beq.n	800148e <SPI_Check_Configs+0x42>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	79db      	ldrb	r3, [r3, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d14b      	bne.n	8001526 <SPI_Check_Configs+0xda>
					{
						if ((SPI_Configs->Clock_Phase == CLOCK_PHASE_CAPTURE_SECOND)||(SPI_Configs->Clock_Phase == CLOCK_PHASE_CAPTURE_FIRST))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	78db      	ldrb	r3, [r3, #3]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d003      	beq.n	800149e <SPI_Check_Configs+0x52>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d13f      	bne.n	800151e <SPI_Check_Configs+0xd2>
						{
							if ((SPI_Configs->Clock_Polarity == CLOCK_POLARITY_IDLE_LOW)||(SPI_Configs->Clock_Polarity == CLOCK_POLARITY_IDLE_HIGH))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	789b      	ldrb	r3, [r3, #2]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <SPI_Check_Configs+0x62>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d133      	bne.n	8001516 <SPI_Check_Configs+0xca>
							{
								if ((SPI_Configs->Frame_Size == DATA_FRAME_SIZE_16BITS)||(SPI_Configs->Frame_Size == DATA_FRAME_SIZE_8BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	799b      	ldrb	r3, [r3, #6]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d003      	beq.n	80014be <SPI_Check_Configs+0x72>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	799b      	ldrb	r3, [r3, #6]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d127      	bne.n	800150e <SPI_Check_Configs+0xc2>
								{
									if ((SPI_Configs->Frame_Type== FRAME_FORMAT_MSB_FIRST)||(SPI_Configs->Frame_Type == FRAME_FORMAT_LSB_FIRST))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	795b      	ldrb	r3, [r3, #5]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <SPI_Check_Configs+0x82>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d11b      	bne.n	8001506 <SPI_Check_Configs+0xba>
									{
										if ((SPI_Configs->Slave_Manage_State >= SLAVE_MANAGE_HW)&&(SPI_Configs->Slave_Manage_State <= SLAVE_MANAGE_SW_SLAVE_INACTIVE))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7a1b      	ldrb	r3, [r3, #8]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d814      	bhi.n	8001500 <SPI_Check_Configs+0xb4>
										{
											if ((SPI_Configs->Transfer_Mode >= TRANSFER_MODE_FULL_DUPLEX)&&(SPI_Configs->Transfer_Mode <= TRANSFER_MODE_SIMPLEX))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d80d      	bhi.n	80014fa <SPI_Check_Configs+0xae>
											{
												if ((SPI_Configs->MultiMaster_State == MULTIMASTER_NOT_PROVIDED)||(SPI_Configs->MultiMaster_State == MULTIMASTER_PROVIDED))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7a9b      	ldrb	r3, [r3, #10]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d003      	beq.n	80014ee <SPI_Check_Configs+0xa2>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7a9b      	ldrb	r3, [r3, #10]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <SPI_Check_Configs+0xa8>
												{
													Error_State = OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
										if ((SPI_Configs->Slave_Manage_State >= SLAVE_MANAGE_HW)&&(SPI_Configs->Slave_Manage_State <= SLAVE_MANAGE_SW_SLAVE_INACTIVE))
 80014f2:	e00b      	b.n	800150c <SPI_Check_Configs+0xc0>
												}
												else {
													Error_State =  NOK;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
										if ((SPI_Configs->Slave_Manage_State >= SLAVE_MANAGE_HW)&&(SPI_Configs->Slave_Manage_State <= SLAVE_MANAGE_SW_SLAVE_INACTIVE))
 80014f8:	e008      	b.n	800150c <SPI_Check_Configs+0xc0>
												}
											}
											else {
												Error_State = NOK ;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
										if ((SPI_Configs->Slave_Manage_State >= SLAVE_MANAGE_HW)&&(SPI_Configs->Slave_Manage_State <= SLAVE_MANAGE_SW_SLAVE_INACTIVE))
 80014fe:	e005      	b.n	800150c <SPI_Check_Configs+0xc0>
											}
										}
										else {
											Error_State = NOK;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
										if ((SPI_Configs->Slave_Manage_State >= SLAVE_MANAGE_HW)&&(SPI_Configs->Slave_Manage_State <= SLAVE_MANAGE_SW_SLAVE_INACTIVE))
 8001504:	e002      	b.n	800150c <SPI_Check_Configs+0xc0>
										}
									}
									else{
										Error_State = NOK;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
									if ((SPI_Configs->Frame_Type== FRAME_FORMAT_MSB_FIRST)||(SPI_Configs->Frame_Type == FRAME_FORMAT_LSB_FIRST))
 800150a:	e003      	b.n	8001514 <SPI_Check_Configs+0xc8>
 800150c:	e002      	b.n	8001514 <SPI_Check_Configs+0xc8>
									}
								}
								else{
									Error_State = NOK;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
								if ((SPI_Configs->Frame_Size == DATA_FRAME_SIZE_16BITS)||(SPI_Configs->Frame_Size == DATA_FRAME_SIZE_8BITS))
 8001512:	e003      	b.n	800151c <SPI_Check_Configs+0xd0>
 8001514:	e002      	b.n	800151c <SPI_Check_Configs+0xd0>
								}
							}
							else{
								Error_State = NOK;
 8001516:	2301      	movs	r3, #1
 8001518:	73fb      	strb	r3, [r7, #15]
							if ((SPI_Configs->Clock_Polarity == CLOCK_POLARITY_IDLE_LOW)||(SPI_Configs->Clock_Polarity == CLOCK_POLARITY_IDLE_HIGH))
 800151a:	e003      	b.n	8001524 <SPI_Check_Configs+0xd8>
 800151c:	e002      	b.n	8001524 <SPI_Check_Configs+0xd8>
							}
						}
						else {
							Error_State = NOK;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
						if ((SPI_Configs->Clock_Phase == CLOCK_PHASE_CAPTURE_SECOND)||(SPI_Configs->Clock_Phase == CLOCK_PHASE_CAPTURE_FIRST))
 8001522:	e003      	b.n	800152c <SPI_Check_Configs+0xe0>
 8001524:	e002      	b.n	800152c <SPI_Check_Configs+0xe0>
						}
					}
					else{
						Error_State = NOK;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
					if ((SPI_Configs->Chip_Mode == CHIP_MODE_MASTER)||(SPI_Configs->Chip_Mode == CHIP_MODE_SLAVE))
 800152a:	e00b      	b.n	8001544 <SPI_Check_Configs+0xf8>
 800152c:	e00a      	b.n	8001544 <SPI_Check_Configs+0xf8>
					}
				}
				else {
					Error_State = NOK;
 800152e:	2301      	movs	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e007      	b.n	8001544 <SPI_Check_Configs+0xf8>
				}
			}
			else {
				Error_State = NOK;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e004      	b.n	8001544 <SPI_Check_Configs+0xf8>
			}
		}
		else {
			Error_State = NOK;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e001      	b.n	8001544 <SPI_Check_Configs+0xf8>
		}
	}
	else {
		Error_State = NULL_PTR_ERR;
 8001540:	2302      	movs	r3, #2
 8001542:	73fb      	strb	r3, [r7, #15]
	}
	return Error_State ;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <SPI_IRQ_Source_HANDLE>:
 * @brief			:	Private Function To handle the Different Sources of the IRQ
 * @param			:	SPI_Num, The Enabled SPI Number
 * @retval			:	Error State
 */
static void SPI_IRQ_Source_HANDLE(SPI_SPI_NUMBER_t SPI_Num)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]

	if (IRQ_Source[SPI_Num] == SOURCE_TX)
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4a60      	ldr	r2, [pc, #384]	; (80016e0 <SPI_IRQ_Source_HANDLE+0x190>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d135      	bne.n	80015d0 <SPI_IRQ_Source_HANDLE+0x80>
	{
		static uint16_t Counter=1;
		/*Complete buffer Transmission is done*/
		if (Counter == Global_Data_Size)
 8001564:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <SPI_IRQ_Source_HANDLE+0x194>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <SPI_IRQ_Source_HANDLE+0x198>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d11d      	bne.n	80015ae <SPI_IRQ_Source_HANDLE+0x5e>
		{
			/*Disable the TC interrupt*/
			SPIs[SPI_Num]->SPI_CR2 &= ~(1<<(SPI_INTERRUPT_TXEIE));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	4a5d      	ldr	r2, [pc, #372]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	495b      	ldr	r1, [pc, #364]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 8001580:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001588:	605a      	str	r2, [r3, #4]

			/*Clear IRQ Source*/
			IRQ_Source[SPI_Num] = NO_SRC;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4a54      	ldr	r2, [pc, #336]	; (80016e0 <SPI_IRQ_Source_HANDLE+0x190>)
 800158e:	2100      	movs	r1, #0
 8001590:	54d1      	strb	r1, [r2, r3]

			/*Call The call Back Function*/
			SPI_pf_CallBackFuncs[SPI_Num][SPI_FLAGS_TXE]();
 8001592:	79fa      	ldrb	r2, [r7, #7]
 8001594:	4956      	ldr	r1, [pc, #344]	; (80016f0 <SPI_IRQ_Source_HANDLE+0x1a0>)
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	3304      	adds	r3, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4798      	blx	r3

			Counter=1;
 80015a6:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <SPI_IRQ_Source_HANDLE+0x198>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	801a      	strh	r2, [r3, #0]

			/*Receive the next data element*/
			Global_Received_Data[Counter++] = SPIs[SPI_Num]->SPI_DR;
		}
	}
}
 80015ac:	e093      	b.n	80016d6 <SPI_IRQ_Source_HANDLE+0x186>
			SPIs[SPI_Num]->SPI_DR = Global_Data_Buffer[Counter++];
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <SPI_IRQ_Source_HANDLE+0x1a4>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <SPI_IRQ_Source_HANDLE+0x198>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	1c59      	adds	r1, r3, #1
 80015b8:	b288      	uxth	r0, r1
 80015ba:	494b      	ldr	r1, [pc, #300]	; (80016e8 <SPI_IRQ_Source_HANDLE+0x198>)
 80015bc:	8008      	strh	r0, [r1, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	7819      	ldrb	r1, [r3, #0]
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4a49      	ldr	r2, [pc, #292]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	460a      	mov	r2, r1
 80015cc:	60da      	str	r2, [r3, #12]
}
 80015ce:	e082      	b.n	80016d6 <SPI_IRQ_Source_HANDLE+0x186>
	else if (IRQ_Source[SPI_Num] == SOURCE_RX_SLAVE)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4a43      	ldr	r2, [pc, #268]	; (80016e0 <SPI_IRQ_Source_HANDLE+0x190>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d141      	bne.n	800165e <SPI_IRQ_Source_HANDLE+0x10e>
		if (Counter == Global_Data_Size-1)
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <SPI_IRQ_Source_HANDLE+0x1a8>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <SPI_IRQ_Source_HANDLE+0x194>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d128      	bne.n	800163c <SPI_IRQ_Source_HANDLE+0xec>
			Global_Received_Data[Counter] = SPIs[SPI_Num]->SPI_DR;
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	68d9      	ldr	r1, [r3, #12]
 80015f4:	4b41      	ldr	r3, [pc, #260]	; (80016fc <SPI_IRQ_Source_HANDLE+0x1ac>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a3f      	ldr	r2, [pc, #252]	; (80016f8 <SPI_IRQ_Source_HANDLE+0x1a8>)
 80015fa:	8812      	ldrh	r2, [r2, #0]
 80015fc:	4413      	add	r3, r2
 80015fe:	b2ca      	uxtb	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
			SPIs[SPI_Num]->SPI_CR2 &= ~(1<<(SPI_INTERRUPT_RXNEIE));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4a39      	ldr	r2, [pc, #228]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4937      	ldr	r1, [pc, #220]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 8001610:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001618:	605a      	str	r2, [r3, #4]
			IRQ_Source[SPI_Num] = NO_SRC;
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <SPI_IRQ_Source_HANDLE+0x190>)
 800161e:	2100      	movs	r1, #0
 8001620:	54d1      	strb	r1, [r2, r3]
			SPI_pf_CallBackFuncs[SPI_Num][SPI_FLAGS_RXNE]();
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	4932      	ldr	r1, [pc, #200]	; (80016f0 <SPI_IRQ_Source_HANDLE+0x1a0>)
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4798      	blx	r3
			Counter=0;
 8001634:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <SPI_IRQ_Source_HANDLE+0x1a8>)
 8001636:	2200      	movs	r2, #0
 8001638:	801a      	strh	r2, [r3, #0]
}
 800163a:	e04c      	b.n	80016d6 <SPI_IRQ_Source_HANDLE+0x186>
			Global_Received_Data[Counter++] = SPIs[SPI_Num]->SPI_DR;
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4a2b      	ldr	r2, [pc, #172]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 8001640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001644:	68d8      	ldr	r0, [r3, #12]
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <SPI_IRQ_Source_HANDLE+0x1ac>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <SPI_IRQ_Source_HANDLE+0x1a8>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	b28c      	uxth	r4, r1
 8001652:	4929      	ldr	r1, [pc, #164]	; (80016f8 <SPI_IRQ_Source_HANDLE+0x1a8>)
 8001654:	800c      	strh	r4, [r1, #0]
 8001656:	4413      	add	r3, r2
 8001658:	b2c2      	uxtb	r2, r0
 800165a:	701a      	strb	r2, [r3, #0]
}
 800165c:	e03b      	b.n	80016d6 <SPI_IRQ_Source_HANDLE+0x186>
	else if (IRQ_Source[SPI_Num] == SOURCE_RX_MASTER)
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <SPI_IRQ_Source_HANDLE+0x190>)
 8001662:	5cd3      	ldrb	r3, [r2, r3]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d136      	bne.n	80016d6 <SPI_IRQ_Source_HANDLE+0x186>
		if (Counter == Global_Data_Size)
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <SPI_IRQ_Source_HANDLE+0x194>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <SPI_IRQ_Source_HANDLE+0x1b0>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d119      	bne.n	80016aa <SPI_IRQ_Source_HANDLE+0x15a>
			SPIs[SPI_Num]->SPI_CR2 &= ~(1<<(SPI_INTERRUPT_RXNEIE));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	491a      	ldr	r1, [pc, #104]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 8001684:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800168c:	605a      	str	r2, [r3, #4]
			IRQ_Source[SPI_Num] = NO_SRC;
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <SPI_IRQ_Source_HANDLE+0x190>)
 8001692:	2100      	movs	r1, #0
 8001694:	54d1      	strb	r1, [r2, r3]
			SPI_pf_CallBackFuncs[SPI_Num][SPI_FLAGS_RXNE]();
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	4915      	ldr	r1, [pc, #84]	; (80016f0 <SPI_IRQ_Source_HANDLE+0x1a0>)
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4798      	blx	r3
}
 80016a8:	e015      	b.n	80016d6 <SPI_IRQ_Source_HANDLE+0x186>
			SPIs[SPI_Num]->SPI_DR = GARBAGE_VALUE;
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
			Global_Received_Data[Counter++] = SPIs[SPI_Num]->SPI_DR;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <SPI_IRQ_Source_HANDLE+0x19c>)
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	68d8      	ldr	r0, [r3, #12]
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <SPI_IRQ_Source_HANDLE+0x1ac>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <SPI_IRQ_Source_HANDLE+0x1b0>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	1c59      	adds	r1, r3, #1
 80016ca:	b28c      	uxth	r4, r1
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <SPI_IRQ_Source_HANDLE+0x1b0>)
 80016ce:	800c      	strh	r4, [r1, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	b2c2      	uxtb	r2, r0
 80016d4:	701a      	strb	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	bf00      	nop
 80016e0:	200000a8 	.word	0x200000a8
 80016e4:	200000d0 	.word	0x200000d0
 80016e8:	20000024 	.word	0x20000024
 80016ec:	20000018 	.word	0x20000018
 80016f0:	200000ac 	.word	0x200000ac
 80016f4:	200000d4 	.word	0x200000d4
 80016f8:	200000dc 	.word	0x200000dc
 80016fc:	200000d8 	.word	0x200000d8
 8001700:	200000de 	.word	0x200000de

08001704 <SPI1_IRQHandler>:


/********************* IRQ HANDLERS ********************/

void SPI1_IRQHandler (void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	SPI_IRQ_Source_HANDLE(SPI_NUMBER1);
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff ff21 	bl	8001550 <SPI_IRQ_Source_HANDLE>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}

08001712 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0
	SPI_IRQ_Source_HANDLE(SPI_NUMBER2);
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff ff1a 	bl	8001550 <SPI_IRQ_Source_HANDLE>
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <SYSTIC_delay_ms>:
#include "ErrType.h"
#include "BIT_MATH.h"


uint8_t SYSTIC_delay_ms(uint32_t time)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    uint8_t Local_u8ErrorState = OK ;
 8001728:	2300      	movs	r3, #0
 800172a:	72fb      	strb	r3, [r7, #11]
    uint32_t Local_u32Value =(time * 1000 *AHB_CLOCK /8);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	08db      	lsrs	r3, r3, #3
 8001738:	60fb      	str	r3, [r7, #12]
    /*check if the value > the register available bits*/
    if(Local_u32Value > 0xffffff)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d302      	bcc.n	8001748 <SYSTIC_delay_ms+0x28>
    {
    	Local_u32Value = 0xffffff ;
 8001742:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001746:	60fb      	str	r3, [r7, #12]
    }
    /*Select the SYSTIC CLOCK to the processor clock source AHB /8 */
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_CLKSOURCE);
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 800174e:	f023 0304 	bic.w	r3, r3, #4
 8001752:	6013      	str	r3, [r2, #0]
    /*Reset the count flag*/
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_COUNTFLAG);
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
    /* Clear the value in the SysTick reload value register */
    SYSTIC->STK_LOAD &= 0b11111111<<24;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 8001766:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800176a:	6053      	str	r3, [r2, #4]
    /*set the value in the SysTick reload value register */
    SYSTIC->STK_LOAD |=Local_u32Value;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4911      	ldr	r1, [pc, #68]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
    /* Clear the VAL Register to load the start of the down counter from the LOAD register */
    SYSTIC->STK_VAL &=0b11111111<<24;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 800177e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001782:	6093      	str	r3, [r2, #8]
    /*Enable SysTick*/
    SET_BIT(SYSTIC->STK_CTRL,STK_CTRL_ENABLE);
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6013      	str	r3, [r2, #0]
    /*Waiting flag */
    while((GET_BIT(SYSTIC->STK_CTRL,STK_CTRL_COUNTFLAG))==0)
 8001790:	bf00      	nop
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f9      	beq.n	8001792 <SYSTIC_delay_ms+0x72>
    {
    	/*Code*/
    }

    /*disable SysTick*/
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_ENABLE);
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <SYSTIC_delay_ms+0x98>)
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	6013      	str	r3, [r2, #0]

    return Local_u8ErrorState;
 80017aa:	7afb      	ldrb	r3, [r7, #11]

}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <main>:

volatile RECEIVING_VAL_t RECEIVING_VALUE = NO_RECEIVE;


int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0

	RCC_Clock_Init();
 80017c2:	f7fe fd13 	bl	80001ec <RCC_Clock_Init>
	Pins_Init();
 80017c6:	f7fe fd25 	bl	8000214 <Pins_Init>
	CLCD_voidPinInit();
 80017ca:	f7fe fecb 	bl	8000564 <CLCD_voidPinInit>
	CLCD_voidInit();
 80017ce:	f7fe ffaa 	bl	8000726 <CLCD_voidInit>
	SPI1_Init();
 80017d2:	f7fe fd5b 	bl	800028c <SPI1_Init>
	EXTI13_Init();
 80017d6:	f7fe fd67 	bl	80002a8 <EXTI13_Init>
	Interrupts_Init();
 80017da:	f7fe fd7d 	bl	80002d8 <Interrupts_Init>
	Receive_withInterrupt();
 80017de:	f7fe fe75 	bl	80004cc <Receive_withInterrupt>

uint16_t TestArr[15];
SPI_Receive(SPICONFIG, TestArr, 7);
 80017e2:	4b27      	ldr	r3, [pc, #156]	; (8001880 <main+0xc4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4639      	mov	r1, r7
 80017e8:	2207      	movs	r2, #7
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fd36 	bl	800125c <SPI_Receive>

for(uint8_t count=0 ;count<15 ;count++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	77fb      	strb	r3, [r7, #31]
 80017f4:	e00b      	b.n	800180e <main+0x52>
{
	CLCD_voidSendNumber(TestArr[count]);
 80017f6:	7ffb      	ldrb	r3, [r7, #31]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	3320      	adds	r3, #32
 80017fc:	443b      	add	r3, r7
 80017fe:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe ffd0 	bl	80007a8 <CLCD_voidSendNumber>
for(uint8_t count=0 ;count<15 ;count++)
 8001808:	7ffb      	ldrb	r3, [r7, #31]
 800180a:	3301      	adds	r3, #1
 800180c:	77fb      	strb	r3, [r7, #31]
 800180e:	7ffb      	ldrb	r3, [r7, #31]
 8001810:	2b0e      	cmp	r3, #14
 8001812:	d9f0      	bls.n	80017f6 <main+0x3a>
}
    /* Loop forever */
	for(;;)
	{
		while(!RECEIVING_VALUE);
 8001814:	bf00      	nop
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <main+0xc8>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0fa      	beq.n	8001816 <main+0x5a>
		switch (RECEIVING_VALUE)
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <main+0xc8>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	3b01      	subs	r3, #1
 8001828:	2b03      	cmp	r3, #3
 800182a:	d826      	bhi.n	800187a <main+0xbe>
 800182c:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <main+0x78>)
 800182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	08001845 	.word	0x08001845
 8001838:	0800186d 	.word	0x0800186d
 800183c:	0800184f 	.word	0x0800184f
 8001840:	0800185f 	.word	0x0800185f
		{
			case RED_LED_RECEIVED:
				TURN_ON_LED();
 8001844:	f7fe fe3a 	bl	80004bc <TURN_ON_LED>
				CLEAR_DISPLAY();
 8001848:	f7fe fe52 	bl	80004f0 <CLEAR_DISPLAY>
				while(1);
 800184c:	e7fe      	b.n	800184c <main+0x90>

				break;
			case ALARM_RECEIVED :
				DisplayAlarmInfo();
 800184e:	f7fe fd51 	bl	80002f4 <DisplayAlarmInfo>
				BZR_Off();
 8001852:	f7fe fe7e 	bl	8000552 <BZR_Off>

				RECEIVING_VALUE= NO_RECEIVE;
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <main+0xc8>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
				break;
 800185c:	e00e      	b.n	800187c <main+0xc0>

			case DISPLAY_RECEIVED :
				Display_Date();
 800185e:	f7fe fdbf 	bl	80003e0 <Display_Date>
				/*Count_Time();*/
				_delay_1s();
 8001862:	f7fe fe4b 	bl	80004fc <_delay_1s>
				Display_Time();
 8001866:	f7fe fd89 	bl	800037c <Display_Time>

				break ;
 800186a:	e007      	b.n	800187c <main+0xc0>

			case GREEN_LED_RECEIVED :

					LED_On(PORTC, PIN15) ;
 800186c:	210f      	movs	r1, #15
 800186e:	2002      	movs	r0, #2
 8001870:	f7ff fae9 	bl	8000e46 <LED_On>

					RECEIVING_VALUE =NO_RECEIVE ;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <main+0xc8>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
			default:
				break;
 800187a:	bf00      	nop
		while(!RECEIVING_VALUE);
 800187c:	e7ca      	b.n	8001814 <main+0x58>
 800187e:	bf00      	nop
 8001880:	20000044 	.word	0x20000044
 8001884:	200000e0 	.word	0x200000e0

08001888 <SPI1_CallBack>:
	}
}


void SPI1_CallBack(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

    if(RecivedData[0]== RED_LED_CODE)
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <SPI1_CallBack+0x4c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d103      	bne.n	800189c <SPI1_CallBack+0x14>
    {
    	RECEIVING_VALUE=RED_LED_RECEIVED ;
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <SPI1_CallBack+0x50>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	e016      	b.n	80018ca <SPI1_CallBack+0x42>
    }
    else if(RecivedData[0]== ALARMCODE)
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <SPI1_CallBack+0x4c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d103      	bne.n	80018ac <SPI1_CallBack+0x24>
    {
    	RECEIVING_VALUE=ALARM_RECEIVED ;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <SPI1_CallBack+0x50>)
 80018a6:	2203      	movs	r2, #3
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e00e      	b.n	80018ca <SPI1_CallBack+0x42>
    }
    else if(RecivedData[0]== DISPLAY_CODE)
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <SPI1_CallBack+0x4c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d103      	bne.n	80018bc <SPI1_CallBack+0x34>
    {
    	RECEIVING_VALUE=DISPLAY_RECEIVED ;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <SPI1_CallBack+0x50>)
 80018b6:	2204      	movs	r2, #4
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	e006      	b.n	80018ca <SPI1_CallBack+0x42>
    }
    else if(RecivedData[0]== GREEN_LED_CODE)
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <SPI1_CallBack+0x4c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d102      	bne.n	80018ca <SPI1_CallBack+0x42>
    {
    	RECEIVING_VALUE=GREEN_LED_RECEIVED ;
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SPI1_CallBack+0x50>)
 80018c6:	2202      	movs	r2, #2
 80018c8:	701a      	strb	r2, [r3, #0]
    }

    Receive_withInterrupt();
 80018ca:	f7fe fdff 	bl	80004cc <Receive_withInterrupt>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000048 	.word	0x20000048
 80018d8:	200000e0 	.word	0x200000e0

080018dc <EXTI13_ISR>:

void EXTI13_ISR()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	BZR_On();
 80018e0:	f7fe fe2e 	bl	8000540 <BZR_On>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <LoopForever+0x6>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	; (8001928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <LoopForever+0xe>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	; (8001934 <LoopForever+0x16>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001916:	f000 f811 	bl	800193c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800191a:	f7ff ff4f 	bl	80017bc <main>

0800191e <LoopForever>:

LoopForever:
  b LoopForever
 800191e:	e7fe      	b.n	800191e <LoopForever>
  ldr   r0, =_estack
 8001920:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800192c:	080019e8 	.word	0x080019e8
  ldr r2, =_sbss
 8001930:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001934:	200000e4 	.word	0x200000e4

08001938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC1_2_IRQHandler>
	...

0800193c <__libc_init_array>:
 800193c:	b570      	push	{r4, r5, r6, lr}
 800193e:	2600      	movs	r6, #0
 8001940:	4d0c      	ldr	r5, [pc, #48]	; (8001974 <__libc_init_array+0x38>)
 8001942:	4c0d      	ldr	r4, [pc, #52]	; (8001978 <__libc_init_array+0x3c>)
 8001944:	1b64      	subs	r4, r4, r5
 8001946:	10a4      	asrs	r4, r4, #2
 8001948:	42a6      	cmp	r6, r4
 800194a:	d109      	bne.n	8001960 <__libc_init_array+0x24>
 800194c:	f000 f81a 	bl	8001984 <_init>
 8001950:	2600      	movs	r6, #0
 8001952:	4d0a      	ldr	r5, [pc, #40]	; (800197c <__libc_init_array+0x40>)
 8001954:	4c0a      	ldr	r4, [pc, #40]	; (8001980 <__libc_init_array+0x44>)
 8001956:	1b64      	subs	r4, r4, r5
 8001958:	10a4      	asrs	r4, r4, #2
 800195a:	42a6      	cmp	r6, r4
 800195c:	d105      	bne.n	800196a <__libc_init_array+0x2e>
 800195e:	bd70      	pop	{r4, r5, r6, pc}
 8001960:	f855 3b04 	ldr.w	r3, [r5], #4
 8001964:	4798      	blx	r3
 8001966:	3601      	adds	r6, #1
 8001968:	e7ee      	b.n	8001948 <__libc_init_array+0xc>
 800196a:	f855 3b04 	ldr.w	r3, [r5], #4
 800196e:	4798      	blx	r3
 8001970:	3601      	adds	r6, #1
 8001972:	e7f2      	b.n	800195a <__libc_init_array+0x1e>
 8001974:	080019e0 	.word	0x080019e0
 8001978:	080019e0 	.word	0x080019e0
 800197c:	080019e0 	.word	0x080019e0
 8001980:	080019e4 	.word	0x080019e4

08001984 <_init>:
 8001984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001986:	bf00      	nop
 8001988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800198a:	bc08      	pop	{r3}
 800198c:	469e      	mov	lr, r3
 800198e:	4770      	bx	lr

08001990 <_fini>:
 8001990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001992:	bf00      	nop
 8001994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001996:	bc08      	pop	{r3}
 8001998:	469e      	mov	lr, r3
 800199a:	4770      	bx	lr
