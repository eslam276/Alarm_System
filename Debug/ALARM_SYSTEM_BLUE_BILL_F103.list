
ALARM_SYSTEM_BLUE_BILL_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c48  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001d78  08001d78  00011d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dd4  08001dd4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001dd4  08001dd4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dd4  08001dd4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dd4  08001dd4  00011dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dd8  08001dd8  00011dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000020  08001dfc  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08001dfc  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c31  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f27  00000000  00000000  00023cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000400  00000000  00000000  00024be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002e1  00000000  00000000  00024fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b08  00000000  00000000  000252c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000496a  00000000  00000000  00026dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006681  00000000  00000000  0002b73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d8c  00000000  00000000  00031dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00032b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08001d60 	.word	0x08001d60

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08001d60 	.word	0x08001d60

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <AFIO_U8SetEXTIPort>:
 * @param : EXTI_Line -> Options of All Available EXTI Lines
 * @param : GPIO_Port -> Options of All Available Ports
 * @return: ErrorStatus to Indicate if function Worked Correctly or NOT
 */
uint8_t AFIO_U8SetEXTIPort( AFIO_EXTI_Line EXTI_Line, AFIO_Port_t GPIO_Port)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]
	uint8_t Error_State = OK;
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]

	if ( (EXTI_Line < Max_EXTI_Line) && (GPIO_Port < Max_GPIO_Port) )
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b0f      	cmp	r3, #15
 8000684:	d826      	bhi.n	80006d4 <AFIO_U8SetEXTIPort+0x68>
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	2b07      	cmp	r3, #7
 800068a:	d823      	bhi.n	80006d4 <AFIO_U8SetEXTIPort+0x68>
	{
		uint8_t REG_Number = EXTI_Line /4 ;
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	089b      	lsrs	r3, r3, #2
 8000690:	73bb      	strb	r3, [r7, #14]

		uint8_t Bits_Number = (EXTI_Line %4 ) *4 ;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 0303 	and.w	r3, r3, #3
 8000698:	b2db      	uxtb	r3, r3
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	737b      	strb	r3, [r7, #13]

		/*Clear the Required 4 Bits*/
		AFIO->EXTICR[REG_Number] &=(~(0b1111 << Bits_Number));
 800069e:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <AFIO_U8SetEXTIPort+0x78>)
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
 80006a2:	3302      	adds	r3, #2
 80006a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a8:	7b7b      	ldrb	r3, [r7, #13]
 80006aa:	210f      	movs	r1, #15
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	43db      	mvns	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	490b      	ldr	r1, [pc, #44]	; (80006e4 <AFIO_U8SetEXTIPort+0x78>)
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	4002      	ands	r2, r0
 80006ba:	3302      	adds	r3, #2
 80006bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		AFIO->EXTICR[REG_Number]= ( GPIO_Port << Bits_Number ) ;
 80006c0:	79ba      	ldrb	r2, [r7, #6]
 80006c2:	7b7b      	ldrb	r3, [r7, #13]
 80006c4:	fa02 f103 	lsl.w	r1, r2, r3
 80006c8:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <AFIO_U8SetEXTIPort+0x78>)
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
 80006cc:	3302      	adds	r3, #2
 80006ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	{
 80006d2:	e001      	b.n	80006d8 <AFIO_U8SetEXTIPort+0x6c>
	}
	else
	{
		Error_State = NOK;
 80006d4:	2301      	movs	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
	}
	return Error_State;
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	40010000 	.word	0x40010000

080006e8 <RCC_Clock_Init>:
/* Global Pointer to SPI_CONFIGS_t Struct */

uint8_t RecivedData[30] ={0};

void RCC_Clock_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	RCC_SetClkSts(CLK_SRC_HSE,RCC_ON);
 80006ec:	2100      	movs	r1, #0
 80006ee:	2001      	movs	r0, #1
 80006f0:	f000 fe4c 	bl	800138c <RCC_SetClkSts>
	RCC_SetSysClk(CLK_SRC_HSE);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 fee1 	bl	80014bc <RCC_SetSysClk>
    RCC_APB2EnableClock(APB2_IOPA);
 80006fa:	2002      	movs	r0, #2
 80006fc:	f000 ff38 	bl	8001570 <RCC_APB2EnableClock>
    RCC_APB2EnableClock(APB2_IOPB);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 ff35 	bl	8001570 <RCC_APB2EnableClock>
	RCC_APB2EnableClock(APB2_IOPC);
 8000706:	2004      	movs	r0, #4
 8000708:	f000 ff32 	bl	8001570 <RCC_APB2EnableClock>
/*	RCC_APB2EnableClock(APB2_SPI1);*/
	RCC_APB2EnableClock(APB2_AFIO);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 ff2f 	bl	8001570 <RCC_APB2EnableClock>
	RCC_APB1EnableClock(APB1_USART2);
 8000712:	2011      	movs	r0, #17
 8000714:	f000 ff16 	bl	8001544 <RCC_APB1EnableClock>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <Pins_Init>:
void Pins_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
	/* RED LED1 Configuration*/
	LED_Init(PORTA ,PIN2);
 8000722:	2102      	movs	r1, #2
 8000724:	2000      	movs	r0, #0
 8000726:	f000 fdd9 	bl	80012dc <LED_Init>
	/* GREEN LED Configuration*/
	LED_Init(PORTC ,PIN15);
 800072a:	210f      	movs	r1, #15
 800072c:	2002      	movs	r0, #2
 800072e:	f000 fdd5 	bl	80012dc <LED_Init>
	/*BUZZER Configuration*/
	BZR_Init();
 8000732:	f000 f951 	bl	80009d8 <BZR_Init>

	/* Initialize the EXTI Pin */
	GPIO_PinConfig_t EXTI_PC1 = {.Port = PORTC, .PinNum = PIN13, .Mode = INPUT,  .Input = PULLUP_PULLDOWN};
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	711a      	strb	r2, [r3, #4]
 8000740:	2302      	movs	r3, #2
 8000742:	743b      	strb	r3, [r7, #16]
 8000744:	230d      	movs	r3, #13
 8000746:	747b      	strb	r3, [r7, #17]
 8000748:	2302      	movs	r3, #2
 800074a:	74fb      	strb	r3, [r7, #19]

	/* Initialize the EXTI Pin */
	GPIO_u8PinInit(&EXTI_PC1);
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fcc3 	bl	80010dc <GPIO_u8PinInit>
    /*USART PINS Configuration*/
	GPIO_PinConfig_t Local_TxConfig={
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <Pins_Init+0x74>)
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000760:	6018      	str	r0, [r3, #0]
 8000762:	3304      	adds	r3, #4
 8000764:	7019      	strb	r1, [r3, #0]
				.PinNum = PIN2,
				.Mode = OUTPUT_SPEED_10MHz,
				.Output = AF_PUSH_PULL,
				.Input = FLOATING
		};
	GPIO_u8PinInit(&Local_TxConfig);
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fcb6 	bl	80010dc <GPIO_u8PinInit>
	GPIO_PinConfig_t Local_RxConfig={
 8000770:	4a08      	ldr	r2, [pc, #32]	; (8000794 <Pins_Init+0x78>)
 8000772:	463b      	mov	r3, r7
 8000774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000778:	6018      	str	r0, [r3, #0]
 800077a:	3304      	adds	r3, #4
 800077c:	7019      	strb	r1, [r3, #0]
				.PinNum = PIN3,
				.Mode = INPUT,
				.Output = AF_PUSH_PULL,
				.Input = FLOATING
		};
	GPIO_u8PinInit(&Local_RxConfig);
 800077e:	463b      	mov	r3, r7
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fcab 	bl	80010dc <GPIO_u8PinInit>
	GPIO_u8PinInit(&SCK);
	GPIO_PinConfig_t MISO ={ PORTA , PIN6 , OUTPUT_SPEED_2MHz , AF_PUSH_PULL , PULLUP_PULLDOWN  };
	GPIO_u8PinInit(&MISO);
	GPIO_PinConfig_t MOSI ={ PORTA , PIN7 , INPUT , FLOATING , PULLUP_PULLDOWN  };
	GPIO_u8PinInit(&MOSI);*/
}
 8000786:	bf00      	nop
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	08001d78 	.word	0x08001d78
 8000794:	08001d80 	.word	0x08001d80

08000798 <EXTI13_Init>:

		/* Initialize SPI1 Configuration Struct Globally */
	/*	SPICONFIG = &SPI1_Config;*/
}
void EXTI13_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	/* Initialize the EXTI Configuration */
	EXTI_Confg PC1_EXTIConfig = {.LINE = EXTI13, .Mode = Enable, .Trigger = RaisingEdge, .EXTI_CallBackFunc = &EXTI13_ISR};
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <EXTI13_Init+0x2c>)
 80007a0:	463b      	mov	r3, r7
 80007a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a6:	e883 0003 	stmia.w	r3, {r0, r1}

	/* Initialize the EXTI */
	EXTI_Init(&PC1_EXTIConfig);
 80007aa:	463b      	mov	r3, r7
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fae1 	bl	8000d74 <EXTI_Init>

	/* Initialize the AFIO For EXTI13 */
	AFIO_U8SetEXTIPort(AFIO_EXTI13, AFIO_PortC);
 80007b2:	2102      	movs	r1, #2
 80007b4:	200d      	movs	r0, #13
 80007b6:	f7ff ff59 	bl	800066c <AFIO_U8SetEXTIPort>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	08001d88 	.word	0x08001d88

080007c8 <Interrupts_Init>:
void Interrupts_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(NVIC_IRQ_SPI1);
 80007cc:	2023      	movs	r0, #35	; 0x23
 80007ce:	f000 fdb3 	bl	8001338 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(NVIC_IRQ_EXTI15_10);
 80007d2:	2028      	movs	r0, #40	; 0x28
 80007d4:	f000 fdb0 	bl	8001338 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(NVIC_IRQ_USART1);
 80007d8:	2025      	movs	r0, #37	; 0x25
 80007da:	f000 fdad 	bl	8001338 <NVIC_EnableIRQ>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <DisplayAlarmInfo>:
void DisplayAlarmInfo(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	CLCD_voidSendCmd(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 f9c9 	bl	8000b82 <CLCD_voidSendCmd>

	uint8_t counter=0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	71fb      	strb	r3, [r7, #7]
	for(counter=1 ; RecivedData[counter] != 13 ;counter++)
 80007f4:	2301      	movs	r3, #1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	e01b      	b.n	8000832 <DisplayAlarmInfo+0x4e>
	{
		if(counter == 1)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d10f      	bne.n	8000820 <DisplayAlarmInfo+0x3c>
		{
			CLCD_u8SendString("Alarm Number=");
 8000800:	4818      	ldr	r0, [pc, #96]	; (8000864 <DisplayAlarmInfo+0x80>)
 8000802:	f000 fa12 	bl	8000c2a <CLCD_u8SendString>
			CLCD_voidSendData(RecivedData[counter] + 48);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4a17      	ldr	r2, [pc, #92]	; (8000868 <DisplayAlarmInfo+0x84>)
 800080a:	5cd3      	ldrb	r3, [r2, r3]
 800080c:	3330      	adds	r3, #48	; 0x30
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f9d2 	bl	8000bba <CLCD_voidSendData>
			CLCD_voidGoToXY(1, 0);
 8000816:	2100      	movs	r1, #0
 8000818:	2001      	movs	r0, #1
 800081a:	f000 fa83 	bl	8000d24 <CLCD_voidGoToXY>
 800081e:	e005      	b.n	800082c <DisplayAlarmInfo+0x48>
		}
		else
		{
			CLCD_voidSendData(RecivedData[counter]);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4a11      	ldr	r2, [pc, #68]	; (8000868 <DisplayAlarmInfo+0x84>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f9c7 	bl	8000bba <CLCD_voidSendData>
	for(counter=1 ; RecivedData[counter] != 13 ;counter++)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	3301      	adds	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <DisplayAlarmInfo+0x84>)
 8000836:	5cd3      	ldrb	r3, [r2, r3]
 8000838:	2b0d      	cmp	r3, #13
 800083a:	d1de      	bne.n	80007fa <DisplayAlarmInfo+0x16>
		}
	}
	for(counter=0 ; counter<4 ;counter++)
 800083c:	2300      	movs	r3, #0
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	e006      	b.n	8000850 <DisplayAlarmInfo+0x6c>
	{
		SYSTIC_delay_ms(890);
 8000842:	f240 307a 	movw	r0, #890	; 0x37a
 8000846:	f000 fea9 	bl	800159c <SYSTIC_delay_ms>
	for(counter=0 ; counter<4 ;counter++)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	3301      	adds	r3, #1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d9f5      	bls.n	8000842 <DisplayAlarmInfo+0x5e>
	}

	CLCD_voidSendCmd(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f000 f993 	bl	8000b82 <CLCD_voidSendCmd>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	08001d90 	.word	0x08001d90
 8000868:	2000003c 	.word	0x2000003c

0800086c <Display_Time>:
void Display_Time(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	CLCD_voidGoToXY(1, 0);
 8000870:	2100      	movs	r1, #0
 8000872:	2001      	movs	r0, #1
 8000874:	f000 fa56 	bl	8000d24 <CLCD_voidGoToXY>

	CLCD_voidSendNumber(RecivedData[5]);
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <Display_Time+0x60>)
 800087a:	795b      	ldrb	r3, [r3, #5]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f9f9 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[6]);
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <Display_Time+0x60>)
 8000884:	799b      	ldrb	r3, [r3, #6]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f9f4 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendData(':');
 800088c:	203a      	movs	r0, #58	; 0x3a
 800088e:	f000 f994 	bl	8000bba <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[3]);
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <Display_Time+0x60>)
 8000894:	78db      	ldrb	r3, [r3, #3]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f9ec 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[4]);
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <Display_Time+0x60>)
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f9e7 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendData(':');
 80008a6:	203a      	movs	r0, #58	; 0x3a
 80008a8:	f000 f987 	bl	8000bba <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[1]);
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <Display_Time+0x60>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f9df 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[2]);
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <Display_Time+0x60>)
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f9da 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendData(':');
 80008c0:	203a      	movs	r0, #58	; 0x3a
 80008c2:	f000 f97a 	bl	8000bba <CLCD_voidSendData>

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000003c 	.word	0x2000003c

080008d0 <Display_Date>:
void Display_Date(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	CLCD_voidGoToXY(0, 0);
 80008d4:	2100      	movs	r1, #0
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 fa24 	bl	8000d24 <CLCD_voidGoToXY>

	switch (RecivedData[7])
 80008dc:	4b2b      	ldr	r3, [pc, #172]	; (800098c <Display_Date+0xbc>)
 80008de:	79db      	ldrb	r3, [r3, #7]
 80008e0:	3b31      	subs	r3, #49	; 0x31
 80008e2:	2b06      	cmp	r3, #6
 80008e4:	d82c      	bhi.n	8000940 <Display_Date+0x70>
 80008e6:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <Display_Date+0x1c>)
 80008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ec:	08000909 	.word	0x08000909
 80008f0:	08000911 	.word	0x08000911
 80008f4:	08000919 	.word	0x08000919
 80008f8:	08000921 	.word	0x08000921
 80008fc:	08000929 	.word	0x08000929
 8000900:	08000931 	.word	0x08000931
 8000904:	08000939 	.word	0x08000939
	{
	case '1'    : CLCD_u8SendString( (char *)"SUN") ; break;
 8000908:	4821      	ldr	r0, [pc, #132]	; (8000990 <Display_Date+0xc0>)
 800090a:	f000 f98e 	bl	8000c2a <CLCD_u8SendString>
 800090e:	e017      	b.n	8000940 <Display_Date+0x70>
	case '2'    : CLCD_u8SendString( (char *)"MON") ; break;
 8000910:	4820      	ldr	r0, [pc, #128]	; (8000994 <Display_Date+0xc4>)
 8000912:	f000 f98a 	bl	8000c2a <CLCD_u8SendString>
 8000916:	e013      	b.n	8000940 <Display_Date+0x70>
	case '3'    : CLCD_u8SendString( (char *)"TUE") ; break;
 8000918:	481f      	ldr	r0, [pc, #124]	; (8000998 <Display_Date+0xc8>)
 800091a:	f000 f986 	bl	8000c2a <CLCD_u8SendString>
 800091e:	e00f      	b.n	8000940 <Display_Date+0x70>
	case '4'    : CLCD_u8SendString( (char *)"WED") ; break;
 8000920:	481e      	ldr	r0, [pc, #120]	; (800099c <Display_Date+0xcc>)
 8000922:	f000 f982 	bl	8000c2a <CLCD_u8SendString>
 8000926:	e00b      	b.n	8000940 <Display_Date+0x70>
	case '5'    : CLCD_u8SendString( (char *)"THU") ; break;
 8000928:	481d      	ldr	r0, [pc, #116]	; (80009a0 <Display_Date+0xd0>)
 800092a:	f000 f97e 	bl	8000c2a <CLCD_u8SendString>
 800092e:	e007      	b.n	8000940 <Display_Date+0x70>
	case '6'    : CLCD_u8SendString( (char *)"FRI") ; break;
 8000930:	481c      	ldr	r0, [pc, #112]	; (80009a4 <Display_Date+0xd4>)
 8000932:	f000 f97a 	bl	8000c2a <CLCD_u8SendString>
 8000936:	e003      	b.n	8000940 <Display_Date+0x70>
	case '7'    : CLCD_u8SendString( (char *)"SAT") ; break;
 8000938:	481b      	ldr	r0, [pc, #108]	; (80009a8 <Display_Date+0xd8>)
 800093a:	f000 f976 	bl	8000c2a <CLCD_u8SendString>
 800093e:	bf00      	nop
	}

	CLCD_voidSendNumber(RecivedData[8]);
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <Display_Date+0xbc>)
 8000942:	7a1b      	ldrb	r3, [r3, #8]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f995 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[9]);
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <Display_Date+0xbc>)
 800094c:	7a5b      	ldrb	r3, [r3, #9]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f990 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendData('/');
 8000954:	202f      	movs	r0, #47	; 0x2f
 8000956:	f000 f930 	bl	8000bba <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[10]);
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <Display_Date+0xbc>)
 800095c:	7a9b      	ldrb	r3, [r3, #10]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f988 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[11]);
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <Display_Date+0xbc>)
 8000966:	7adb      	ldrb	r3, [r3, #11]
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f983 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendData('/');
 800096e:	202f      	movs	r0, #47	; 0x2f
 8000970:	f000 f923 	bl	8000bba <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[12]);
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <Display_Date+0xbc>)
 8000976:	7b1b      	ldrb	r3, [r3, #12]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f97b 	bl	8000c74 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[13]);
 800097e:	4b03      	ldr	r3, [pc, #12]	; (800098c <Display_Date+0xbc>)
 8000980:	7b5b      	ldrb	r3, [r3, #13]
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f976 	bl	8000c74 <CLCD_voidSendNumber>

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000003c 	.word	0x2000003c
 8000990:	08001da0 	.word	0x08001da0
 8000994:	08001da4 	.word	0x08001da4
 8000998:	08001da8 	.word	0x08001da8
 800099c:	08001dac 	.word	0x08001dac
 80009a0:	08001db0 	.word	0x08001db0
 80009a4:	08001db4 	.word	0x08001db4
 80009a8:	08001db8 	.word	0x08001db8

080009ac <TURN_ON_LED>:
void TURN_ON_LED(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	LED_On(PORTA, PIN2);
 80009b0:	2102      	movs	r1, #2
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 fcad 	bl	8001312 <LED_On>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <CLEAR_DISPLAY>:
void Receive_withInterrupt(void)
{
  /*	SPI_Receive_IT(SPICONFIG, RecivedData, 30, &SPI1_CallBack);*/
}
void CLEAR_DISPLAY(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	CLCD_ClearDisplay();
 80009c0:	f000 f9d0 	bl	8000d64 <CLCD_ClearDisplay>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_delay_1s>:
void _delay_1s( void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	SYSTIC_delay_ms(890);
 80009cc:	f240 307a 	movw	r0, #890	; 0x37a
 80009d0:	f000 fde4 	bl	800159c <SYSTIC_delay_ms>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <BZR_Init>:

/********************************************************************************
 *************** ### FUNCTION IMPLEMENTATION SECTION ### ************************
 ********************************************************************************/
void BZR_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t Copy_PinConfig={
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <BZR_Init+0x30>)
 80009e0:	463b      	mov	r3, r7
 80009e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e6:	6018      	str	r0, [r3, #0]
 80009e8:	3304      	adds	r3, #4
 80009ea:	7019      	strb	r1, [r3, #0]
				.Mode		= OUTPUT_SPEED_2MHz	,
				.Output	= OUTPUT_PUSH_PULL		,
				.Input	= ANALOGE
		};
		/*GPIO pin initialization*/
		GPIO_u8PinInit(&Copy_PinConfig);
 80009ec:	463b      	mov	r3, r7
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fb74 	bl	80010dc <GPIO_u8PinInit>
		GPIO_u8SetPinValue(BZR_PORT, BZR_PIN, PIN_LOW);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2104      	movs	r1, #4
 80009f8:	2001      	movs	r0, #1
 80009fa:	f000 fc27 	bl	800124c <GPIO_u8SetPinValue>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	08001dbc 	.word	0x08001dbc

08000a0c <BZR_On>:

void BZR_On(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(BZR_PORT, BZR_PIN, PIN_HIGH);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2104      	movs	r1, #4
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 fc19 	bl	800124c <GPIO_u8SetPinValue>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <BZR_Off>:

void BZR_Off(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(BZR_PORT, BZR_PIN, PIN_LOW);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2104      	movs	r1, #4
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 fc10 	bl	800124c <GPIO_u8SetPinValue>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <CLCD_voidPinInit>:




void CLCD_voidPinInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t A11 = { .Port = PORTA , .PinNum = PIN11 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 8000a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	711a      	strb	r2, [r3, #4]
 8000a40:	230b      	movs	r3, #11
 8000a42:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000a46:	2302      	movs	r3, #2
 8000a48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GPIO_PinConfig_t A8  = { .Port = PORTA , .PinNum = PIN8  , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	711a      	strb	r2, [r3, #4]
 8000a56:	2308      	movs	r3, #8
 8000a58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	GPIO_PinConfig_t B12 = { .Port = PORTB , .PinNum = PIN12 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	711a      	strb	r2, [r3, #4]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	763b      	strb	r3, [r7, #24]
 8000a70:	230c      	movs	r3, #12
 8000a72:	767b      	strb	r3, [r7, #25]
 8000a74:	2302      	movs	r3, #2
 8000a76:	76bb      	strb	r3, [r7, #26]
	GPIO_PinConfig_t B13 = { .Port = PORTB , .PinNum = PIN13 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	711a      	strb	r2, [r3, #4]
 8000a82:	2301      	movs	r3, #1
 8000a84:	743b      	strb	r3, [r7, #16]
 8000a86:	230d      	movs	r3, #13
 8000a88:	747b      	strb	r3, [r7, #17]
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	74bb      	strb	r3, [r7, #18]
	GPIO_PinConfig_t B14 = { .Port = PORTB , .PinNum = PIN14 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	711a      	strb	r2, [r3, #4]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	723b      	strb	r3, [r7, #8]
 8000a9c:	230e      	movs	r3, #14
 8000a9e:	727b      	strb	r3, [r7, #9]
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	72bb      	strb	r3, [r7, #10]
	GPIO_PinConfig_t B15 = { .Port = PORTB , .PinNum = PIN15 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	711a      	strb	r2, [r3, #4]
 8000aac:	2301      	movs	r3, #1
 8000aae:	703b      	strb	r3, [r7, #0]
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	707b      	strb	r3, [r7, #1]
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	70bb      	strb	r3, [r7, #2]


	GPIO_u8PinInit(&A11);
 8000ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fb0d 	bl	80010dc <GPIO_u8PinInit>
	GPIO_u8PinInit(&A8 );
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fb08 	bl	80010dc <GPIO_u8PinInit>

	GPIO_u8PinInit(&B12);
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fb03 	bl	80010dc <GPIO_u8PinInit>
	GPIO_u8PinInit(&B13);
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fafe 	bl	80010dc <GPIO_u8PinInit>
	GPIO_u8PinInit(&B14);
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 faf9 	bl	80010dc <GPIO_u8PinInit>
	GPIO_u8PinInit(&B15);
 8000aea:	463b      	mov	r3, r7
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 faf5 	bl	80010dc <GPIO_u8PinInit>


}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	; 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <voidSendEnablePulse>:




static void voidSendEnablePulse(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
	/*Send enable pulse*/
	GPIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,PIN_HIGH);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2108      	movs	r1, #8
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 fba2 	bl	800124c <GPIO_u8SetPinValue>
	
	SYSTIC_delay_ms(2);
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f000 fd47 	bl	800159c <SYSTIC_delay_ms>
	GPIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,PIN_LOW);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2108      	movs	r1, #8
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 fb9a 	bl	800124c <GPIO_u8SetPinValue>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <voidSetLCDHalfDataPort>:




static void voidSetLCDHalfDataPort(uint8_t Copy_u8Nipple)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]

	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D4_PIN, GET_BIT(Copy_u8Nipple,0));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	210f      	movs	r1, #15
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 fb8a 	bl	800124c <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D5_PIN, GET_BIT(Copy_u8Nipple,1));
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	210e      	movs	r1, #14
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f000 fb7f 	bl	800124c <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D6_PIN, GET_BIT(Copy_u8Nipple,2));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	210d      	movs	r1, #13
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f000 fb74 	bl	800124c <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D7_PIN, GET_BIT(Copy_u8Nipple,3));
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	08db      	lsrs	r3, r3, #3
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	210c      	movs	r1, #12
 8000b74:	2001      	movs	r0, #1
 8000b76:	f000 fb69 	bl	800124c <GPIO_u8SetPinValue>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <CLCD_voidSendCmd>:




void CLCD_voidSendCmd(uint8_t Copy_u8Cmd)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	71fb      	strb	r3, [r7, #7]
	/*Set RS pin to low for command*/
	GPIO_u8SetPinValue( CLCD_CTRL_PORT, CLCD_RS_PIN, PIN_LOW);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	210b      	movs	r1, #11
 8000b90:	2000      	movs	r0, #0
 8000b92:	f000 fb5b 	bl	800124c <GPIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	091b      	lsrs	r3, r3, #4
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ffbd 	bl	8000b1c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000ba2:	f7ff ffaa 	bl	8000afa <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffb7 	bl	8000b1c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000bae:	f7ff ffa4 	bl	8000afa <voidSendEnablePulse>
#endif
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <CLCD_voidSendData>:




void CLCD_voidSendData(uint8_t Copy_u8Data)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
	/*Set RS pin to high for Data*/
	GPIO_u8SetPinValue( CLCD_CTRL_PORT, CLCD_RS_PIN, PIN_HIGH);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	210b      	movs	r1, #11
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f000 fb3f 	bl	800124c <GPIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	091b      	lsrs	r3, r3, #4
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ffa1 	bl	8000b1c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000bda:	f7ff ff8e 	bl	8000afa <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff9b 	bl	8000b1c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000be6:	f7ff ff88 	bl	8000afa <voidSendEnablePulse>
#endif

}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <CLCD_voidInit>:




void CLCD_voidInit(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
	/*wait for more than 30ms after power on*/
	SYSTIC_delay_ms(40);
 8000bf6:	2028      	movs	r0, #40	; 0x28
 8000bf8:	f000 fcd0 	bl	800159c <SYSTIC_delay_ms>
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f7ff ff8d 	bl	8000b1c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000c02:	f7ff ff7a 	bl	8000afa <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
 8000c06:	2002      	movs	r0, #2
 8000c08:	f7ff ff88 	bl	8000b1c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000c0c:	f7ff ff75 	bl	8000afa <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
 8000c10:	2008      	movs	r0, #8
 8000c12:	f7ff ff83 	bl	8000b1c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000c16:	f7ff ff70 	bl	8000afa <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
 8000c1a:	200c      	movs	r0, #12
 8000c1c:	f7ff ffb1 	bl	8000b82 <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff ffae 	bl	8000b82 <CLCD_voidSendCmd>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <CLCD_u8SendString>:




uint8_t CLCD_u8SendString(const char* Copy_chString)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b084      	sub	sp, #16
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState= OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
	if(Copy_chString != NULL)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d013      	beq.n	8000c64 <CLCD_u8SendString+0x3a>
	{
		uint8_t Local_u8Counter=0u;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73bb      	strb	r3, [r7, #14]
		while(Copy_chString[Local_u8Counter] != '\0')
 8000c40:	e009      	b.n	8000c56 <CLCD_u8SendString+0x2c>
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
 8000c42:	7bbb      	ldrb	r3, [r7, #14]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ffb5 	bl	8000bba <CLCD_voidSendData>
			Local_u8Counter++;
 8000c50:	7bbb      	ldrb	r3, [r7, #14]
 8000c52:	3301      	adds	r3, #1
 8000c54:	73bb      	strb	r3, [r7, #14]
		while(Copy_chString[Local_u8Counter] != '\0')
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1ef      	bne.n	8000c42 <CLCD_u8SendString+0x18>
 8000c62:	e001      	b.n	8000c68 <CLCD_u8SendString+0x3e>
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
 8000c64:	2302      	movs	r3, #2
 8000c66:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <CLCD_voidSendNumber>:




void CLCD_voidSendNumber(signed int Copy_s32Number)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	

	char Local_chNumberArr[10];
	uint8_t Local_u8RightDigit;
	uint8_t Local_u8Counter=0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	75fb      	strb	r3, [r7, #23]
	signed char Local_s8Counter2;

	if (Copy_s32Number == 0)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d103      	bne.n	8000c8e <CLCD_voidSendNumber+0x1a>
	{
		CLCD_voidSendData('0');
 8000c86:	2030      	movs	r0, #48	; 0x30
 8000c88:	f7ff ff97 	bl	8000bba <CLCD_voidSendData>
 8000c8c:	e045      	b.n	8000d1a <CLCD_voidSendNumber+0xa6>
		return ;
	}
	else if(Copy_s32Number < 0)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	da27      	bge.n	8000ce4 <CLCD_voidSendNumber+0x70>
	{
		CLCD_voidSendData('-');
 8000c94:	202d      	movs	r0, #45	; 0x2d
 8000c96:	f7ff ff90 	bl	8000bba <CLCD_voidSendData>
		Copy_s32Number *= -1;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	425b      	negs	r3, r3
 8000c9e:	607b      	str	r3, [r7, #4]
	}
	while(Copy_s32Number != 0)
 8000ca0:	e020      	b.n	8000ce4 <CLCD_voidSendNumber+0x70>
	{
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <CLCD_voidSendNumber+0xac>)
 8000ca6:	fb83 1302 	smull	r1, r3, r3, r2
 8000caa:	1099      	asrs	r1, r3, #2
 8000cac:	17d3      	asrs	r3, r2, #31
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	1ad1      	subs	r1, r2, r3
 8000cba:	460b      	mov	r3, r1
 8000cbc:	757b      	strb	r3, [r7, #21]
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <CLCD_voidSendNumber+0xac>)
 8000cc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc6:	1092      	asrs	r2, r2, #2
 8000cc8:	17db      	asrs	r3, r3, #31
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	607b      	str	r3, [r7, #4]
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	7d7a      	ldrb	r2, [r7, #21]
 8000cd2:	3230      	adds	r2, #48	; 0x30
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	3318      	adds	r3, #24
 8000cd8:	443b      	add	r3, r7
 8000cda:	f803 2c10 	strb.w	r2, [r3, #-16]
		Local_u8Counter++;
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	75fb      	strb	r3, [r7, #23]
	while(Copy_s32Number != 0)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1db      	bne.n	8000ca2 <CLCD_voidSendNumber+0x2e>
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
 8000cea:	7dfb      	ldrb	r3, [r7, #23]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	75bb      	strb	r3, [r7, #22]
 8000cf2:	e00e      	b.n	8000d12 <CLCD_voidSendNumber+0x9e>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
 8000cf4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000cf8:	3318      	adds	r3, #24
 8000cfa:	443b      	add	r3, r7
 8000cfc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5a 	bl	8000bba <CLCD_voidSendData>
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
 8000d06:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	75bb      	strb	r3, [r7, #22]
 8000d12:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	daec      	bge.n	8000cf4 <CLCD_voidSendNumber+0x80>
	}
}
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	66666667 	.word	0x66666667

08000d24 <CLCD_voidGoToXY>:




void CLCD_voidGoToXY(uint8_t Copy_u8XPos, uint8_t Copy_u8YPos)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	4613      	mov	r3, r2
 8000d32:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8DDRamAdd;
	if(Copy_u8YPos == 0u)
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRamAdd= Copy_u8XPos;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e005      	b.n	8000d4c <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8YPos == 1u)
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d102      	bne.n	8000d4c <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	3340      	adds	r3, #64	; 0x40
 8000d4a:	73fb      	strb	r3, [r7, #15]
	}
	/*Set bit 7 for Set DDRAM address command */
	Local_u8DDRamAdd |= 1<<7u;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d52:	73fb      	strb	r3, [r7, #15]

	CLCD_voidSendCmd(Local_u8DDRamAdd);
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff13 	bl	8000b82 <CLCD_voidSendCmd>
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <CLCD_ClearDisplay>:
	/*Display the pattern written inside CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
}

void CLCD_ClearDisplay(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	CLCD_voidSendCmd(DISPLAY_CLEAR);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ff0a 	bl	8000b82 <CLCD_voidSendCmd>
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <EXTI_Init>:
 * @parameter[in] EXTI_Confg : the initialization values of the EXTI
 * @retval ErrorStatus
 */

uint8_t EXTI_Init(EXTI_Confg* Copy_EXTI)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	uint8_t Error_state =OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]

	if( (Copy_EXTI != NULL) && (Copy_EXTI->EXTI_CallBackFunc != NULL) )
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 808d 	beq.w	8000ea2 <EXTI_Init+0x12e>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 8088 	beq.w	8000ea2 <EXTI_Init+0x12e>
	{
		EXTI_GPCallBackFunc[Copy_EXTI->LINE] = (Copy_EXTI->EXTI_CallBackFunc) ;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4619      	mov	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4a45      	ldr	r2, [pc, #276]	; (8000eb4 <EXTI_Init+0x140>)
 8000d9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b0f      	cmp	r3, #15
 8000da8:	d878      	bhi.n	8000e9c <EXTI_Init+0x128>
		{
			if( (Copy_EXTI->Mode) == Enable)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	789b      	ldrb	r3, [r3, #2]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10b      	bne.n	8000dca <EXTI_Init+0x56>
			{
				/* enable EXTI Line */
				EXTI->IMR |= ( 1 << (Copy_EXTI->LINE)) ;
 8000db2:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <EXTI_Init+0x144>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	408a      	lsls	r2, r1
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4a3d      	ldr	r2, [pc, #244]	; (8000eb8 <EXTI_Init+0x144>)
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	e012      	b.n	8000df0 <EXTI_Init+0x7c>
			}
			else if( (Copy_EXTI->Mode) == Disable)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	789b      	ldrb	r3, [r3, #2]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d10c      	bne.n	8000dec <EXTI_Init+0x78>
			{
				/* disable EXTI Line */
				EXTI->IMR &= ~( 1 << (Copy_EXTI->LINE)) ;
 8000dd2:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <EXTI_Init+0x144>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	2201      	movs	r2, #1
 8000dde:	408a      	lsls	r2, r1
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	4611      	mov	r1, r2
 8000de4:	4a34      	ldr	r2, [pc, #208]	; (8000eb8 <EXTI_Init+0x144>)
 8000de6:	400b      	ands	r3, r1
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e001      	b.n	8000df0 <EXTI_Init+0x7c>
			}
			else
			{
				Error_state =NOK;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
			}

			if( (Copy_EXTI->Trigger) == FallingEdge)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d117      	bne.n	8000e28 <EXTI_Init+0xb4>
			{
				/* set trigger configuration to Falling edge */
				EXTI->FTSR |= ( 1 << (Copy_EXTI->LINE)) ;
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <EXTI_Init+0x144>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	4611      	mov	r1, r2
 8000e02:	2201      	movs	r2, #1
 8000e04:	408a      	lsls	r2, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	4a2b      	ldr	r2, [pc, #172]	; (8000eb8 <EXTI_Init+0x144>)
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	60d3      	str	r3, [r2, #12]
				/* Clear trigger configuration to Raising edge */
				EXTI->RTSR &= ~( 1 << (Copy_EXTI->LINE)) ;
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <EXTI_Init+0x144>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	4611      	mov	r1, r2
 8000e18:	2201      	movs	r2, #1
 8000e1a:	408a      	lsls	r2, r1
 8000e1c:	43d2      	mvns	r2, r2
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <EXTI_Init+0x144>)
 8000e22:	400b      	ands	r3, r1
 8000e24:	6093      	str	r3, [r2, #8]
		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 8000e26:	e03e      	b.n	8000ea6 <EXTI_Init+0x132>
			}
			else if( (Copy_EXTI->Trigger) == RaisingEdge)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	785b      	ldrb	r3, [r3, #1]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d117      	bne.n	8000e60 <EXTI_Init+0xec>
			{
				/* set trigger configuration to Raising edge */
				EXTI->RTSR |= ( 1 << (Copy_EXTI->LINE)) ;
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <EXTI_Init+0x144>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	7812      	ldrb	r2, [r2, #0]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	408a      	lsls	r2, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <EXTI_Init+0x144>)
 8000e42:	430b      	orrs	r3, r1
 8000e44:	6093      	str	r3, [r2, #8]
				/* Clear trigger configuration to Falling edge */
				EXTI->FTSR &= ~( 1 << (Copy_EXTI->LINE)) ;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <EXTI_Init+0x144>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	2201      	movs	r2, #1
 8000e52:	408a      	lsls	r2, r1
 8000e54:	43d2      	mvns	r2, r2
 8000e56:	4611      	mov	r1, r2
 8000e58:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <EXTI_Init+0x144>)
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	60d3      	str	r3, [r2, #12]
		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 8000e5e:	e022      	b.n	8000ea6 <EXTI_Init+0x132>
			}
			else if( (Copy_EXTI->Trigger) == Both)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d116      	bne.n	8000e96 <EXTI_Init+0x122>
			{
				/* set trigger configuration to Raising edge */
				EXTI->RTSR |= ( 1 << (Copy_EXTI->LINE)) ;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <EXTI_Init+0x144>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	4611      	mov	r1, r2
 8000e72:	2201      	movs	r2, #1
 8000e74:	408a      	lsls	r2, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <EXTI_Init+0x144>)
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	6093      	str	r3, [r2, #8]
				/* set trigger configuration to Falling edge */
				EXTI->FTSR |= ( 1 << (Copy_EXTI->LINE)) ;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <EXTI_Init+0x144>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	4611      	mov	r1, r2
 8000e88:	2201      	movs	r2, #1
 8000e8a:	408a      	lsls	r2, r1
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <EXTI_Init+0x144>)
 8000e90:	430b      	orrs	r3, r1
 8000e92:	60d3      	str	r3, [r2, #12]
		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 8000e94:	e007      	b.n	8000ea6 <EXTI_Init+0x132>
			}
			else
			{
				Error_state =NOK;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 8000e9a:	e004      	b.n	8000ea6 <EXTI_Init+0x132>
			}
		}
		else
		{
			Error_state =NOK;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
		if( ( (Copy_EXTI->LINE) < Max_Number_EXTILine ) )
 8000ea0:	e001      	b.n	8000ea6 <EXTI_Init+0x132>
		}
	}

	else
	{
		Error_state =NOK;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
	}
	return Error_state;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	2000005c 	.word	0x2000005c
 8000eb8:	40010400 	.word	0x40010400

08000ebc <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI0)) ;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <EXTI0_IRQHandler+0x1c>)
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <EXTI0_IRQHandler+0x1c>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI0]();
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <EXTI0_IRQHandler+0x20>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4798      	blx	r3

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40010400 	.word	0x40010400
 8000edc:	2000005c 	.word	0x2000005c

08000ee0 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI1)) ;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <EXTI1_IRQHandler+0x1c>)
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <EXTI1_IRQHandler+0x1c>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI1]();
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <EXTI1_IRQHandler+0x20>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	4798      	blx	r3

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40010400 	.word	0x40010400
 8000f00:	2000005c 	.word	0x2000005c

08000f04 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI2)) ;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <EXTI2_IRQHandler+0x1c>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <EXTI2_IRQHandler+0x1c>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI2]();
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <EXTI2_IRQHandler+0x20>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4798      	blx	r3

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40010400 	.word	0x40010400
 8000f24:	2000005c 	.word	0x2000005c

08000f28 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI3)) ;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <EXTI3_IRQHandler+0x1c>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <EXTI3_IRQHandler+0x1c>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI3]();
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <EXTI3_IRQHandler+0x20>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	4798      	blx	r3

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40010400 	.word	0x40010400
 8000f48:	2000005c 	.word	0x2000005c

08000f4c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI4)) ;
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <EXTI4_IRQHandler+0x1c>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <EXTI4_IRQHandler+0x1c>)
 8000f56:	f043 0310 	orr.w	r3, r3, #16
 8000f5a:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI4]();
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <EXTI4_IRQHandler+0x20>)
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	4798      	blx	r3

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40010400 	.word	0x40010400
 8000f6c:	2000005c 	.word	0x2000005c

08000f70 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	if(GET_BIT( (EXTI->PR),EXTI5 ))
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f003 0320 	and.w	r3, r3, #32
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d008      	beq.n	8000f92 <EXTI9_5_IRQHandler+0x22>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI5)) ;
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4a22      	ldr	r2, [pc, #136]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000f86:	f043 0320 	orr.w	r3, r3, #32
 8000f8a:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI5]();
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <EXTI9_5_IRQHandler+0xa4>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI6 ))
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d008      	beq.n	8000fb0 <EXTI9_5_IRQHandler+0x40>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI6)) ;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa8:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI6]();
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <EXTI9_5_IRQHandler+0xa4>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI7 ))
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d008      	beq.n	8000fce <EXTI9_5_IRQHandler+0x5e>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI7)) ;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc6:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI7]();
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <EXTI9_5_IRQHandler+0xa4>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI8 ))
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d008      	beq.n	8000fec <EXTI9_5_IRQHandler+0x7c>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI8)) ;
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI8]();
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <EXTI9_5_IRQHandler+0xa4>)
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	4798      	blx	r3


	}
	if(GET_BIT( (EXTI->PR),EXTI9 ))
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d008      	beq.n	800100a <EXTI9_5_IRQHandler+0x9a>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI9)) ;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <EXTI9_5_IRQHandler+0xa0>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI9]();
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <EXTI9_5_IRQHandler+0xa4>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	4798      	blx	r3

	}
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40010400 	.word	0x40010400
 8001014:	2000005c 	.word	0x2000005c

08001018 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	if(GET_BIT( (EXTI->PR),EXTI10 ))
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <EXTI15_10_IRQHandler+0x22>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI10)) ;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI10]();
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <EXTI15_10_IRQHandler+0xc0>)
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI11 ))
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001042:	2b00      	cmp	r3, #0
 8001044:	d008      	beq.n	8001058 <EXTI15_10_IRQHandler+0x40>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI11)) ;
 8001046:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 800104c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001050:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI11]();
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <EXTI15_10_IRQHandler+0xc0>)
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI12 ))
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <EXTI15_10_IRQHandler+0x5e>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI12)) ;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 800106a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800106e:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI12]();
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <EXTI15_10_IRQHandler+0xc0>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI13 ))
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d008      	beq.n	8001094 <EXTI15_10_IRQHandler+0x7c>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI13)) ;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 8001088:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800108c:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI13]();
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <EXTI15_10_IRQHandler+0xc0>)
 8001090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001092:	4798      	blx	r3


	}
	if(GET_BIT( (EXTI->PR),EXTI14 ))
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <EXTI15_10_IRQHandler+0x9a>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI14)) ;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI14]();
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <EXTI15_10_IRQHandler+0xc0>)
 80010ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b0:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI15 ))
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d008      	beq.n	80010d0 <EXTI15_10_IRQHandler+0xb8>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI15)) ;
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <EXTI15_10_IRQHandler+0xbc>)
 80010c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c8:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI15]();
 80010ca:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <EXTI15_10_IRQHandler+0xc0>)
 80010cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ce:	4798      	blx	r3

	}

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40010400 	.word	0x40010400
 80010d8:	2000005c 	.word	0x2000005c

080010dc <GPIO_u8PinInit>:
 * @param[in] PinConfig : the initialization variables of the pins
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_t *PinConfig)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
	if(PinConfig!=NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 80a4 	beq.w	8001238 <GPIO_u8PinInit+0x15c>
	{
		if((PinConfig->Port <= PORTH)&&(PinConfig->PinNum <=PIN15))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	f200 809c 	bhi.w	8001232 <GPIO_u8PinInit+0x156>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f200 8097 	bhi.w	8001232 <GPIO_u8PinInit+0x156>
		{
			/*Select GPIO mode : Input , Output  */
			uint8_t Local_u8RegNum = (PinConfig->PinNum / 8);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	73bb      	strb	r3, [r7, #14]
			uint8_t Local_u8BitNum = (PinConfig->PinNum % 8);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	737b      	strb	r3, [r7, #13]
			(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] &= ~(MODE_MASK << (Local_u8BitNum * MODE_PIN_ACCESS));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <GPIO_u8PinInit+0x16c>)
 800111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001122:	7bba      	ldrb	r2, [r7, #14]
 8001124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	4b42      	ldr	r3, [pc, #264]	; (8001248 <GPIO_u8PinInit+0x16c>)
 800113e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	4001      	ands	r1, r0
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] |= ((PinConfig->Mode) << (Local_u8BitNum * MODE_PIN_ACCESS));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <GPIO_u8PinInit+0x16c>)
 8001152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001156:	7bba      	ldrb	r2, [r7, #14]
 8001158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	789b      	ldrb	r3, [r3, #2]
 8001160:	461a      	mov	r2, r3
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b35      	ldr	r3, [pc, #212]	; (8001248 <GPIO_u8PinInit+0x16c>)
 8001174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001178:	7bba      	ldrb	r2, [r7, #14]
 800117a:	4301      	orrs	r1, r0
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] &= ~(CNF_MASK << ((Local_u8BitNum * CNF_PIN_ACCESS) + CNF_PIN_SHIFT));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <GPIO_u8PinInit+0x16c>)
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	7bba      	ldrb	r2, [r7, #14]
 800118e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001192:	7b7b      	ldrb	r3, [r7, #13]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <GPIO_u8PinInit+0x16c>)
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	7bba      	ldrb	r2, [r7, #14]
 80011b0:	4001      	ands	r1, r0
 80011b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if((PinConfig->Mode) == INPUT)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	789b      	ldrb	r3, [r3, #2]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d11c      	bne.n	80011f8 <GPIO_u8PinInit+0x11c>
			{
				/*Select input type : Analog, Floating, PULLUP PULLDOWN*/
				(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] |= ((PinConfig->Input) << ((Local_u8BitNum * CNF_PIN_ACCESS) + CNF_PIN_SHIFT));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <GPIO_u8PinInit+0x16c>)
 80011c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ca:	7bba      	ldrb	r2, [r7, #14]
 80011cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	78db      	ldrb	r3, [r3, #3]
 80011d4:	461a      	mov	r2, r3
 80011d6:	7b7b      	ldrb	r3, [r7, #13]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <GPIO_u8PinInit+0x16c>)
 80011ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ee:	7bba      	ldrb	r2, [r7, #14]
 80011f0:	4301      	orrs	r1, r0
 80011f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		{
 80011f6:	e021      	b.n	800123c <GPIO_u8PinInit+0x160>
			}
			else
			{
				/*Select output type : OUTPUT Push Pull, Output OpenDrain, Alternate function Push Pull, Alternate function OpenDrain*/
				(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] |= (PinConfig->Output << ((Local_u8BitNum * CNF_PIN_ACCESS) + CNF_PIN_SHIFT));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <GPIO_u8PinInit+0x16c>)
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	7bba      	ldrb	r2, [r7, #14]
 8001206:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	791b      	ldrb	r3, [r3, #4]
 800120e:	461a      	mov	r2, r3
 8001210:	7b7b      	ldrb	r3, [r7, #13]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <GPIO_u8PinInit+0x16c>)
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	7bba      	ldrb	r2, [r7, #14]
 800122a:	4301      	orrs	r1, r0
 800122c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		{
 8001230:	e004      	b.n	800123c <GPIO_u8PinInit+0x160>
			}
		}
		else
		{
			Local_u8ErrorState =NOK;
 8001232:	2301      	movs	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e001      	b.n	800123c <GPIO_u8PinInit+0x160>
		}
	}
	else{
		Local_u8ErrorState = NULL_PTR_ERR;
 8001238:	2302      	movs	r3, #2
 800123a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	20000000 	.word	0x20000000

0800124c <GPIO_u8SetPinValue>:
 * @param[in] PinVal : the pin value, get options @PinVal_t enum
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8SetPinValue(Port_t Port, Pin_t PinNum, PinVal_t PinVal)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	460b      	mov	r3, r1
 8001258:	71bb      	strb	r3, [r7, #6]
 800125a:	4613      	mov	r3, r2
 800125c:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = OK;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
	if((Port<=PORTH)&&(PinNum<=PIN15))
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b07      	cmp	r3, #7
 8001266:	d82e      	bhi.n	80012c6 <GPIO_u8SetPinValue+0x7a>
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	2b0f      	cmp	r3, #15
 800126c:	d82b      	bhi.n	80012c6 <GPIO_u8SetPinValue+0x7a>
	{
		if(PinVal == PIN_LOW)
 800126e:	797b      	ldrb	r3, [r7, #5]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d111      	bne.n	8001298 <GPIO_u8SetPinValue+0x4c>
		{
			GPIOPORT[Port]->ODR &= ~(1<<PinNum);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <GPIO_u8SetPinValue+0x8c>)
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2101      	movs	r1, #1
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4912      	ldr	r1, [pc, #72]	; (80012d8 <GPIO_u8SetPinValue+0x8c>)
 800128e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001292:	4002      	ands	r2, r0
 8001294:	60da      	str	r2, [r3, #12]
		if(PinVal == PIN_LOW)
 8001296:	e018      	b.n	80012ca <GPIO_u8SetPinValue+0x7e>
			/* GPIOPort[Port]->BSRR = 1<< 16 + PinNum ; */
		}


		else if(PinVal == PIN_HIGH)
 8001298:	797b      	ldrb	r3, [r7, #5]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d110      	bne.n	80012c0 <GPIO_u8SetPinValue+0x74>
		{
			GPIOPORT[Port]->ODR |= (1<<PinNum);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <GPIO_u8SetPinValue+0x8c>)
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4908      	ldr	r1, [pc, #32]	; (80012d8 <GPIO_u8SetPinValue+0x8c>)
 80012b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012ba:	4302      	orrs	r2, r0
 80012bc:	60da      	str	r2, [r3, #12]
		if(PinVal == PIN_LOW)
 80012be:	e004      	b.n	80012ca <GPIO_u8SetPinValue+0x7e>
			/* GPIOPort[Port]->BSRR = 1<<  PinNum ; */
		}
		else{
			Local_u8ErrorState =NOK;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
		if(PinVal == PIN_LOW)
 80012c4:	e001      	b.n	80012ca <GPIO_u8SetPinValue+0x7e>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000

080012dc <LED_Init>:

/********************************************************************************
 *************** ### FUNCTION IMPLEMENTATION SECTION ### ************************
 ********************************************************************************/
void LED_Init(Port_t	Port , Pin_t	PinNum )
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	460a      	mov	r2, r1
 80012e6:	71fb      	strb	r3, [r7, #7]
 80012e8:	4613      	mov	r3, r2
 80012ea:	71bb      	strb	r3, [r7, #6]

	GPIO_PinConfig_t Copy_PinConfig={
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	723b      	strb	r3, [r7, #8]
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	727b      	strb	r3, [r7, #9]
 80012f4:	2302      	movs	r3, #2
 80012f6:	72bb      	strb	r3, [r7, #10]
 80012f8:	2301      	movs	r3, #1
 80012fa:	72fb      	strb	r3, [r7, #11]
 80012fc:	2300      	movs	r3, #0
 80012fe:	733b      	strb	r3, [r7, #12]
			.Mode		= OUTPUT_SPEED_2MHz	,
			.Output	= OUTPUT_PUSH_PULL		,
			.Input	= FLOATING
	};
	/*GPIO pin initialization*/
	GPIO_u8PinInit(&Copy_PinConfig);
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fee9 	bl	80010dc <GPIO_u8PinInit>
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <LED_On>:

void LED_On(Port_t	Port , Pin_t	PinNum )
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	460a      	mov	r2, r1
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	4613      	mov	r3, r2
 8001320:	71bb      	strb	r3, [r7, #6]
	GPIO_u8SetPinValue(Port, PinNum, PIN_HIGH);
 8001322:	79b9      	ldrb	r1, [r7, #6]
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2201      	movs	r2, #1
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff8f 	bl	800124c <GPIO_u8SetPinValue>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <NVIC_EnableIRQ>:
 * @param : IRQn				(ENUM: @NVIC_IRQn_t)
 * @retval: Local_ErrorState	(ENUM: @ErrorState_t)
 *
 * */
ErrorState_t NVIC_EnableIRQ(NVIC_IRQn_t IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	ErrorState_t Local_ErrorState = OK;
 8001342:	2300      	movs	r3, #0
 8001344:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_RegNumber = (IRQn / 32);
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	095b      	lsrs	r3, r3, #5
 800134a:	73bb      	strb	r3, [r7, #14]
	uint8_t Local_PinNumber = (IRQn % 32);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	737b      	strb	r3, [r7, #13]

	if((IRQn >= NVIC_IRQ_WWDG) && (IRQn <= NVIC_IRQ_OTG_FS))
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b43      	cmp	r3, #67	; 0x43
 8001358:	d80e      	bhi.n	8001378 <NVIC_EnableIRQ+0x40>
	{

		NVIC->ISER[Local_RegNumber] |= (NVIC_SET_MASK << Local_PinNumber);
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <NVIC_EnableIRQ+0x50>)
 800135c:	7bbb      	ldrb	r3, [r7, #14]
 800135e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001362:	7b7b      	ldrb	r3, [r7, #13]
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	4618      	mov	r0, r3
 800136c:	4906      	ldr	r1, [pc, #24]	; (8001388 <NVIC_EnableIRQ+0x50>)
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	4302      	orrs	r2, r0
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001376:	e001      	b.n	800137c <NVIC_EnableIRQ+0x44>
	}
	else
	{
		Local_ErrorState = NOK;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ErrorState;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100

0800138c <RCC_SetClkSts>:
 * @param:	Copy_ClockType		(enum: @ClockSrc_t)
 * @param:	Copy_Status			(enum: @RCC_State_t)
 * @retval:	Local_ErrorState	(enum: @ErrorState_t)
 * */
ErrorState_t RCC_SetClkSts(ClockSrc_t Copy_ClockType,RCC_State_t Copy_Status)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	460a      	mov	r2, r1
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	4613      	mov	r3, r2
 800139a:	71bb      	strb	r3, [r7, #6]

	ErrorState_t Local_ErrorState=OK;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_TimeOut=0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	81bb      	strh	r3, [r7, #12]

	/***Clock type***/
	if(Copy_ClockType == CLK_SRC_PLL)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d125      	bne.n	80013f6 <RCC_SetClkSts+0x6a>
	{
		/***Clock type is PLL***/
		switch(Copy_Status)
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <RCC_SetClkSts+0x2a>
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d016      	beq.n	80013e2 <RCC_SetClkSts+0x56>
 80013b4:	e01c      	b.n	80013f0 <RCC_SetClkSts+0x64>
		{
		/*PLL ON*/
		case RCC_ON :	RCC->RCC_CR |= ( SET_MASK << CR_PLLON );
 80013b6:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <RCC_SetClkSts+0x12c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a3f      	ldr	r2, [pc, #252]	; (80014b8 <RCC_SetClkSts+0x12c>)
 80013bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c0:	6013      	str	r3, [r2, #0]
		/*Waiting the PLL ready flag*/
		while( ( ( ( RCC->RCC_CR >> CR_PLLRDY ) & GET_MASK ) != PLL_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 80013c2:	e002      	b.n	80013ca <RCC_SetClkSts+0x3e>
		{
			/*counter(Time Out)*/
			Local_TimeOut++;
 80013c4:	89bb      	ldrh	r3, [r7, #12]
 80013c6:	3301      	adds	r3, #1
 80013c8:	81bb      	strh	r3, [r7, #12]
		while( ( ( ( RCC->RCC_CR >> CR_PLLRDY ) & GET_MASK ) != PLL_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <RCC_SetClkSts+0x12c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0e5b      	lsrs	r3, r3, #25
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d063      	beq.n	80014a0 <RCC_SetClkSts+0x114>
 80013d8:	89bb      	ldrh	r3, [r7, #12]
 80013da:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013de:	d9f1      	bls.n	80013c4 <RCC_SetClkSts+0x38>
		}
		break;
 80013e0:	e05e      	b.n	80014a0 <RCC_SetClkSts+0x114>
		/*PLL OFF*/
		case RCC_OFF:	RCC->RCC_CR &=~ ( SET_MASK << CR_PLLON );	break;
 80013e2:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <RCC_SetClkSts+0x12c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a34      	ldr	r2, [pc, #208]	; (80014b8 <RCC_SetClkSts+0x12c>)
 80013e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e05c      	b.n	80014aa <RCC_SetClkSts+0x11e>

		default : Local_ErrorState = NOK;							break;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e059      	b.n	80014aa <RCC_SetClkSts+0x11e>
		}
	}
	else if(Copy_ClockType == CLK_SRC_HSE)
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d125      	bne.n	8001448 <RCC_SetClkSts+0xbc>
	{
		/***Clock type is HSE***/
		switch(Copy_Status)
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <RCC_SetClkSts+0x7c>
 8001402:	2b01      	cmp	r3, #1
 8001404:	d016      	beq.n	8001434 <RCC_SetClkSts+0xa8>
 8001406:	e01c      	b.n	8001442 <RCC_SetClkSts+0xb6>
		{
		/*HSE ON*/
		case RCC_ON :		RCC->RCC_CR |= ( SET_MASK << CR_HSEON );
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <RCC_SetClkSts+0x12c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <RCC_SetClkSts+0x12c>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
		/*Waiting the HSE ready flag*/
		while( ( ( ( RCC->RCC_CR >> CR_HSERDY ) & GET_MASK ) != HSE_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 8001414:	e002      	b.n	800141c <RCC_SetClkSts+0x90>
		{
			/*counter(Time Out)*/
			Local_TimeOut++;
 8001416:	89bb      	ldrh	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	81bb      	strh	r3, [r7, #12]
		while( ( ( ( RCC->RCC_CR >> CR_HSERDY ) & GET_MASK ) != HSE_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <RCC_SetClkSts+0x12c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0c5b      	lsrs	r3, r3, #17
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b01      	cmp	r3, #1
 8001428:	d03c      	beq.n	80014a4 <RCC_SetClkSts+0x118>
 800142a:	89bb      	ldrh	r3, [r7, #12]
 800142c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001430:	d9f1      	bls.n	8001416 <RCC_SetClkSts+0x8a>
		}
		break;
 8001432:	e037      	b.n	80014a4 <RCC_SetClkSts+0x118>
		/*HSE OFF*/
		case RCC_OFF:	RCC->RCC_CR &=~ ( SET_MASK << CR_HSEON );	break;
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <RCC_SetClkSts+0x12c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <RCC_SetClkSts+0x12c>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e033      	b.n	80014aa <RCC_SetClkSts+0x11e>

		default : Local_ErrorState = NOK;							break;
 8001442:	2301      	movs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e030      	b.n	80014aa <RCC_SetClkSts+0x11e>
		}
	}
	else if(Copy_ClockType == CLK_SRC_HSI)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d125      	bne.n	800149a <RCC_SetClkSts+0x10e>
	{
		/***Clock type is HSI***/
		switch(Copy_Status)
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <RCC_SetClkSts+0xce>
 8001454:	2b01      	cmp	r3, #1
 8001456:	d016      	beq.n	8001486 <RCC_SetClkSts+0xfa>
 8001458:	e01c      	b.n	8001494 <RCC_SetClkSts+0x108>
		{
		/*HSI ON*/
		case RCC_ON :		RCC->RCC_CR |= ( SET_MASK << CR_HSION );
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <RCC_SetClkSts+0x12c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <RCC_SetClkSts+0x12c>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]
		/*Waiting the HSI ready flag*/
		while( ( ( ( RCC->RCC_CR >> CR_HSIRDY ) & GET_MASK ) != HSI_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 8001466:	e002      	b.n	800146e <RCC_SetClkSts+0xe2>
		{
			/*counter(Time Out)*/
			Local_TimeOut++;
 8001468:	89bb      	ldrh	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	81bb      	strh	r3, [r7, #12]
		while( ( ( ( RCC->RCC_CR >> CR_HSIRDY ) & GET_MASK ) != HSI_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <RCC_SetClkSts+0x12c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d015      	beq.n	80014a8 <RCC_SetClkSts+0x11c>
 800147c:	89bb      	ldrh	r3, [r7, #12]
 800147e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001482:	d9f1      	bls.n	8001468 <RCC_SetClkSts+0xdc>
		}
		break;
 8001484:	e010      	b.n	80014a8 <RCC_SetClkSts+0x11c>
		/*HSI OFF*/
		case RCC_OFF:	RCC->RCC_CR &=~ ( SET_MASK << CR_HSION );	break;
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <RCC_SetClkSts+0x12c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <RCC_SetClkSts+0x12c>)
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00a      	b.n	80014aa <RCC_SetClkSts+0x11e>

		default : Local_ErrorState = NOK;							break;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e007      	b.n	80014aa <RCC_SetClkSts+0x11e>
		}
	}
	else
	{
		Local_ErrorState = NOK;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e004      	b.n	80014aa <RCC_SetClkSts+0x11e>
		break;
 80014a0:	bf00      	nop
 80014a2:	e002      	b.n	80014aa <RCC_SetClkSts+0x11e>
		break;
 80014a4:	bf00      	nop
 80014a6:	e000      	b.n	80014aa <RCC_SetClkSts+0x11e>
		break;
 80014a8:	bf00      	nop
	}
	return Local_ErrorState;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]

}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <RCC_SetSysClk>:
 * @brief:	Set system clock (PLL, HSE, HSI)
 * @param:	Copy_ClockType		(enum: @ClockSrc_t)
 * @retval:	Local_ErrorState	(enum: @ErrorState_t)
 * */
ErrorState_t RCC_SetSysClk(ClockSrc_t Copy_ClockType)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	ErrorState_t Local_ErrorState = OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
	switch(Copy_ClockType)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d020      	beq.n	8001512 <RCC_SetSysClk+0x56>
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	dc2b      	bgt.n	800152c <RCC_SetSysClk+0x70>
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <RCC_SetSysClk+0x22>
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d00d      	beq.n	80014f8 <RCC_SetSysClk+0x3c>
 80014dc:	e026      	b.n	800152c <RCC_SetSysClk+0x70>
	{
	/* PLL selected as system clock*/
	case CLK_SRC_PLL:

		RCC->RCC_CFGR |=  ( SET_MASK << CFGR_SW1 );
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <RCC_SetSysClk+0x84>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <RCC_SetSysClk+0x84>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &=~ ( SET_MASK << CFGR_SW0 );
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <RCC_SetSysClk+0x84>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4a14      	ldr	r2, [pc, #80]	; (8001540 <RCC_SetSysClk+0x84>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6053      	str	r3, [r2, #4]

		break;
 80014f6:	e01c      	b.n	8001532 <RCC_SetSysClk+0x76>
		/* HSE selected as system clock*/
	case CLK_SRC_HSE:

		RCC->RCC_CFGR &=~ ( SET_MASK << CFGR_SW1 );
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <RCC_SetSysClk+0x84>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a10      	ldr	r2, [pc, #64]	; (8001540 <RCC_SetSysClk+0x84>)
 80014fe:	f023 0302 	bic.w	r3, r3, #2
 8001502:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR |=  ( SET_MASK << CFGR_SW0 );
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <RCC_SetSysClk+0x84>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <RCC_SetSysClk+0x84>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6053      	str	r3, [r2, #4]

		break;
 8001510:	e00f      	b.n	8001532 <RCC_SetSysClk+0x76>
		/*HSI selected as system clock*/
	case CLK_SRC_HSI:

		RCC->RCC_CFGR &=~ ( SET_MASK << CFGR_SW1 );
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <RCC_SetSysClk+0x84>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <RCC_SetSysClk+0x84>)
 8001518:	f023 0302 	bic.w	r3, r3, #2
 800151c:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &=~ ( SET_MASK << CFGR_SW0 );
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <RCC_SetSysClk+0x84>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <RCC_SetSysClk+0x84>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	6053      	str	r3, [r2, #4]

		break;
 800152a:	e002      	b.n	8001532 <RCC_SetSysClk+0x76>

	default: Local_ErrorState = NOK;	break;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	bf00      	nop
	}

	return Local_ErrorState;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000

08001544 <RCC_APB1EnableClock>:
 * @brief:	Enable APB1 clock for peripheral
 * @param:	Copy_Peripheral		(ENUM: @APB1Peripherals_t)
 * @retval:	void
 * */
void RCC_APB1EnableClock(APB1Peripherals_t Copy_Peripheral)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_APB1ENR |= ( SET_MASK << Copy_Peripheral );
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <RCC_APB1EnableClock+0x28>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	4611      	mov	r1, r2
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <RCC_APB1EnableClock+0x28>)
 800155e:	430b      	orrs	r3, r1
 8001560:	61d3      	str	r3, [r2, #28]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000

08001570 <RCC_APB2EnableClock>:
 * @brief:	Enable APB2 clock for peripheral
 * @param:	Copy_Peripheral		(ENUM: @APB2Peripherals_t)
 * @retval:	void
 * */
void RCC_APB2EnableClock(APB2Peripherals_t Copy_Peripheral)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_APB2ENR |= ( SET_MASK << Copy_Peripheral );
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <RCC_APB2EnableClock+0x28>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	2101      	movs	r1, #1
 8001582:	fa01 f202 	lsl.w	r2, r1, r2
 8001586:	4611      	mov	r1, r2
 8001588:	4a03      	ldr	r2, [pc, #12]	; (8001598 <RCC_APB2EnableClock+0x28>)
 800158a:	430b      	orrs	r3, r1
 800158c:	6193      	str	r3, [r2, #24]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40021000 	.word	0x40021000

0800159c <SYSTIC_delay_ms>:
#include "ErrType.h"
#include "BIT_MATH.h"


uint8_t SYSTIC_delay_ms(uint32_t time)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    uint8_t Local_u8ErrorState = OK ;
 80015a4:	2300      	movs	r3, #0
 80015a6:	72fb      	strb	r3, [r7, #11]
    uint32_t Local_u32Value =(time * 1000 *AHB_CLOCK /8);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	08db      	lsrs	r3, r3, #3
 80015b4:	60fb      	str	r3, [r7, #12]
    /*check if the value > the register available bits*/
    if(Local_u32Value > 0xffffff)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015bc:	d302      	bcc.n	80015c4 <SYSTIC_delay_ms+0x28>
    {
    	Local_u32Value = 0xffffff ;
 80015be:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80015c2:	60fb      	str	r3, [r7, #12]
    }
    /*Select the SYSTIC CLOCK to the processor clock source AHB /8 */
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_CLKSOURCE);
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <SYSTIC_delay_ms+0x98>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <SYSTIC_delay_ms+0x98>)
 80015ca:	f023 0304 	bic.w	r3, r3, #4
 80015ce:	6013      	str	r3, [r2, #0]
    /*Reset the count flag*/
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_COUNTFLAG);
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <SYSTIC_delay_ms+0x98>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a17      	ldr	r2, [pc, #92]	; (8001634 <SYSTIC_delay_ms+0x98>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
    /* Clear the value in the SysTick reload value register */
    SYSTIC->STK_LOAD &= 0b11111111<<24;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <SYSTIC_delay_ms+0x98>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <SYSTIC_delay_ms+0x98>)
 80015e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80015e6:	6053      	str	r3, [r2, #4]
    /*set the value in the SysTick reload value register */
    SYSTIC->STK_LOAD |=Local_u32Value;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <SYSTIC_delay_ms+0x98>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4911      	ldr	r1, [pc, #68]	; (8001634 <SYSTIC_delay_ms+0x98>)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
    /* Clear the VAL Register to load the start of the down counter from the LOAD register */
    SYSTIC->STK_VAL &=0b11111111<<24;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <SYSTIC_delay_ms+0x98>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <SYSTIC_delay_ms+0x98>)
 80015fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80015fe:	6093      	str	r3, [r2, #8]
    /*Enable SysTick*/
    SET_BIT(SYSTIC->STK_CTRL,STK_CTRL_ENABLE);
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <SYSTIC_delay_ms+0x98>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <SYSTIC_delay_ms+0x98>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6013      	str	r3, [r2, #0]
    /*Waiting flag */
    while((GET_BIT(SYSTIC->STK_CTRL,STK_CTRL_COUNTFLAG))==0)
 800160c:	bf00      	nop
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <SYSTIC_delay_ms+0x98>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f9      	beq.n	800160e <SYSTIC_delay_ms+0x72>
    {
    	/*Code*/
    }

    /*disable SysTick*/
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_ENABLE);
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <SYSTIC_delay_ms+0x98>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <SYSTIC_delay_ms+0x98>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6013      	str	r3, [r2, #0]

    return Local_u8ErrorState;
 8001626:	7afb      	ldrb	r3, [r7, #11]

}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <USART_Init>:
 * @param:	Copy_InitConfig		  pointer to (STRUCT: @USART_ConfigReg_t)
 * @retval:	Local_ErrorState				 (ENUM: @ErrorState_t)
 *			USART status
 * */
ErrorState_t USART_Init(const USART_ConfigReg_t* Copy_InitConfig)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

	float USART_DIV = 0;
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	613b      	str	r3, [r7, #16]

	uint32_t DIV_Fraction = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]

	ErrorState_t Local_ErrorState = OK;
 800164a:	2300      	movs	r3, #0
 800164c:	75fb      	strb	r3, [r7, #23]

	if(Copy_InitConfig == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d103      	bne.n	800165c <USART_Init+0x24>
	{
		/*Null Pointer*/
		Local_ErrorState = NULL_PTR_ERR;
 8001654:	2302      	movs	r3, #2
 8001656:	75fb      	strb	r3, [r7, #23]
		return Local_ErrorState;
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	e1b8      	b.n	80019ce <USART_Init+0x396>
	}

	/*Check the configurations*/
	if( ( Copy_InitConfig->USART_MODE <= USART_RXTX )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b02      	cmp	r3, #2
 8001662:	f200 81b1 	bhi.w	80019c8 <USART_Init+0x390>
			&& ( Copy_InitConfig->USART_MODE >= USART_RX )
			&& ( Copy_InitConfig->USART_STOPBITS <= _1P5_STOP_BIT )
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7a1b      	ldrb	r3, [r3, #8]
			&& ( Copy_InitConfig->USART_STOPBITS >= _1_STOP_BIT )
 800166a:	2b03      	cmp	r3, #3
 800166c:	f200 81ac 	bhi.w	80019c8 <USART_Init+0x390>
			&& ( Copy_InitConfig->USART_WORDLENGTH <= _9_DATA_BITS )
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7a5b      	ldrb	r3, [r3, #9]
			&& ( Copy_InitConfig->USART_WORDLENGTH >= _8_DATA_BITS )
 8001674:	2b01      	cmp	r3, #1
 8001676:	f200 81a7 	bhi.w	80019c8 <USART_Init+0x390>
			&& ( Copy_InitConfig->USART_PARITYBIT <= PARITY_CONTROL_ENABLE )
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7a9b      	ldrb	r3, [r3, #10]
			&& ( Copy_InitConfig->USART_PARITYBIT >= PARITY_CONTROL_DISABLE )
 800167e:	2b01      	cmp	r3, #1
 8001680:	f200 81a2 	bhi.w	80019c8 <USART_Init+0x390>
			&& ( Copy_InitConfig->USART_HWFLOWCONTROL <= USART_HW_FLOW_CONTROL_OFF )
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7adb      	ldrb	r3, [r3, #11]
			&& ( Copy_InitConfig->USART_HWFLOWCONTROL >= USART_HW_FLOW_CONTROL_ON )
 8001688:	2b01      	cmp	r3, #1
 800168a:	f200 819d 	bhi.w	80019c8 <USART_Init+0x390>
			&& ( Copy_InitConfig->USART_USARTNUMBER <= USART_NUM5 )
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7b1b      	ldrb	r3, [r3, #12]
			&& ( Copy_InitConfig->USART_USARTNUMBER >= USART_NUM1 )
 8001692:	2b04      	cmp	r3, #4
 8001694:	f200 8198 	bhi.w	80019c8 <USART_Init+0x390>
			&& ( Copy_InitConfig->USART_SYNCHMODE <= CLOCK_ENABLE )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7b5b      	ldrb	r3, [r3, #13]
			&& ( Copy_InitConfig->USART_SYNCHMODE >= CLOCK_DISABLE ) )
 800169c:	2b01      	cmp	r3, #1
 800169e:	f200 8193 	bhi.w	80019c8 <USART_Init+0x390>
	{

		/*Make sure the register is at reset value*/
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1  &=~  CR1_REG_MASK;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7b1b      	ldrb	r3, [r3, #12]
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b95      	ldr	r3, [pc, #596]	; (8001900 <USART_Init+0x2c8>)
 80016aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	7b12      	ldrb	r2, [r2, #12]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4a92      	ldr	r2, [pc, #584]	; (8001900 <USART_Init+0x2c8>)
 80016b8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80016bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016c4:	60d3      	str	r3, [r2, #12]
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR2  &=~  CR2_REG_MASK;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7b1b      	ldrb	r3, [r3, #12]
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b8c      	ldr	r3, [pc, #560]	; (8001900 <USART_Init+0x2c8>)
 80016ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	7b12      	ldrb	r2, [r2, #12]
 80016d8:	4611      	mov	r1, r2
 80016da:	4a89      	ldr	r2, [pc, #548]	; (8001900 <USART_Init+0x2c8>)
 80016dc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80016e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80016e4:	f023 036f 	bic.w	r3, r3, #111	; 0x6f
 80016e8:	6113      	str	r3, [r2, #16]
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR3  &=~  CR3_REG_MASK;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7b1b      	ldrb	r3, [r3, #12]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b83      	ldr	r3, [pc, #524]	; (8001900 <USART_Init+0x2c8>)
 80016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	7b12      	ldrb	r2, [r2, #12]
 80016fc:	4611      	mov	r1, r2
 80016fe:	4a80      	ldr	r2, [pc, #512]	; (8001900 <USART_Init+0x2c8>)
 8001700:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001704:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001708:	f023 0307 	bic.w	r3, r3, #7
 800170c:	6153      	str	r3, [r2, #20]
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_GTPR &=~  GTP_REG_MASK;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7b1b      	ldrb	r3, [r3, #12]
 8001712:	461a      	mov	r2, r3
 8001714:	4b7a      	ldr	r3, [pc, #488]	; (8001900 <USART_Init+0x2c8>)
 8001716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	7b12      	ldrb	r2, [r2, #12]
 8001720:	4611      	mov	r1, r2
 8001722:	4a77      	ldr	r2, [pc, #476]	; (8001900 <USART_Init+0x2c8>)
 8001724:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001728:	0c1b      	lsrs	r3, r3, #16
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	6193      	str	r3, [r2, #24]



		/*word length*/
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 |= ((Copy_InitConfig->USART_WORDLENGTH) << CR1_M);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7b1b      	ldrb	r3, [r3, #12]
 8001732:	461a      	mov	r2, r3
 8001734:	4b72      	ldr	r3, [pc, #456]	; (8001900 <USART_Init+0x2c8>)
 8001736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7a5b      	ldrb	r3, [r3, #9]
 8001740:	031b      	lsls	r3, r3, #12
 8001742:	4619      	mov	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7b1b      	ldrb	r3, [r3, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	4b6d      	ldr	r3, [pc, #436]	; (8001900 <USART_Init+0x2c8>)
 800174c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001750:	430a      	orrs	r2, r1
 8001752:	60da      	str	r2, [r3, #12]

		/*Stop bits*/
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR2 |= ((Copy_InitConfig->USART_STOPBITS) << CR2_STOP0);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7b1b      	ldrb	r3, [r3, #12]
 8001758:	461a      	mov	r2, r3
 800175a:	4b69      	ldr	r3, [pc, #420]	; (8001900 <USART_Init+0x2c8>)
 800175c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7a1b      	ldrb	r3, [r3, #8]
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	4619      	mov	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7b1b      	ldrb	r3, [r3, #12]
 800176e:	4618      	mov	r0, r3
 8001770:	4b63      	ldr	r3, [pc, #396]	; (8001900 <USART_Init+0x2c8>)
 8001772:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001776:	430a      	orrs	r2, r1
 8001778:	611a      	str	r2, [r3, #16]

		/*BAUDRATE*/
		USART_DIV = 8000000 / (float)(16U * Copy_InitConfig->USART_BAUDRATE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fdab 	bl	80002dc <__aeabi_ui2f>
 8001786:	4603      	mov	r3, r0
 8001788:	4619      	mov	r1, r3
 800178a:	485e      	ldr	r0, [pc, #376]	; (8001904 <USART_Init+0x2cc>)
 800178c:	f7fe feb2 	bl	80004f4 <__aeabi_fdiv>
 8001790:	4603      	mov	r3, r0
 8001792:	613b      	str	r3, [r7, #16]
		USART_DIV *= 1000UL;
 8001794:	495c      	ldr	r1, [pc, #368]	; (8001908 <USART_Init+0x2d0>)
 8001796:	6938      	ldr	r0, [r7, #16]
 8001798:	f7fe fdf8 	bl	800038c <__aeabi_fmul>
 800179c:	4603      	mov	r3, r0
 800179e:	613b      	str	r3, [r7, #16]
		/* Set the Mantissa Part */
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_BRR |= (((uint32_t)USART_DIV / 1000UL) << BRR_DIV_MANTISSA);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7b1b      	ldrb	r3, [r3, #12]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b56      	ldr	r3, [pc, #344]	; (8001900 <USART_Init+0x2c8>)
 80017a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ac:	689c      	ldr	r4, [r3, #8]
 80017ae:	6938      	ldr	r0, [r7, #16]
 80017b0:	f7fe ff3c 	bl	800062c <__aeabi_f2uiz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a55      	ldr	r2, [pc, #340]	; (800190c <USART_Init+0x2d4>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	099b      	lsrs	r3, r3, #6
 80017be:	011a      	lsls	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7b1b      	ldrb	r3, [r3, #12]
 80017c4:	4619      	mov	r1, r3
 80017c6:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <USART_Init+0x2c8>)
 80017c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017cc:	4322      	orrs	r2, r4
 80017ce:	609a      	str	r2, [r3, #8]
		/* Calculte the Fraction */
		DIV_Fraction = (uint32_t)USART_DIV % 1000UL;
 80017d0:	6938      	ldr	r0, [r7, #16]
 80017d2:	f7fe ff2b 	bl	800062c <__aeabi_f2uiz>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4a4c      	ldr	r2, [pc, #304]	; (800190c <USART_Init+0x2d4>)
 80017da:	fba2 1203 	umull	r1, r2, r2, r3
 80017de:	0992      	lsrs	r2, r2, #6
 80017e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e4:	fb01 f202 	mul.w	r2, r1, r2
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
		DIV_Fraction = DIV_Fraction * 16;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	60fb      	str	r3, [r7, #12]
		/* get Round */
		DIV_Fraction += 500UL;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80017f8:	60fb      	str	r3, [r7, #12]
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_BRR |= ((uint32_t)(DIV_Fraction / 1000UL) << BRR_DIV_FRACTION);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
 80017fe:	461a      	mov	r2, r3
 8001800:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <USART_Init+0x2c8>)
 8001802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001806:	6899      	ldr	r1, [r3, #8]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4a40      	ldr	r2, [pc, #256]	; (800190c <USART_Init+0x2d4>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	099a      	lsrs	r2, r3, #6
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7b1b      	ldrb	r3, [r3, #12]
 8001816:	4618      	mov	r0, r3
 8001818:	4b39      	ldr	r3, [pc, #228]	; (8001900 <USART_Init+0x2c8>)
 800181a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800181e:	430a      	orrs	r2, r1
 8001820:	609a      	str	r2, [r3, #8]
		/*Mode*/
		switch(Copy_InitConfig->USART_MODE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d048      	beq.n	80018bc <USART_Init+0x284>
 800182a:	2b02      	cmp	r3, #2
 800182c:	dc70      	bgt.n	8001910 <USART_Init+0x2d8>
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <USART_Init+0x200>
 8001832:	2b01      	cmp	r3, #1
 8001834:	d021      	beq.n	800187a <USART_Init+0x242>
		case USART_RXTX:
			/*TRASNMITTER and RECEIVER ENABLE*/
			USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 |= (SET_MASK << CR1_RE);
			USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 |= (SET_MASK << CR1_TE);
			break;
		default: break;
 8001836:	e06b      	b.n	8001910 <USART_Init+0x2d8>
			USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 &=~ (SET_MASK << CR1_TE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7b1b      	ldrb	r3, [r3, #12]
 800183c:	461a      	mov	r2, r3
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <USART_Init+0x2c8>)
 8001840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7b1b      	ldrb	r3, [r3, #12]
 800184a:	4619      	mov	r1, r3
 800184c:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <USART_Init+0x2c8>)
 800184e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001852:	f022 0208 	bic.w	r2, r2, #8
 8001856:	60da      	str	r2, [r3, #12]
			USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 |= (SET_MASK << CR1_RE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7b1b      	ldrb	r3, [r3, #12]
 800185c:	461a      	mov	r2, r3
 800185e:	4b28      	ldr	r3, [pc, #160]	; (8001900 <USART_Init+0x2c8>)
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7b1b      	ldrb	r3, [r3, #12]
 800186a:	4619      	mov	r1, r3
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <USART_Init+0x2c8>)
 800186e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001872:	f042 0204 	orr.w	r2, r2, #4
 8001876:	60da      	str	r2, [r3, #12]
			break;
 8001878:	e04b      	b.n	8001912 <USART_Init+0x2da>
			USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 &=~ (SET_MASK << CR1_RE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7b1b      	ldrb	r3, [r3, #12]
 800187e:	461a      	mov	r2, r3
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <USART_Init+0x2c8>)
 8001882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7b1b      	ldrb	r3, [r3, #12]
 800188c:	4619      	mov	r1, r3
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <USART_Init+0x2c8>)
 8001890:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001894:	f022 0204 	bic.w	r2, r2, #4
 8001898:	60da      	str	r2, [r3, #12]
			USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 |= (SET_MASK << CR1_TE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7b1b      	ldrb	r3, [r3, #12]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <USART_Init+0x2c8>)
 80018a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7b1b      	ldrb	r3, [r3, #12]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <USART_Init+0x2c8>)
 80018b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018b4:	f042 0208 	orr.w	r2, r2, #8
 80018b8:	60da      	str	r2, [r3, #12]
			break;
 80018ba:	e02a      	b.n	8001912 <USART_Init+0x2da>
			USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 |= (SET_MASK << CR1_RE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <USART_Init+0x2c8>)
 80018c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7b1b      	ldrb	r3, [r3, #12]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <USART_Init+0x2c8>)
 80018d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018d6:	f042 0204 	orr.w	r2, r2, #4
 80018da:	60da      	str	r2, [r3, #12]
			USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 |= (SET_MASK << CR1_TE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7b1b      	ldrb	r3, [r3, #12]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <USART_Init+0x2c8>)
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7b1b      	ldrb	r3, [r3, #12]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <USART_Init+0x2c8>)
 80018f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018f6:	f042 0208 	orr.w	r2, r2, #8
 80018fa:	60da      	str	r2, [r3, #12]
			break;
 80018fc:	e009      	b.n	8001912 <USART_Init+0x2da>
 80018fe:	bf00      	nop
 8001900:	2000000c 	.word	0x2000000c
 8001904:	4af42400 	.word	0x4af42400
 8001908:	447a0000 	.word	0x447a0000
 800190c:	10624dd3 	.word	0x10624dd3
		default: break;
 8001910:	bf00      	nop
		}

		/*Parity*/
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 |= ((Copy_InitConfig->USART_PARITYBIT) << CR1_PCE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7b1b      	ldrb	r3, [r3, #12]
 8001916:	461a      	mov	r2, r3
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <USART_Init+0x3a0>)
 800191a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7a9b      	ldrb	r3, [r3, #10]
 8001924:	029b      	lsls	r3, r3, #10
 8001926:	4619      	mov	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7b1b      	ldrb	r3, [r3, #12]
 800192c:	4618      	mov	r0, r3
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <USART_Init+0x3a0>)
 8001930:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001934:	430a      	orrs	r2, r1
 8001936:	60da      	str	r2, [r3, #12]

		/*SYNCHMODE*/
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR2 |= ((Copy_InitConfig->USART_SYNCHMODE) << CR2_CLKEN);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7b1b      	ldrb	r3, [r3, #12]
 800193c:	461a      	mov	r2, r3
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <USART_Init+0x3a0>)
 8001940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7b5b      	ldrb	r3, [r3, #13]
 800194a:	02db      	lsls	r3, r3, #11
 800194c:	4619      	mov	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7b1b      	ldrb	r3, [r3, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <USART_Init+0x3a0>)
 8001956:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800195a:	430a      	orrs	r2, r1
 800195c:	611a      	str	r2, [r3, #16]

		/*HWFLOWCONTROL*/
		if((Copy_InitConfig->USART_HWFLOWCONTROL) == USART_HW_FLOW_CONTROL_ON)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7adb      	ldrb	r3, [r3, #11]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11f      	bne.n	80019a6 <USART_Init+0x36e>
		{
			/*CTS ENABLE*/
			USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR3 |= (SET_MASK << CR3_CTSE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7b1b      	ldrb	r3, [r3, #12]
 800196a:	461a      	mov	r2, r3
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <USART_Init+0x3a0>)
 800196e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7b1b      	ldrb	r3, [r3, #12]
 8001978:	4619      	mov	r1, r3
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <USART_Init+0x3a0>)
 800197c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001984:	615a      	str	r2, [r3, #20]
			/*RTS ENABLE*/
			USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR3 |= (SET_MASK << CR3_RTSE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7b1b      	ldrb	r3, [r3, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <USART_Init+0x3a0>)
 800198e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
 8001998:	4619      	mov	r1, r3
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <USART_Init+0x3a0>)
 800199c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019a4:	615a      	str	r2, [r3, #20]
		}
		/*USART enable */
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_CR1 |= (SET_MASK << CR1_UE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7b1b      	ldrb	r3, [r3, #12]
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <USART_Init+0x3a0>)
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7b1b      	ldrb	r3, [r3, #12]
 80019b8:	4619      	mov	r1, r3
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <USART_Init+0x3a0>)
 80019bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	e001      	b.n	80019cc <USART_Init+0x394>

	}
	else
	{
		Local_ErrorState = NOK;
 80019c8:	2301      	movs	r3, #1
 80019ca:	75fb      	strb	r3, [r7, #23]
	}

	return Local_ErrorState;
 80019cc:	7dfb      	ldrb	r3, [r7, #23]

}
 80019ce:	4618      	mov	r0, r3
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000000c 	.word	0x2000000c

080019dc <USART_ReceiveData>:
 * @param:  Copy_Data			  pointer uint16_t
 * @retval:	Local_ErrorState				 (ENUM: @ErrorState_t)
 *			USART status
 * */
ErrorState_t USART_ReceiveData(const USART_ConfigReg_t* Copy_InitConfig ,uint16_t* Copy_Data)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	ErrorState_t Local_ErrorState = OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
	uint8_t	Local_u8FlagVal=0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73bb      	strb	r3, [r7, #14]

	if((Copy_InitConfig != NULL) && (Copy_Data != NULL))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d031      	beq.n	8001a58 <USART_ReceiveData+0x7c>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d02e      	beq.n	8001a58 <USART_ReceiveData+0x7c>
	{
		/*Clear receive data ready to be read flag*/
		USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_SR &=~ (SET_MASK << SR_RXNE);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	7b1b      	ldrb	r3, [r3, #12]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <USART_ReceiveData+0x8c>)
 8001a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7b1b      	ldrb	r3, [r3, #12]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <USART_ReceiveData+0x8c>)
 8001a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a14:	f022 0220 	bic.w	r2, r2, #32
 8001a18:	601a      	str	r2, [r3, #0]

		USART_ReadIntFlag(Copy_InitConfig->USART_USARTNUMBER, READ_DATA_REG_NOT_EMPTY_FLAG_ID, &Local_u8FlagVal);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7b1b      	ldrb	r3, [r3, #12]
 8001a1e:	f107 020e 	add.w	r2, r7, #14
 8001a22:	2105      	movs	r1, #5
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f889 	bl	8001b3c <USART_ReadIntFlag>
		/*wait till Received data is ready to be read */
		while(Local_u8FlagVal == NOT_READY_FLAG)
 8001a2a:	e007      	b.n	8001a3c <USART_ReceiveData+0x60>
		{
			USART_ReadIntFlag(Copy_InitConfig->USART_USARTNUMBER, READ_DATA_REG_NOT_EMPTY_FLAG_ID, &Local_u8FlagVal);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7b1b      	ldrb	r3, [r3, #12]
 8001a30:	f107 020e 	add.w	r2, r7, #14
 8001a34:	2105      	movs	r1, #5
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f880 	bl	8001b3c <USART_ReadIntFlag>
		while(Local_u8FlagVal == NOT_READY_FLAG)
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f4      	beq.n	8001a2c <USART_ReceiveData+0x50>
		}
		/*Receive data from DR*/
		*Copy_Data = USARTx[Copy_InitConfig->USART_USARTNUMBER]->USART_DR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7b1b      	ldrb	r3, [r3, #12]
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <USART_ReceiveData+0x8c>)
 8001a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	e001      	b.n	8001a5c <USART_ReceiveData+0x80>
	}
	else
	{
		Local_ErrorState = NULL_PTR_ERR;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorState;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000000c 	.word	0x2000000c

08001a6c <USART_IRQ_Handler>:
 * @brief: Handle the IRQ interrupt
 * @param:	USART_NUM		    (ENUM: @USART_PrephNumber)
 * @retval:	void
 * */
void USART_IRQ_Handler( USART_PrephNumber USART_NUM)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	uint8_t FlagVal=0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
	/*check if Received data is ready to be read flag is set*/
	USART_ReadIntFlag(USART_NUM, READ_DATA_REG_NOT_EMPTY_FLAG_ID, &FlagVal);
 8001a7a:	f107 020f 	add.w	r2, r7, #15
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2105      	movs	r1, #5
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f85a 	bl	8001b3c <USART_ReadIntFlag>
	if(FlagVal == READY_FLAG)
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d11f      	bne.n	8001ace <USART_IRQ_Handler+0x62>
	{
		/*read the received data*/
		*Global_u16ReceiveData[USART_NUM] = USARTx[USART_NUM]->USART_DR;
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <USART_IRQ_Handler+0xc4>)
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4a26      	ldr	r2, [pc, #152]	; (8001b34 <USART_IRQ_Handler+0xc8>)
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	b28a      	uxth	r2, r1
 8001aa2:	801a      	strh	r2, [r3, #0]

		if(G_pvCallBackFunc[USART_NUM][READ_DATA_REG_NOT_EMPTY_FLAG_ID] != NULL)
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	4924      	ldr	r1, [pc, #144]	; (8001b38 <USART_IRQ_Handler+0xcc>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3314      	adds	r3, #20
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <USART_IRQ_Handler+0x62>
		{
			G_pvCallBackFunc[USART_NUM][READ_DATA_REG_NOT_EMPTY_FLAG_ID]();
 8001aba:	79fa      	ldrb	r2, [r7, #7]
 8001abc:	491e      	ldr	r1, [pc, #120]	; (8001b38 <USART_IRQ_Handler+0xcc>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3314      	adds	r3, #20
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4798      	blx	r3
		}
	}

	/*check if Transmission complete flag is set*/
	FlagVal=0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
	USART_ReadIntFlag(USART_NUM, TRANSMISSION_COMPLETE_FLAG_ID, &FlagVal);
 8001ad2:	f107 020f 	add.w	r2, r7, #15
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2106      	movs	r1, #6
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f82e 	bl	8001b3c <USART_ReadIntFlag>
	if(FlagVal == READY_FLAG)
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d120      	bne.n	8001b28 <USART_IRQ_Handler+0xbc>
	{
		/*Clear transmit complete flag*/
		USARTx[USART_NUM]->USART_SR &=~ (SET_MASK << SR_TC);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <USART_IRQ_Handler+0xc4>)
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	490f      	ldr	r1, [pc, #60]	; (8001b30 <USART_IRQ_Handler+0xc4>)
 8001af4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afc:	601a      	str	r2, [r3, #0]
		if(G_pvCallBackFunc[USART_NUM][TRANSMISSION_COMPLETE_FLAG_ID] != NULL)
 8001afe:	79fa      	ldrb	r2, [r7, #7]
 8001b00:	490d      	ldr	r1, [pc, #52]	; (8001b38 <USART_IRQ_Handler+0xcc>)
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3318      	adds	r3, #24
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <USART_IRQ_Handler+0xbc>
		{
			G_pvCallBackFunc[USART_NUM][TRANSMISSION_COMPLETE_FLAG_ID]();
 8001b14:	79fa      	ldrb	r2, [r7, #7]
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <USART_IRQ_Handler+0xcc>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	3318      	adds	r3, #24
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4798      	blx	r3
		}
	}

}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2000000c 	.word	0x2000000c
 8001b34:	20000150 	.word	0x20000150
 8001b38:	2000009c 	.word	0x2000009c

08001b3c <USART_ReadIntFlag>:
 * @param:	Copy_u8ITFlagValue		uint8_t pointer to save the flag value
 * @retval:	Local_ErrorState		(ENUM: @ErrorState_t)
 *			USART status
 * */
ErrorState_t USART_ReadIntFlag(USART_PrephNumber Copy_USARTNumber ,USART_FlagID_t Copy_ITFlagID ,uint8_t* Copy_u8ITFlagValue)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	603a      	str	r2, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	71bb      	strb	r3, [r7, #6]

	ErrorState_t Local_ErrorState = OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]

	if(Copy_u8ITFlagValue == NULL)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <USART_ReadIntFlag+0x22>
	{
		Local_ErrorState = NULL_PTR_ERR;
 8001b56:	2302      	movs	r3, #2
 8001b58:	73fb      	strb	r3, [r7, #15]
		return Local_ErrorState;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	e00e      	b.n	8001b7c <USART_ReadIntFlag+0x40>
	}
	else
	{
		/*GET BIT VALUE*/
		*Copy_u8ITFlagValue = ( ( (USARTx[Copy_USARTNumber]->USART_SR) >> Copy_ITFlagID ) & READ_VAL_MASK );
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <USART_ReadIntFlag+0x4c>)
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	701a      	strb	r2, [r3, #0]

	}

	return Local_ErrorState;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2000000c 	.word	0x2000000c

08001b8c <USART1_IRQHandler>:
 ****************** ### INTERRUPT HANDLER SECTION ### ***************************
 ********************************************************************************/

/*USART1 INTERRUPT HANDLER*/
void USART1_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(USART_NUM1);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff ff6b 	bl	8001a6c <USART_IRQ_Handler>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <USART2_IRQHandler>:
/*USART2 INTERRUPT HANDLER*/
void USART2_IRQHandler(void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(USART_NUM2);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f7ff ff64 	bl	8001a6c <USART_IRQ_Handler>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <USART3_IRQHandler>:
/*USART3 INTERRUPT HANDLER*/
void USART3_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(USART_NUM3);
 8001bac:	2002      	movs	r0, #2
 8001bae:	f7ff ff5d 	bl	8001a6c <USART_IRQ_Handler>
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <UART4_IRQHandler>:
/*USART4 INTERRUPT HANDLER*/
void UART4_IRQHandler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(USART_NUM4);
 8001bba:	2003      	movs	r0, #3
 8001bbc:	f7ff ff56 	bl	8001a6c <USART_IRQ_Handler>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <UART5_IRQHandler>:
/*USART5 INTERRUPT HANDLER*/
void UART5_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(USART_NUM5);
 8001bc8:	2004      	movs	r0, #4
 8001bca:	f7ff ff4f 	bl	8001a6c <USART_IRQ_Handler>
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <main>:

volatile RECEIVING_VAL_t RECEIVING_VALUE = NO_RECEIVE ;


int main(void)
{
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b08f      	sub	sp, #60	; 0x3c
 8001bd8:	af00      	add	r7, sp, #0

	RCC_Clock_Init();
 8001bda:	f7fe fd85 	bl	80006e8 <RCC_Clock_Init>
	Pins_Init();
 8001bde:	f7fe fd9d 	bl	800071c <Pins_Init>
	CLCD_voidPinInit();
 8001be2:	f7fe ff25 	bl	8000a30 <CLCD_voidPinInit>
	CLCD_voidInit();
 8001be6:	f7ff f804 	bl	8000bf2 <CLCD_voidInit>
	EXTI13_Init();
 8001bea:	f7fe fdd5 	bl	8000798 <EXTI13_Init>
	Interrupts_Init();
 8001bee:	f7fe fdeb 	bl	80007c8 <Interrupts_Init>
	//Receive_withInterrupt();
	USART_ConfigReg_t Local_USART2Tx={
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <main+0xdc>)
 8001bf4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				.USART_STOPBITS = _1_STOP_BIT,
				.USART_SYNCHMODE = CLOCK_DISABLE,
				.USART_USARTNUMBER = USART_NUM2,
				.USART_WORDLENGTH = _8_DATA_BITS
		};
	USART_Init(&Local_USART2Tx);
 8001bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fd18 	bl	8001638 <USART_Init>
uint16_t TestArr[15];


for(uint8_t count=0 ;count<15 ;count++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c0e:	e015      	b.n	8001c3c <main+0x68>
{
	USART_ReceiveData(&Local_USART2Tx , &TestArr);
 8001c10:	1d3a      	adds	r2, r7, #4
 8001c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fedf 	bl	80019dc <USART_ReceiveData>
	CLCD_voidSendNumber(TestArr[count]);
 8001c1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	3338      	adds	r3, #56	; 0x38
 8001c26:	443b      	add	r3, r7
 8001c28:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f821 	bl	8000c74 <CLCD_voidSendNumber>
for(uint8_t count=0 ;count<15 ;count++)
 8001c32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c36:	3301      	adds	r3, #1
 8001c38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c40:	2b0e      	cmp	r3, #14
 8001c42:	d9e5      	bls.n	8001c10 <main+0x3c>
}
    /* Loop forever */
	for(;;)
	{
		while(!RECEIVING_VALUE);
 8001c44:	bf00      	nop
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <main+0xe0>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0fa      	beq.n	8001c46 <main+0x72>
		switch (RECEIVING_VALUE)
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <main+0xe0>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d826      	bhi.n	8001caa <main+0xd6>
 8001c5c:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <main+0x90>)
 8001c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c62:	bf00      	nop
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001c9d 	.word	0x08001c9d
 8001c6c:	08001c7f 	.word	0x08001c7f
 8001c70:	08001c8f 	.word	0x08001c8f
		{
			case RED_LED_RECEIVED:
				TURN_ON_LED();
 8001c74:	f7fe fe9a 	bl	80009ac <TURN_ON_LED>
				CLEAR_DISPLAY();
 8001c78:	f7fe fea0 	bl	80009bc <CLEAR_DISPLAY>
				while(1);
 8001c7c:	e7fe      	b.n	8001c7c <main+0xa8>

				break;
			case ALARM_RECEIVED :
				DisplayAlarmInfo();
 8001c7e:	f7fe fdb1 	bl	80007e4 <DisplayAlarmInfo>
				BZR_Off();
 8001c82:	f7fe fecc 	bl	8000a1e <BZR_Off>

				RECEIVING_VALUE= NO_RECEIVE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <main+0xe0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
				break;
 8001c8c:	e00e      	b.n	8001cac <main+0xd8>

			case DISPLAY_RECEIVED :
				Display_Date();
 8001c8e:	f7fe fe1f 	bl	80008d0 <Display_Date>
				/*Count_Time();*/
				_delay_1s();
 8001c92:	f7fe fe99 	bl	80009c8 <_delay_1s>
				Display_Time();
 8001c96:	f7fe fde9 	bl	800086c <Display_Time>

				break ;
 8001c9a:	e007      	b.n	8001cac <main+0xd8>

			case GREEN_LED_RECEIVED :

					LED_On(PORTC, PIN15) ;
 8001c9c:	210f      	movs	r1, #15
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f7ff fb37 	bl	8001312 <LED_On>

					RECEIVING_VALUE =NO_RECEIVE ;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <main+0xe0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
			default:
				break;
 8001caa:	bf00      	nop
		while(!RECEIVING_VALUE);
 8001cac:	e7ca      	b.n	8001c44 <main+0x70>
 8001cae:	bf00      	nop
 8001cb0:	08001dc4 	.word	0x08001dc4
 8001cb4:	20000164 	.word	0x20000164

08001cb8 <EXTI13_ISR>:

    Receive_withInterrupt();
}

void EXTI13_ISR()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	BZR_On();
 8001cbc:	f7fe fea6 	bl	8000a0c <BZR_On>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cce:	490d      	ldr	r1, [pc, #52]	; (8001d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <LoopForever+0xe>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ce4:	4c0a      	ldr	r4, [pc, #40]	; (8001d10 <LoopForever+0x16>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cf2:	f000 f811 	bl	8001d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cf6:	f7ff ff6d 	bl	8001bd4 <main>

08001cfa <LoopForever>:

LoopForever:
  b LoopForever
 8001cfa:	e7fe      	b.n	8001cfa <LoopForever>
  ldr   r0, =_estack
 8001cfc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001d08:	08001ddc 	.word	0x08001ddc
  ldr r2, =_sbss
 8001d0c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001d10:	20000168 	.word	0x20000168

08001d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC1_2_IRQHandler>
	...

08001d18 <__libc_init_array>:
 8001d18:	b570      	push	{r4, r5, r6, lr}
 8001d1a:	2600      	movs	r6, #0
 8001d1c:	4d0c      	ldr	r5, [pc, #48]	; (8001d50 <__libc_init_array+0x38>)
 8001d1e:	4c0d      	ldr	r4, [pc, #52]	; (8001d54 <__libc_init_array+0x3c>)
 8001d20:	1b64      	subs	r4, r4, r5
 8001d22:	10a4      	asrs	r4, r4, #2
 8001d24:	42a6      	cmp	r6, r4
 8001d26:	d109      	bne.n	8001d3c <__libc_init_array+0x24>
 8001d28:	f000 f81a 	bl	8001d60 <_init>
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	4d0a      	ldr	r5, [pc, #40]	; (8001d58 <__libc_init_array+0x40>)
 8001d30:	4c0a      	ldr	r4, [pc, #40]	; (8001d5c <__libc_init_array+0x44>)
 8001d32:	1b64      	subs	r4, r4, r5
 8001d34:	10a4      	asrs	r4, r4, #2
 8001d36:	42a6      	cmp	r6, r4
 8001d38:	d105      	bne.n	8001d46 <__libc_init_array+0x2e>
 8001d3a:	bd70      	pop	{r4, r5, r6, pc}
 8001d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d40:	4798      	blx	r3
 8001d42:	3601      	adds	r6, #1
 8001d44:	e7ee      	b.n	8001d24 <__libc_init_array+0xc>
 8001d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d4a:	4798      	blx	r3
 8001d4c:	3601      	adds	r6, #1
 8001d4e:	e7f2      	b.n	8001d36 <__libc_init_array+0x1e>
 8001d50:	08001dd4 	.word	0x08001dd4
 8001d54:	08001dd4 	.word	0x08001dd4
 8001d58:	08001dd4 	.word	0x08001dd4
 8001d5c:	08001dd8 	.word	0x08001dd8

08001d60 <_init>:
 8001d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d62:	bf00      	nop
 8001d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d66:	bc08      	pop	{r3}
 8001d68:	469e      	mov	lr, r3
 8001d6a:	4770      	bx	lr

08001d6c <_fini>:
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6e:	bf00      	nop
 8001d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d72:	bc08      	pop	{r3}
 8001d74:	469e      	mov	lr, r3
 8001d76:	4770      	bx	lr
