
ALARM_SYSTEM_BLUE_BILL_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001214  08001214  00011214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001254  08001254  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001254  08001254  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001254  08001254  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001254  08001254  00011254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800125c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001268  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001268  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002dae  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d62  00000000  00000000  00022e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000368  00000000  00000000  00023b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000271  00000000  00000000  00023ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000999  00000000  00000000  00024161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003c73  00000000  00000000  00024afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005d77  00000000  00000000  0002876d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000abc  00000000  00000000  0002e4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0002efa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	080011fc 	.word	0x080011fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	080011fc 	.word	0x080011fc

08000170 <RCC_Clock_Init>:


uint8_t RecivedData[14] ={0};

void RCC_Clock_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	RCC_SetClkSts(CLK_SRC_HSE,RCC_ON);
 8000174:	2100      	movs	r1, #0
 8000176:	2001      	movs	r0, #1
 8000178:	f000 fde8 	bl	8000d4c <RCC_SetClkSts>
	RCC_SetSysClk(CLK_SRC_HSE);
 800017c:	2001      	movs	r0, #1
 800017e:	f000 fe7d 	bl	8000e7c <RCC_SetSysClk>
    RCC_APB2EnableClock(APB2_IOPA);
 8000182:	2002      	movs	r0, #2
 8000184:	f000 febe 	bl	8000f04 <RCC_APB2EnableClock>
    RCC_APB2EnableClock(APB2_IOPB);
 8000188:	2003      	movs	r0, #3
 800018a:	f000 febb 	bl	8000f04 <RCC_APB2EnableClock>
	RCC_APB2EnableClock(APB2_IOPC);
 800018e:	2004      	movs	r0, #4
 8000190:	f000 feb8 	bl	8000f04 <RCC_APB2EnableClock>
/*	RCC_APB2EnableClock(APB2_SPI1);*/
	RCC_APB2EnableClock(APB2_AFIO);
 8000194:	2000      	movs	r0, #0
 8000196:	f000 feb5 	bl	8000f04 <RCC_APB2EnableClock>
	RCC_APB2EnableClock(APB2_USART);
 800019a:	200e      	movs	r0, #14
 800019c:	f000 feb2 	bl	8000f04 <RCC_APB2EnableClock>
}
 80001a0:	bf00      	nop
 80001a2:	bd80      	pop	{r7, pc}

080001a4 <Pins_Init>:
void Pins_Init(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0
	/* RED LED1 Configuration*/
	LED_Init(PORTA ,PIN2);
 80001aa:	2102      	movs	r1, #2
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 fd63 	bl	8000c78 <LED_Init>
	/* GREEN LED Configuration*/
	LED_Init(PORTC ,PIN15);
 80001b2:	210f      	movs	r1, #15
 80001b4:	2002      	movs	r0, #2
 80001b6:	f000 fd5f 	bl	8000c78 <LED_Init>
	LED_Init(PORTC ,PIN14);
 80001ba:	210e      	movs	r1, #14
 80001bc:	2002      	movs	r0, #2
 80001be:	f000 fd5b 	bl	8000c78 <LED_Init>
	/*BUZZER Configuration*/
	BZR_Init();
 80001c2:	f000 f931 	bl	8000428 <BZR_Init>

	/* Initialize the Read Pin */
	GPIO_PinConfig_t Read_Pin = {.Port = PORTB, .PinNum = PIN13, .Mode = INPUT,  .Input = PULLUP_PULLDOWN};
 80001c6:	f107 0310 	add.w	r3, r7, #16
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	711a      	strb	r2, [r3, #4]
 80001d0:	2301      	movs	r3, #1
 80001d2:	743b      	strb	r3, [r7, #16]
 80001d4:	230d      	movs	r3, #13
 80001d6:	747b      	strb	r3, [r7, #17]
 80001d8:	2302      	movs	r3, #2
 80001da:	74fb      	strb	r3, [r7, #19]

	/* Initialize the EXTI Pin */
	GPIO_u8PinInit(&Read_Pin);
 80001dc:	f107 0310 	add.w	r3, r7, #16
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fbed 	bl	80009c0 <GPIO_u8PinInit>
    /*USART PINS Configuration*/
	GPIO_PinConfig_t Local_TxConfig={
 80001e6:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <Pins_Init+0x7c>)
 80001e8:	f107 0308 	add.w	r3, r7, #8
 80001ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001f0:	6018      	str	r0, [r3, #0]
 80001f2:	3304      	adds	r3, #4
 80001f4:	7019      	strb	r1, [r3, #0]
				.PinNum = PIN9,
				.Mode = OUTPUT_SPEED_10MHz,
				.Output = AF_PUSH_PULL,
				.Input = FLOATING
		};
	GPIO_u8PinInit(&Local_TxConfig);
 80001f6:	f107 0308 	add.w	r3, r7, #8
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fbe0 	bl	80009c0 <GPIO_u8PinInit>
	GPIO_PinConfig_t Local_RxConfig={
 8000200:	4a08      	ldr	r2, [pc, #32]	; (8000224 <Pins_Init+0x80>)
 8000202:	463b      	mov	r3, r7
 8000204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000208:	6018      	str	r0, [r3, #0]
 800020a:	3304      	adds	r3, #4
 800020c:	7019      	strb	r1, [r3, #0]
				.PinNum = PIN10,
				.Mode = INPUT,
				.Output = AF_PUSH_PULL,
				.Input = FLOATING
		};
	GPIO_u8PinInit(&Local_RxConfig);
 800020e:	463b      	mov	r3, r7
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fbd5 	bl	80009c0 <GPIO_u8PinInit>

}
 8000216:	bf00      	nop
 8000218:	3718      	adds	r7, #24
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	08001214 	.word	0x08001214
 8000224:	0800121c 	.word	0x0800121c

08000228 <Interrupts_Init>:

void Interrupts_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(NVIC_IRQ_SPI1);
 800022c:	2023      	movs	r0, #35	; 0x23
 800022e:	f000 fd63 	bl	8000cf8 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(NVIC_IRQ_EXTI15_10);
 8000232:	2028      	movs	r0, #40	; 0x28
 8000234:	f000 fd60 	bl	8000cf8 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(NVIC_IRQ_USART2);
 8000238:	2026      	movs	r0, #38	; 0x26
 800023a:	f000 fd5d 	bl	8000cf8 <NVIC_EnableIRQ>
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <DisplayAlarmInfo>:
void DisplayAlarmInfo(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
	CLCD_voidSendCmd(1);
 800024a:	2001      	movs	r0, #1
 800024c:	f000 f9af 	bl	80005ae <CLCD_voidSendCmd>

	uint8_t counter=0;
 8000250:	2300      	movs	r3, #0
 8000252:	71fb      	strb	r3, [r7, #7]
	for(counter=1 ; RecivedData[counter] != 13 ;counter++)
 8000254:	2301      	movs	r3, #1
 8000256:	71fb      	strb	r3, [r7, #7]
 8000258:	e01b      	b.n	8000292 <DisplayAlarmInfo+0x4e>
	{
		if(counter == 1)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d10f      	bne.n	8000280 <DisplayAlarmInfo+0x3c>
		{
			CLCD_u8SendString("Alarm Number=");
 8000260:	4818      	ldr	r0, [pc, #96]	; (80002c4 <DisplayAlarmInfo+0x80>)
 8000262:	f000 f9f8 	bl	8000656 <CLCD_u8SendString>
			CLCD_voidSendData(RecivedData[counter] + 48);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <DisplayAlarmInfo+0x84>)
 800026a:	5cd3      	ldrb	r3, [r2, r3]
 800026c:	3330      	adds	r3, #48	; 0x30
 800026e:	b2db      	uxtb	r3, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f9b8 	bl	80005e6 <CLCD_voidSendData>
			CLCD_voidGoToXY(1, 0);
 8000276:	2100      	movs	r1, #0
 8000278:	2001      	movs	r0, #1
 800027a:	f000 fa69 	bl	8000750 <CLCD_voidGoToXY>
 800027e:	e005      	b.n	800028c <DisplayAlarmInfo+0x48>
		}
		else
		{
			CLCD_voidSendData(RecivedData[counter]);
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <DisplayAlarmInfo+0x84>)
 8000284:	5cd3      	ldrb	r3, [r2, r3]
 8000286:	4618      	mov	r0, r3
 8000288:	f000 f9ad 	bl	80005e6 <CLCD_voidSendData>
	for(counter=1 ; RecivedData[counter] != 13 ;counter++)
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	3301      	adds	r3, #1
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <DisplayAlarmInfo+0x84>)
 8000296:	5cd3      	ldrb	r3, [r2, r3]
 8000298:	2b0d      	cmp	r3, #13
 800029a:	d1de      	bne.n	800025a <DisplayAlarmInfo+0x16>
		}
	}
	for(counter=0 ; counter<4 ;counter++)
 800029c:	2300      	movs	r3, #0
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	e006      	b.n	80002b0 <DisplayAlarmInfo+0x6c>
	{
		SYSTIC_delay_ms(890);
 80002a2:	f240 307a 	movw	r0, #890	; 0x37a
 80002a6:	f000 fe43 	bl	8000f30 <SYSTIC_delay_ms>
	for(counter=0 ; counter<4 ;counter++)
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	3301      	adds	r3, #1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d9f5      	bls.n	80002a2 <DisplayAlarmInfo+0x5e>
	}

	CLCD_voidSendCmd(1);
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 f979 	bl	80005ae <CLCD_voidSendCmd>
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	08001224 	.word	0x08001224
 80002c8:	20000028 	.word	0x20000028

080002cc <Display_Time>:
void Display_Time(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	CLCD_voidGoToXY(1, 0);
 80002d0:	2100      	movs	r1, #0
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 fa3c 	bl	8000750 <CLCD_voidGoToXY>

	CLCD_voidSendNumber(RecivedData[4]);
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <Display_Time+0x60>)
 80002da:	791b      	ldrb	r3, [r3, #4]
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f9df 	bl	80006a0 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[5]);
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <Display_Time+0x60>)
 80002e4:	795b      	ldrb	r3, [r3, #5]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f9da 	bl	80006a0 <CLCD_voidSendNumber>
	CLCD_voidSendData(':');
 80002ec:	203a      	movs	r0, #58	; 0x3a
 80002ee:	f000 f97a 	bl	80005e6 <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[2]);
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <Display_Time+0x60>)
 80002f4:	789b      	ldrb	r3, [r3, #2]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f9d2 	bl	80006a0 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[3]);
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <Display_Time+0x60>)
 80002fe:	78db      	ldrb	r3, [r3, #3]
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f9cd 	bl	80006a0 <CLCD_voidSendNumber>
	CLCD_voidSendData(':');
 8000306:	203a      	movs	r0, #58	; 0x3a
 8000308:	f000 f96d 	bl	80005e6 <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[0]);
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <Display_Time+0x60>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f9c5 	bl	80006a0 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[1]);
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <Display_Time+0x60>)
 8000318:	785b      	ldrb	r3, [r3, #1]
 800031a:	4618      	mov	r0, r3
 800031c:	f000 f9c0 	bl	80006a0 <CLCD_voidSendNumber>
	CLCD_voidSendData(':');
 8000320:	203a      	movs	r0, #58	; 0x3a
 8000322:	f000 f960 	bl	80005e6 <CLCD_voidSendData>

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000028 	.word	0x20000028

08000330 <Display_Date>:
void Display_Date(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	CLCD_voidGoToXY(0, 0);
 8000334:	2100      	movs	r1, #0
 8000336:	2000      	movs	r0, #0
 8000338:	f000 fa0a 	bl	8000750 <CLCD_voidGoToXY>

	switch (RecivedData[7])
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <Display_Date+0xb0>)
 800033e:	79db      	ldrb	r3, [r3, #7]
 8000340:	3b31      	subs	r3, #49	; 0x31
 8000342:	2b06      	cmp	r3, #6
 8000344:	d82c      	bhi.n	80003a0 <Display_Date+0x70>
 8000346:	a201      	add	r2, pc, #4	; (adr r2, 800034c <Display_Date+0x1c>)
 8000348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034c:	08000369 	.word	0x08000369
 8000350:	08000371 	.word	0x08000371
 8000354:	08000379 	.word	0x08000379
 8000358:	08000381 	.word	0x08000381
 800035c:	08000389 	.word	0x08000389
 8000360:	08000391 	.word	0x08000391
 8000364:	08000399 	.word	0x08000399
	{
	case '1'    : CLCD_u8SendString( (char *)"MON") ; break;
 8000368:	481e      	ldr	r0, [pc, #120]	; (80003e4 <Display_Date+0xb4>)
 800036a:	f000 f974 	bl	8000656 <CLCD_u8SendString>
 800036e:	e017      	b.n	80003a0 <Display_Date+0x70>
	case '2'    : CLCD_u8SendString( (char *)"TUE") ; break;
 8000370:	481d      	ldr	r0, [pc, #116]	; (80003e8 <Display_Date+0xb8>)
 8000372:	f000 f970 	bl	8000656 <CLCD_u8SendString>
 8000376:	e013      	b.n	80003a0 <Display_Date+0x70>
	case '3'    : CLCD_u8SendString( (char *)"TUE") ; break;
 8000378:	481b      	ldr	r0, [pc, #108]	; (80003e8 <Display_Date+0xb8>)
 800037a:	f000 f96c 	bl	8000656 <CLCD_u8SendString>
 800037e:	e00f      	b.n	80003a0 <Display_Date+0x70>
	case '4'    : CLCD_u8SendString( (char *)"WED") ; break;
 8000380:	481a      	ldr	r0, [pc, #104]	; (80003ec <Display_Date+0xbc>)
 8000382:	f000 f968 	bl	8000656 <CLCD_u8SendString>
 8000386:	e00b      	b.n	80003a0 <Display_Date+0x70>
	case '5'    : CLCD_u8SendString( (char *)"THU") ; break;
 8000388:	4819      	ldr	r0, [pc, #100]	; (80003f0 <Display_Date+0xc0>)
 800038a:	f000 f964 	bl	8000656 <CLCD_u8SendString>
 800038e:	e007      	b.n	80003a0 <Display_Date+0x70>
	case '6'    : CLCD_u8SendString( (char *)"FRI") ; break;
 8000390:	4818      	ldr	r0, [pc, #96]	; (80003f4 <Display_Date+0xc4>)
 8000392:	f000 f960 	bl	8000656 <CLCD_u8SendString>
 8000396:	e003      	b.n	80003a0 <Display_Date+0x70>
	case '7'    : CLCD_u8SendString( (char *)"SAT") ; break;
 8000398:	4817      	ldr	r0, [pc, #92]	; (80003f8 <Display_Date+0xc8>)
 800039a:	f000 f95c 	bl	8000656 <CLCD_u8SendString>
 800039e:	bf00      	nop
	}

	CLCD_voidSendNumber(RecivedData[8]);
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <Display_Date+0xb0>)
 80003a2:	7a1b      	ldrb	r3, [r3, #8]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f97b 	bl	80006a0 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[9]);
 80003aa:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <Display_Date+0xb0>)
 80003ac:	7a5b      	ldrb	r3, [r3, #9]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f976 	bl	80006a0 <CLCD_voidSendNumber>
	CLCD_voidSendData('/');
 80003b4:	202f      	movs	r0, #47	; 0x2f
 80003b6:	f000 f916 	bl	80005e6 <CLCD_voidSendData>

	CLCD_voidSendNumber(RecivedData[10]);
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <Display_Date+0xb0>)
 80003bc:	7a9b      	ldrb	r3, [r3, #10]
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f96e 	bl	80006a0 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(RecivedData[11]);
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <Display_Date+0xb0>)
 80003c6:	7adb      	ldrb	r3, [r3, #11]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f969 	bl	80006a0 <CLCD_voidSendNumber>
	CLCD_voidSendData('/');
 80003ce:	202f      	movs	r0, #47	; 0x2f
 80003d0:	f000 f909 	bl	80005e6 <CLCD_voidSendData>

	CLCD_voidSendNumber(2025);
 80003d4:	f240 70e9 	movw	r0, #2025	; 0x7e9
 80003d8:	f000 f962 	bl	80006a0 <CLCD_voidSendNumber>

}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000028 	.word	0x20000028
 80003e4:	08001234 	.word	0x08001234
 80003e8:	08001238 	.word	0x08001238
 80003ec:	0800123c 	.word	0x0800123c
 80003f0:	08001240 	.word	0x08001240
 80003f4:	08001244 	.word	0x08001244
 80003f8:	08001248 	.word	0x08001248

080003fc <TURN_ON_LED>:
void TURN_ON_LED(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	LED_On(PORTA, PIN2);
 8000400:	2102      	movs	r1, #2
 8000402:	2000      	movs	r0, #0
 8000404:	f000 fc53 	bl	8000cae <LED_On>
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}

0800040c <CLEAR_DISPLAY>:
void Receive_withInterrupt(void)
{
  /*	SPI_Receive_IT(SPICONFIG, RecivedData, 30, &SPI1_CallBack);*/
}
void CLEAR_DISPLAY(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	CLCD_ClearDisplay();
 8000410:	f000 f9be 	bl	8000790 <CLCD_ClearDisplay>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}

08000418 <_delay_1s>:
void _delay_1s( void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	SYSTIC_delay_ms(890);
 800041c:	f240 307a 	movw	r0, #890	; 0x37a
 8000420:	f000 fd86 	bl	8000f30 <SYSTIC_delay_ms>
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}

08000428 <BZR_Init>:

/********************************************************************************
 *************** ### FUNCTION IMPLEMENTATION SECTION ### ************************
 ********************************************************************************/
void BZR_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t Copy_PinConfig={
 800042e:	4a0a      	ldr	r2, [pc, #40]	; (8000458 <BZR_Init+0x30>)
 8000430:	463b      	mov	r3, r7
 8000432:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000436:	6018      	str	r0, [r3, #0]
 8000438:	3304      	adds	r3, #4
 800043a:	7019      	strb	r1, [r3, #0]
				.Mode		= OUTPUT_SPEED_2MHz	,
				.Output	= OUTPUT_PUSH_PULL		,
				.Input	= ANALOGE
		};
		/*GPIO pin initialization*/
		GPIO_u8PinInit(&Copy_PinConfig);
 800043c:	463b      	mov	r3, r7
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fabe 	bl	80009c0 <GPIO_u8PinInit>
		GPIO_u8SetPinValue(BZR_PORT, BZR_PIN, PIN_LOW);
 8000444:	2200      	movs	r2, #0
 8000446:	2104      	movs	r1, #4
 8000448:	2001      	movs	r0, #1
 800044a:	f000 fb71 	bl	8000b30 <GPIO_u8SetPinValue>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	0800124c 	.word	0x0800124c

0800045c <CLCD_voidPinInit>:




void CLCD_voidPinInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08c      	sub	sp, #48	; 0x30
 8000460:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t A11 = { .Port = PORTA , .PinNum = PIN11 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 8000462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	711a      	strb	r2, [r3, #4]
 800046c:	230b      	movs	r3, #11
 800046e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000472:	2302      	movs	r3, #2
 8000474:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GPIO_PinConfig_t A8  = { .Port = PORTA , .PinNum = PIN8  , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 8000478:	f107 0320 	add.w	r3, r7, #32
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	711a      	strb	r2, [r3, #4]
 8000482:	2308      	movs	r3, #8
 8000484:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000488:	2302      	movs	r3, #2
 800048a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	GPIO_PinConfig_t B12 = { .Port = PORTB , .PinNum = PIN12 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 800048e:	f107 0318 	add.w	r3, r7, #24
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	711a      	strb	r2, [r3, #4]
 8000498:	2301      	movs	r3, #1
 800049a:	763b      	strb	r3, [r7, #24]
 800049c:	230c      	movs	r3, #12
 800049e:	767b      	strb	r3, [r7, #25]
 80004a0:	2302      	movs	r3, #2
 80004a2:	76bb      	strb	r3, [r7, #26]
	GPIO_PinConfig_t B13 = { .Port = PORTB , .PinNum = PIN13 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	711a      	strb	r2, [r3, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	743b      	strb	r3, [r7, #16]
 80004b2:	230d      	movs	r3, #13
 80004b4:	747b      	strb	r3, [r7, #17]
 80004b6:	2302      	movs	r3, #2
 80004b8:	74bb      	strb	r3, [r7, #18]
	GPIO_PinConfig_t B14 = { .Port = PORTB , .PinNum = PIN14 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	711a      	strb	r2, [r3, #4]
 80004c4:	2301      	movs	r3, #1
 80004c6:	723b      	strb	r3, [r7, #8]
 80004c8:	230e      	movs	r3, #14
 80004ca:	727b      	strb	r3, [r7, #9]
 80004cc:	2302      	movs	r3, #2
 80004ce:	72bb      	strb	r3, [r7, #10]
	GPIO_PinConfig_t B15 = { .Port = PORTB , .PinNum = PIN15 , .Mode = OUTPUT_SPEED_2MHz , .Output = OUTPUT_PUSH_PULL  } ;
 80004d0:	463b      	mov	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	711a      	strb	r2, [r3, #4]
 80004d8:	2301      	movs	r3, #1
 80004da:	703b      	strb	r3, [r7, #0]
 80004dc:	230f      	movs	r3, #15
 80004de:	707b      	strb	r3, [r7, #1]
 80004e0:	2302      	movs	r3, #2
 80004e2:	70bb      	strb	r3, [r7, #2]


	GPIO_u8PinInit(&A11);
 80004e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fa69 	bl	80009c0 <GPIO_u8PinInit>
	GPIO_u8PinInit(&A8 );
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fa64 	bl	80009c0 <GPIO_u8PinInit>

	GPIO_u8PinInit(&B12);
 80004f8:	f107 0318 	add.w	r3, r7, #24
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fa5f 	bl	80009c0 <GPIO_u8PinInit>
	GPIO_u8PinInit(&B13);
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fa5a 	bl	80009c0 <GPIO_u8PinInit>
	GPIO_u8PinInit(&B14);
 800050c:	f107 0308 	add.w	r3, r7, #8
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fa55 	bl	80009c0 <GPIO_u8PinInit>
	GPIO_u8PinInit(&B15);
 8000516:	463b      	mov	r3, r7
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fa51 	bl	80009c0 <GPIO_u8PinInit>


}
 800051e:	bf00      	nop
 8000520:	3730      	adds	r7, #48	; 0x30
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <voidSendEnablePulse>:




static void voidSendEnablePulse(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
	/*Send enable pulse*/
	GPIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,PIN_HIGH);
 800052a:	2201      	movs	r2, #1
 800052c:	2108      	movs	r1, #8
 800052e:	2000      	movs	r0, #0
 8000530:	f000 fafe 	bl	8000b30 <GPIO_u8SetPinValue>
	
	SYSTIC_delay_ms(2);
 8000534:	2002      	movs	r0, #2
 8000536:	f000 fcfb 	bl	8000f30 <SYSTIC_delay_ms>
	GPIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,PIN_LOW);
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	2000      	movs	r0, #0
 8000540:	f000 faf6 	bl	8000b30 <GPIO_u8SetPinValue>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <voidSetLCDHalfDataPort>:




static void voidSetLCDHalfDataPort(uint8_t Copy_u8Nipple)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]

	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D4_PIN, GET_BIT(Copy_u8Nipple,0));
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	210f      	movs	r1, #15
 800055e:	2001      	movs	r0, #1
 8000560:	f000 fae6 	bl	8000b30 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D5_PIN, GET_BIT(Copy_u8Nipple,1));
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	085b      	lsrs	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	461a      	mov	r2, r3
 8000572:	210e      	movs	r1, #14
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fadb 	bl	8000b30 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D6_PIN, GET_BIT(Copy_u8Nipple,2));
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	089b      	lsrs	r3, r3, #2
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	b2db      	uxtb	r3, r3
 8000586:	461a      	mov	r2, r3
 8000588:	210d      	movs	r1, #13
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fad0 	bl	8000b30 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue( CLCD_DATA_PORT, CLCD_D7_PIN, GET_BIT(Copy_u8Nipple,3));
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	08db      	lsrs	r3, r3, #3
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	461a      	mov	r2, r3
 800059e:	210c      	movs	r1, #12
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fac5 	bl	8000b30 <GPIO_u8SetPinValue>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <CLCD_voidSendCmd>:




void CLCD_voidSendCmd(uint8_t Copy_u8Cmd)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	4603      	mov	r3, r0
 80005b6:	71fb      	strb	r3, [r7, #7]
	/*Set RS pin to low for command*/
	GPIO_u8SetPinValue( CLCD_CTRL_PORT, CLCD_RS_PIN, PIN_LOW);
 80005b8:	2200      	movs	r2, #0
 80005ba:	210b      	movs	r1, #11
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fab7 	bl	8000b30 <GPIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	091b      	lsrs	r3, r3, #4
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffbd 	bl	8000548 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 80005ce:	f7ff ffaa 	bl	8000526 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffb7 	bl	8000548 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 80005da:	f7ff ffa4 	bl	8000526 <voidSendEnablePulse>
#endif
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <CLCD_voidSendData>:




void CLCD_voidSendData(uint8_t Copy_u8Data)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	4603      	mov	r3, r0
 80005ee:	71fb      	strb	r3, [r7, #7]
	/*Set RS pin to high for Data*/
	GPIO_u8SetPinValue( CLCD_CTRL_PORT, CLCD_RS_PIN, PIN_HIGH);
 80005f0:	2201      	movs	r2, #1
 80005f2:	210b      	movs	r1, #11
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fa9b 	bl	8000b30 <GPIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffa1 	bl	8000548 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000606:	f7ff ff8e 	bl	8000526 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ff9b 	bl	8000548 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000612:	f7ff ff88 	bl	8000526 <voidSendEnablePulse>
#endif

}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <CLCD_voidInit>:




void CLCD_voidInit(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
	/*wait for more than 30ms after power on*/
	SYSTIC_delay_ms(40);
 8000622:	2028      	movs	r0, #40	; 0x28
 8000624:	f000 fc84 	bl	8000f30 <SYSTIC_delay_ms>
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
 8000628:	2002      	movs	r0, #2
 800062a:	f7ff ff8d 	bl	8000548 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 800062e:	f7ff ff7a 	bl	8000526 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
 8000632:	2002      	movs	r0, #2
 8000634:	f7ff ff88 	bl	8000548 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000638:	f7ff ff75 	bl	8000526 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
 800063c:	2008      	movs	r0, #8
 800063e:	f7ff ff83 	bl	8000548 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
 8000642:	f7ff ff70 	bl	8000526 <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
 8000646:	200c      	movs	r0, #12
 8000648:	f7ff ffb1 	bl	80005ae <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff ffae 	bl	80005ae <CLCD_voidSendCmd>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <CLCD_u8SendString>:




uint8_t CLCD_u8SendString(const char* Copy_chString)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState= OK;
 800065e:	2300      	movs	r3, #0
 8000660:	73fb      	strb	r3, [r7, #15]
	if(Copy_chString != NULL)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d013      	beq.n	8000690 <CLCD_u8SendString+0x3a>
	{
		uint8_t Local_u8Counter=0u;
 8000668:	2300      	movs	r3, #0
 800066a:	73bb      	strb	r3, [r7, #14]
		while(Copy_chString[Local_u8Counter] != '\0')
 800066c:	e009      	b.n	8000682 <CLCD_u8SendString+0x2c>
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffb5 	bl	80005e6 <CLCD_voidSendData>
			Local_u8Counter++;
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	3301      	adds	r3, #1
 8000680:	73bb      	strb	r3, [r7, #14]
		while(Copy_chString[Local_u8Counter] != '\0')
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1ef      	bne.n	800066e <CLCD_u8SendString+0x18>
 800068e:	e001      	b.n	8000694 <CLCD_u8SendString+0x3e>
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
 8000690:	2302      	movs	r3, #2
 8000692:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <CLCD_voidSendNumber>:




void CLCD_voidSendNumber(signed int Copy_s32Number)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	

	char Local_chNumberArr[10];
	uint8_t Local_u8RightDigit;
	uint8_t Local_u8Counter=0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	75fb      	strb	r3, [r7, #23]
	signed char Local_s8Counter2;

	if (Copy_s32Number == 0)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d103      	bne.n	80006ba <CLCD_voidSendNumber+0x1a>
	{
		CLCD_voidSendData('0');
 80006b2:	2030      	movs	r0, #48	; 0x30
 80006b4:	f7ff ff97 	bl	80005e6 <CLCD_voidSendData>
 80006b8:	e045      	b.n	8000746 <CLCD_voidSendNumber+0xa6>
		return ;
	}
	else if(Copy_s32Number < 0)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	da27      	bge.n	8000710 <CLCD_voidSendNumber+0x70>
	{
		CLCD_voidSendData('-');
 80006c0:	202d      	movs	r0, #45	; 0x2d
 80006c2:	f7ff ff90 	bl	80005e6 <CLCD_voidSendData>
		Copy_s32Number *= -1;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	425b      	negs	r3, r3
 80006ca:	607b      	str	r3, [r7, #4]
	}
	while(Copy_s32Number != 0)
 80006cc:	e020      	b.n	8000710 <CLCD_voidSendNumber+0x70>
	{
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <CLCD_voidSendNumber+0xac>)
 80006d2:	fb83 1302 	smull	r1, r3, r3, r2
 80006d6:	1099      	asrs	r1, r3, #2
 80006d8:	17d3      	asrs	r3, r2, #31
 80006da:	1ac9      	subs	r1, r1, r3
 80006dc:	460b      	mov	r3, r1
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	1ad1      	subs	r1, r2, r3
 80006e6:	460b      	mov	r3, r1
 80006e8:	757b      	strb	r3, [r7, #21]
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a17      	ldr	r2, [pc, #92]	; (800074c <CLCD_voidSendNumber+0xac>)
 80006ee:	fb82 1203 	smull	r1, r2, r2, r3
 80006f2:	1092      	asrs	r2, r2, #2
 80006f4:	17db      	asrs	r3, r3, #31
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	607b      	str	r3, [r7, #4]
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	7d7a      	ldrb	r2, [r7, #21]
 80006fe:	3230      	adds	r2, #48	; 0x30
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	3318      	adds	r3, #24
 8000704:	443b      	add	r3, r7
 8000706:	f803 2c10 	strb.w	r2, [r3, #-16]
		Local_u8Counter++;
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	3301      	adds	r3, #1
 800070e:	75fb      	strb	r3, [r7, #23]
	while(Copy_s32Number != 0)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1db      	bne.n	80006ce <CLCD_voidSendNumber+0x2e>
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
 8000716:	7dfb      	ldrb	r3, [r7, #23]
 8000718:	3b01      	subs	r3, #1
 800071a:	b2db      	uxtb	r3, r3
 800071c:	75bb      	strb	r3, [r7, #22]
 800071e:	e00e      	b.n	800073e <CLCD_voidSendNumber+0x9e>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
 8000720:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000724:	3318      	adds	r3, #24
 8000726:	443b      	add	r3, r7
 8000728:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff5a 	bl	80005e6 <CLCD_voidSendData>
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
 8000732:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	3b01      	subs	r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	75bb      	strb	r3, [r7, #22]
 800073e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000742:	2b00      	cmp	r3, #0
 8000744:	daec      	bge.n	8000720 <CLCD_voidSendNumber+0x80>
	}
}
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	66666667 	.word	0x66666667

08000750 <CLCD_voidGoToXY>:




void CLCD_voidGoToXY(uint8_t Copy_u8XPos, uint8_t Copy_u8YPos)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	460a      	mov	r2, r1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	4613      	mov	r3, r2
 800075e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8DDRamAdd;
	if(Copy_u8YPos == 0u)
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRamAdd= Copy_u8XPos;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e005      	b.n	8000778 <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8YPos == 1u)
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d102      	bne.n	8000778 <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	3340      	adds	r3, #64	; 0x40
 8000776:	73fb      	strb	r3, [r7, #15]
	}
	/*Set bit 7 for Set DDRAM address command */
	Local_u8DDRamAdd |= 1<<7u;
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800077e:	73fb      	strb	r3, [r7, #15]

	CLCD_voidSendCmd(Local_u8DDRamAdd);
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff13 	bl	80005ae <CLCD_voidSendCmd>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <CLCD_ClearDisplay>:
	/*Display the pattern written inside CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
}

void CLCD_ClearDisplay(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	CLCD_voidSendCmd(DISPLAY_CLEAR);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff ff0a 	bl	80005ae <CLCD_voidSendCmd>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI0)) ;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <EXTI0_IRQHandler+0x1c>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <EXTI0_IRQHandler+0x1c>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI0]();
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <EXTI0_IRQHandler+0x20>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4798      	blx	r3

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40010400 	.word	0x40010400
 80007c0:	20000038 	.word	0x20000038

080007c4 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI1)) ;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <EXTI1_IRQHandler+0x1c>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <EXTI1_IRQHandler+0x1c>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI1]();
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <EXTI1_IRQHandler+0x20>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4798      	blx	r3

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010400 	.word	0x40010400
 80007e4:	20000038 	.word	0x20000038

080007e8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI2)) ;
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <EXTI2_IRQHandler+0x1c>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <EXTI2_IRQHandler+0x1c>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI2]();
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <EXTI2_IRQHandler+0x20>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	4798      	blx	r3

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40010400 	.word	0x40010400
 8000808:	20000038 	.word	0x20000038

0800080c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI3)) ;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <EXTI3_IRQHandler+0x1c>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <EXTI3_IRQHandler+0x1c>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI3]();
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <EXTI3_IRQHandler+0x20>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4798      	blx	r3

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010400 	.word	0x40010400
 800082c:	20000038 	.word	0x20000038

08000830 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	/* Clear Pending Flag */
	EXTI->PR |= ( 1 << (EXTI4)) ;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <EXTI4_IRQHandler+0x1c>)
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <EXTI4_IRQHandler+0x1c>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6153      	str	r3, [r2, #20]
	/* Call Back Function */
	EXTI_GPCallBackFunc[EXTI4]();
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <EXTI4_IRQHandler+0x20>)
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	4798      	blx	r3

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40010400 	.word	0x40010400
 8000850:	20000038 	.word	0x20000038

08000854 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	if(GET_BIT( (EXTI->PR),EXTI5 ))
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	f003 0320 	and.w	r3, r3, #32
 8000860:	2b00      	cmp	r3, #0
 8000862:	d008      	beq.n	8000876 <EXTI9_5_IRQHandler+0x22>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI5)) ;
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 800086a:	f043 0320 	orr.w	r3, r3, #32
 800086e:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI5]();
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <EXTI9_5_IRQHandler+0xa4>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI6 ))
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087e:	2b00      	cmp	r3, #0
 8000880:	d008      	beq.n	8000894 <EXTI9_5_IRQHandler+0x40>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI6)) ;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI6]();
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <EXTI9_5_IRQHandler+0xa4>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI7 ))
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089c:	2b00      	cmp	r3, #0
 800089e:	d008      	beq.n	80008b2 <EXTI9_5_IRQHandler+0x5e>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI7)) ;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008a2:	695b      	ldr	r3, [r3, #20]
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008aa:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI7]();
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <EXTI9_5_IRQHandler+0xa4>)
 80008ae:	69db      	ldr	r3, [r3, #28]
 80008b0:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI8 ))
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d008      	beq.n	80008d0 <EXTI9_5_IRQHandler+0x7c>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI8)) ;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c8:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI8]();
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <EXTI9_5_IRQHandler+0xa4>)
 80008cc:	6a1b      	ldr	r3, [r3, #32]
 80008ce:	4798      	blx	r3


	}
	if(GET_BIT( (EXTI->PR),EXTI9 ))
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d008      	beq.n	80008ee <EXTI9_5_IRQHandler+0x9a>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI9)) ;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <EXTI9_5_IRQHandler+0xa0>)
 80008e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e6:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI9]();
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <EXTI9_5_IRQHandler+0xa4>)
 80008ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ec:	4798      	blx	r3

	}
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010400 	.word	0x40010400
 80008f8:	20000038 	.word	0x20000038

080008fc <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	if(GET_BIT( (EXTI->PR),EXTI10 ))
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <EXTI15_10_IRQHandler+0x22>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI10)) ;
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	4a29      	ldr	r2, [pc, #164]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000916:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI10]();
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI11 ))
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000926:	2b00      	cmp	r3, #0
 8000928:	d008      	beq.n	800093c <EXTI15_10_IRQHandler+0x40>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI11)) ;
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000934:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI11]();
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 8000938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093a:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI12 ))
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000944:	2b00      	cmp	r3, #0
 8000946:	d008      	beq.n	800095a <EXTI15_10_IRQHandler+0x5e>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI12)) ;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800094e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000952:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI12]();
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI13 ))
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d008      	beq.n	8000978 <EXTI15_10_IRQHandler+0x7c>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI13)) ;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800096c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000970:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI13]();
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 8000974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000976:	4798      	blx	r3


	}
	if(GET_BIT( (EXTI->PR),EXTI14 ))
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	2b00      	cmp	r3, #0
 8000982:	d008      	beq.n	8000996 <EXTI15_10_IRQHandler+0x9a>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI14)) ;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098e:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI14]();
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 8000992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000994:	4798      	blx	r3

	}
	if(GET_BIT( (EXTI->PR),EXTI15 ))
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d008      	beq.n	80009b4 <EXTI15_10_IRQHandler+0xb8>
	{
		/* Clear Pending Flag */
		EXTI->PR |= ( 1 << (EXTI15)) ;
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <EXTI15_10_IRQHandler+0xbc>)
 80009a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ac:	6153      	str	r3, [r2, #20]
		/* Call Back Function */
		EXTI_GPCallBackFunc[EXTI15]();
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <EXTI15_10_IRQHandler+0xc0>)
 80009b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009b2:	4798      	blx	r3

	}

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40010400 	.word	0x40010400
 80009bc:	20000038 	.word	0x20000038

080009c0 <GPIO_u8PinInit>:
 * @param[in] PinConfig : the initialization variables of the pins
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_t *PinConfig)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	73fb      	strb	r3, [r7, #15]
	if(PinConfig!=NULL)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 80a4 	beq.w	8000b1c <GPIO_u8PinInit+0x15c>
	{
		if((PinConfig->Port <= PORTH)&&(PinConfig->PinNum <=PIN15))
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b07      	cmp	r3, #7
 80009da:	f200 809c 	bhi.w	8000b16 <GPIO_u8PinInit+0x156>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	2b0f      	cmp	r3, #15
 80009e4:	f200 8097 	bhi.w	8000b16 <GPIO_u8PinInit+0x156>
		{
			/*Select GPIO mode : Input , Output  */
			uint8_t Local_u8RegNum = (PinConfig->PinNum / 8);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	785b      	ldrb	r3, [r3, #1]
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	73bb      	strb	r3, [r7, #14]
			uint8_t Local_u8BitNum = (PinConfig->PinNum % 8);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	785b      	ldrb	r3, [r3, #1]
 80009f4:	f003 0307 	and.w	r3, r3, #7
 80009f8:	737b      	strb	r3, [r7, #13]
			(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] &= ~(MODE_MASK << (Local_u8BitNum * MODE_PIN_ACCESS));
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <GPIO_u8PinInit+0x16c>)
 8000a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a06:	7bba      	ldrb	r2, [r7, #14]
 8000a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a0c:	7b7b      	ldrb	r3, [r7, #13]
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	2203      	movs	r2, #3
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <GPIO_u8PinInit+0x16c>)
 8000a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a26:	7bba      	ldrb	r2, [r7, #14]
 8000a28:	4001      	ands	r1, r0
 8000a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] |= ((PinConfig->Mode) << (Local_u8BitNum * MODE_PIN_ACCESS));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b3d      	ldr	r3, [pc, #244]	; (8000b2c <GPIO_u8PinInit+0x16c>)
 8000a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3a:	7bba      	ldrb	r2, [r7, #14]
 8000a3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	789b      	ldrb	r3, [r3, #2]
 8000a44:	461a      	mov	r2, r3
 8000a46:	7b7b      	ldrb	r3, [r7, #13]
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <GPIO_u8PinInit+0x16c>)
 8000a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5c:	7bba      	ldrb	r2, [r7, #14]
 8000a5e:	4301      	orrs	r1, r0
 8000a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] &= ~(CNF_MASK << ((Local_u8BitNum * CNF_PIN_ACCESS) + CNF_PIN_SHIFT));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <GPIO_u8PinInit+0x16c>)
 8000a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a70:	7bba      	ldrb	r2, [r7, #14]
 8000a72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a76:	7b7b      	ldrb	r3, [r7, #13]
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <GPIO_u8PinInit+0x16c>)
 8000a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a92:	7bba      	ldrb	r2, [r7, #14]
 8000a94:	4001      	ands	r1, r0
 8000a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if((PinConfig->Mode) == INPUT)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	789b      	ldrb	r3, [r3, #2]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d11c      	bne.n	8000adc <GPIO_u8PinInit+0x11c>
			{
				/*Select input type : Analog, Floating, PULLUP PULLDOWN*/
				(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] |= ((PinConfig->Input) << ((Local_u8BitNum * CNF_PIN_ACCESS) + CNF_PIN_SHIFT));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <GPIO_u8PinInit+0x16c>)
 8000aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aae:	7bba      	ldrb	r2, [r7, #14]
 8000ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	78db      	ldrb	r3, [r3, #3]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	7b7b      	ldrb	r3, [r7, #13]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	3302      	adds	r3, #2
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <GPIO_u8PinInit+0x16c>)
 8000ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad2:	7bba      	ldrb	r2, [r7, #14]
 8000ad4:	4301      	orrs	r1, r0
 8000ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		{
 8000ada:	e021      	b.n	8000b20 <GPIO_u8PinInit+0x160>
			}
			else
			{
				/*Select output type : OUTPUT Push Pull, Output OpenDrain, Alternate function Push Pull, Alternate function OpenDrain*/
				(GPIOPORT[PinConfig->Port])->CR[Local_u8RegNum] |= (PinConfig->Output << ((Local_u8BitNum * CNF_PIN_ACCESS) + CNF_PIN_SHIFT));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <GPIO_u8PinInit+0x16c>)
 8000ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae8:	7bba      	ldrb	r2, [r7, #14]
 8000aea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	791b      	ldrb	r3, [r3, #4]
 8000af2:	461a      	mov	r2, r3
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	3302      	adds	r3, #2
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <GPIO_u8PinInit+0x16c>)
 8000b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0c:	7bba      	ldrb	r2, [r7, #14]
 8000b0e:	4301      	orrs	r1, r0
 8000b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		{
 8000b14:	e004      	b.n	8000b20 <GPIO_u8PinInit+0x160>
			}
		}
		else
		{
			Local_u8ErrorState =NOK;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e001      	b.n	8000b20 <GPIO_u8PinInit+0x160>
		}
	}
	else{
		Local_u8ErrorState = NULL_PTR_ERR;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000000 	.word	0x20000000

08000b30 <GPIO_u8SetPinValue>:
 * @param[in] PinVal : the pin value, get options @PinVal_t enum
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8SetPinValue(Port_t Port, Pin_t PinNum, PinVal_t PinVal)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	71bb      	strb	r3, [r7, #6]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]
	if((Port<=PORTH)&&(PinNum<=PIN15))
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	d82e      	bhi.n	8000baa <GPIO_u8SetPinValue+0x7a>
 8000b4c:	79bb      	ldrb	r3, [r7, #6]
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	d82b      	bhi.n	8000baa <GPIO_u8SetPinValue+0x7a>
	{
		if(PinVal == PIN_LOW)
 8000b52:	797b      	ldrb	r3, [r7, #5]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d111      	bne.n	8000b7c <GPIO_u8SetPinValue+0x4c>
		{
			GPIOPORT[Port]->ODR &= ~(1<<PinNum);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <GPIO_u8SetPinValue+0x8c>)
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	79bb      	ldrb	r3, [r7, #6]
 8000b64:	2101      	movs	r1, #1
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4912      	ldr	r1, [pc, #72]	; (8000bbc <GPIO_u8SetPinValue+0x8c>)
 8000b72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b76:	4002      	ands	r2, r0
 8000b78:	60da      	str	r2, [r3, #12]
		if(PinVal == PIN_LOW)
 8000b7a:	e018      	b.n	8000bae <GPIO_u8SetPinValue+0x7e>
			/* GPIOPort[Port]->BSRR = 1<< 16 + PinNum ; */
		}


		else if(PinVal == PIN_HIGH)
 8000b7c:	797b      	ldrb	r3, [r7, #5]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d110      	bne.n	8000ba4 <GPIO_u8SetPinValue+0x74>
		{
			GPIOPORT[Port]->ODR |= (1<<PinNum);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <GPIO_u8SetPinValue+0x8c>)
 8000b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8a:	68da      	ldr	r2, [r3, #12]
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4908      	ldr	r1, [pc, #32]	; (8000bbc <GPIO_u8SetPinValue+0x8c>)
 8000b9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b9e:	4302      	orrs	r2, r0
 8000ba0:	60da      	str	r2, [r3, #12]
		if(PinVal == PIN_LOW)
 8000ba2:	e004      	b.n	8000bae <GPIO_u8SetPinValue+0x7e>
			/* GPIOPort[Port]->BSRR = 1<<  PinNum ; */
		}
		else{
			Local_u8ErrorState =NOK;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
		if(PinVal == PIN_LOW)
 8000ba8:	e001      	b.n	8000bae <GPIO_u8SetPinValue+0x7e>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000000 	.word	0x20000000

08000bc0 <GPIO_u8TogglePinValue>:
 * @param[in] PinNum : the pin number, get options @Pin_t enum
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8TogglePinValue(Port_t Port, Pin_t PinNum)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_u8ErrorState =OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]
	if((Port <= PORTH)&&(PinNum <=PIN15)  )
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b07      	cmp	r3, #7
 8000bd8:	d813      	bhi.n	8000c02 <GPIO_u8TogglePinValue+0x42>
 8000bda:	79bb      	ldrb	r3, [r7, #6]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d810      	bhi.n	8000c02 <GPIO_u8TogglePinValue+0x42>
	{
        TOG_BIT(GPIOPORT[Port]->ODR,PinNum);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <GPIO_u8TogglePinValue+0x54>)
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	79bb      	ldrb	r3, [r7, #6]
 8000bec:	2101      	movs	r1, #1
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4907      	ldr	r1, [pc, #28]	; (8000c14 <GPIO_u8TogglePinValue+0x54>)
 8000bf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfc:	4042      	eors	r2, r0
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	e001      	b.n	8000c06 <GPIO_u8TogglePinValue+0x46>
	}
	else
	{
        Local_u8ErrorState = NOK;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000000 	.word	0x20000000

08000c18 <GPIO_u8ReadPinValue>:
 * @param[in] PinVal : the pin value, get options @PinVal_t enum
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8ReadPinValue(Port_t Port, Pin_t PinNum, PinVal_t* PinVal)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	603a      	str	r2, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	460b      	mov	r3, r1
 8000c26:	71bb      	strb	r3, [r7, #6]

	uint8_t Local_u8ErrorStatus = OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]
	if(PinVal != NULL)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d017      	beq.n	8000c62 <GPIO_u8ReadPinValue+0x4a>
	{
		if((Port <= PORTH) && (PinNum <= PIN15))
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d811      	bhi.n	8000c5c <GPIO_u8ReadPinValue+0x44>
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	2b0f      	cmp	r3, #15
 8000c3c:	d80e      	bhi.n	8000c5c <GPIO_u8ReadPinValue+0x44>
		{
			*PinVal = (((GPIOPORT[Port]->IDR) >> PinNum) & 1u);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <GPIO_u8ReadPinValue+0x5c>)
 8000c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	79bb      	ldrb	r3, [r7, #6]
 8000c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e004      	b.n	8000c66 <GPIO_u8ReadPinValue+0x4e>
		}
		else
		{
			Local_u8ErrorStatus = NOK;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	e001      	b.n	8000c66 <GPIO_u8ReadPinValue+0x4e>
		}
	}
	else
	{
		Local_u8ErrorStatus = NULL_PTR_ERR;
 8000c62:	2302      	movs	r3, #2
 8000c64:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorStatus;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000000 	.word	0x20000000

08000c78 <LED_Init>:

/********************************************************************************
 *************** ### FUNCTION IMPLEMENTATION SECTION ### ************************
 ********************************************************************************/
void LED_Init(Port_t	Port , Pin_t	PinNum )
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71bb      	strb	r3, [r7, #6]

	GPIO_PinConfig_t Copy_PinConfig={
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	723b      	strb	r3, [r7, #8]
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	727b      	strb	r3, [r7, #9]
 8000c90:	2302      	movs	r3, #2
 8000c92:	72bb      	strb	r3, [r7, #10]
 8000c94:	2301      	movs	r3, #1
 8000c96:	72fb      	strb	r3, [r7, #11]
 8000c98:	2300      	movs	r3, #0
 8000c9a:	733b      	strb	r3, [r7, #12]
			.Mode		= OUTPUT_SPEED_2MHz	,
			.Output	= OUTPUT_PUSH_PULL		,
			.Input	= FLOATING
	};
	/*GPIO pin initialization*/
	GPIO_u8PinInit(&Copy_PinConfig);
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fe8d 	bl	80009c0 <GPIO_u8PinInit>
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <LED_On>:

void LED_On(Port_t	Port , Pin_t	PinNum )
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	460a      	mov	r2, r1
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	71bb      	strb	r3, [r7, #6]
	GPIO_u8SetPinValue(Port, PinNum, PIN_HIGH);
 8000cbe:	79b9      	ldrb	r1, [r7, #6]
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff33 	bl	8000b30 <GPIO_u8SetPinValue>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <LED_Toggle>:
{
	GPIO_u8SetPinValue(Port, PinNum, PIN_LOW);
}

void LED_Toggle(Port_t	Port , Pin_t	PinNum )
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	460a      	mov	r2, r1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	71bb      	strb	r3, [r7, #6]
	GPIO_u8TogglePinValue(Port, PinNum);
 8000ce2:	79ba      	ldrb	r2, [r7, #6]
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff69 	bl	8000bc0 <GPIO_u8TogglePinValue>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <NVIC_EnableIRQ>:
 * @param : IRQn				(ENUM: @NVIC_IRQn_t)
 * @retval: Local_ErrorState	(ENUM: @ErrorState_t)
 *
 * */
ErrorState_t NVIC_EnableIRQ(NVIC_IRQn_t IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	ErrorState_t Local_ErrorState = OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_RegNumber = (IRQn / 32);
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	095b      	lsrs	r3, r3, #5
 8000d0a:	73bb      	strb	r3, [r7, #14]
	uint8_t Local_PinNumber = (IRQn % 32);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	737b      	strb	r3, [r7, #13]

	if((IRQn >= NVIC_IRQ_WWDG) && (IRQn <= NVIC_IRQ_OTG_FS))
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b43      	cmp	r3, #67	; 0x43
 8000d18:	d80e      	bhi.n	8000d38 <NVIC_EnableIRQ+0x40>
	{

		NVIC->ISER[Local_RegNumber] |= (NVIC_SET_MASK << Local_PinNumber);
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <NVIC_EnableIRQ+0x50>)
 8000d1c:	7bbb      	ldrb	r3, [r7, #14]
 8000d1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	2101      	movs	r1, #1
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	4906      	ldr	r1, [pc, #24]	; (8000d48 <NVIC_EnableIRQ+0x50>)
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	4302      	orrs	r2, r0
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000d36:	e001      	b.n	8000d3c <NVIC_EnableIRQ+0x44>
	}
	else
	{
		Local_ErrorState = NOK;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ErrorState;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <RCC_SetClkSts>:
 * @param:	Copy_ClockType		(enum: @ClockSrc_t)
 * @param:	Copy_Status			(enum: @RCC_State_t)
 * @retval:	Local_ErrorState	(enum: @ErrorState_t)
 * */
ErrorState_t RCC_SetClkSts(ClockSrc_t Copy_ClockType,RCC_State_t Copy_Status)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]

	ErrorState_t Local_ErrorState=OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_TimeOut=0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	81bb      	strh	r3, [r7, #12]

	/***Clock type***/
	if(Copy_ClockType == CLK_SRC_PLL)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d125      	bne.n	8000db6 <RCC_SetClkSts+0x6a>
	{
		/***Clock type is PLL***/
		switch(Copy_Status)
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <RCC_SetClkSts+0x2a>
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d016      	beq.n	8000da2 <RCC_SetClkSts+0x56>
 8000d74:	e01c      	b.n	8000db0 <RCC_SetClkSts+0x64>
		{
		/*PLL ON*/
		case RCC_ON :	RCC->RCC_CR |= ( SET_MASK << CR_PLLON );
 8000d76:	4b40      	ldr	r3, [pc, #256]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a3f      	ldr	r2, [pc, #252]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d80:	6013      	str	r3, [r2, #0]
		/*Waiting the PLL ready flag*/
		while( ( ( ( RCC->RCC_CR >> CR_PLLRDY ) & GET_MASK ) != PLL_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 8000d82:	e002      	b.n	8000d8a <RCC_SetClkSts+0x3e>
		{
			/*counter(Time Out)*/
			Local_TimeOut++;
 8000d84:	89bb      	ldrh	r3, [r7, #12]
 8000d86:	3301      	adds	r3, #1
 8000d88:	81bb      	strh	r3, [r7, #12]
		while( ( ( ( RCC->RCC_CR >> CR_PLLRDY ) & GET_MASK ) != PLL_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	0e5b      	lsrs	r3, r3, #25
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d063      	beq.n	8000e60 <RCC_SetClkSts+0x114>
 8000d98:	89bb      	ldrh	r3, [r7, #12]
 8000d9a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d9e:	d9f1      	bls.n	8000d84 <RCC_SetClkSts+0x38>
		}
		break;
 8000da0:	e05e      	b.n	8000e60 <RCC_SetClkSts+0x114>
		/*PLL OFF*/
		case RCC_OFF:	RCC->RCC_CR &=~ ( SET_MASK << CR_PLLON );	break;
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e05c      	b.n	8000e6a <RCC_SetClkSts+0x11e>

		default : Local_ErrorState = NOK;							break;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e059      	b.n	8000e6a <RCC_SetClkSts+0x11e>
		}
	}
	else if(Copy_ClockType == CLK_SRC_HSE)
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d125      	bne.n	8000e08 <RCC_SetClkSts+0xbc>
	{
		/***Clock type is HSE***/
		switch(Copy_Status)
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <RCC_SetClkSts+0x7c>
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d016      	beq.n	8000df4 <RCC_SetClkSts+0xa8>
 8000dc6:	e01c      	b.n	8000e02 <RCC_SetClkSts+0xb6>
		{
		/*HSE ON*/
		case RCC_ON :		RCC->RCC_CR |= ( SET_MASK << CR_HSEON );
 8000dc8:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a2a      	ldr	r2, [pc, #168]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd2:	6013      	str	r3, [r2, #0]
		/*Waiting the HSE ready flag*/
		while( ( ( ( RCC->RCC_CR >> CR_HSERDY ) & GET_MASK ) != HSE_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 8000dd4:	e002      	b.n	8000ddc <RCC_SetClkSts+0x90>
		{
			/*counter(Time Out)*/
			Local_TimeOut++;
 8000dd6:	89bb      	ldrh	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	81bb      	strh	r3, [r7, #12]
		while( ( ( ( RCC->RCC_CR >> CR_HSERDY ) & GET_MASK ) != HSE_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 8000ddc:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	0c5b      	lsrs	r3, r3, #17
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d03c      	beq.n	8000e64 <RCC_SetClkSts+0x118>
 8000dea:	89bb      	ldrh	r3, [r7, #12]
 8000dec:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000df0:	d9f1      	bls.n	8000dd6 <RCC_SetClkSts+0x8a>
		}
		break;
 8000df2:	e037      	b.n	8000e64 <RCC_SetClkSts+0x118>
		/*HSE OFF*/
		case RCC_OFF:	RCC->RCC_CR &=~ ( SET_MASK << CR_HSEON );	break;
 8000df4:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e033      	b.n	8000e6a <RCC_SetClkSts+0x11e>

		default : Local_ErrorState = NOK;							break;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e030      	b.n	8000e6a <RCC_SetClkSts+0x11e>
		}
	}
	else if(Copy_ClockType == CLK_SRC_HSI)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d125      	bne.n	8000e5a <RCC_SetClkSts+0x10e>
	{
		/***Clock type is HSI***/
		switch(Copy_Status)
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <RCC_SetClkSts+0xce>
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d016      	beq.n	8000e46 <RCC_SetClkSts+0xfa>
 8000e18:	e01c      	b.n	8000e54 <RCC_SetClkSts+0x108>
		{
		/*HSI ON*/
		case RCC_ON :		RCC->RCC_CR |= ( SET_MASK << CR_HSION );
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6013      	str	r3, [r2, #0]
		/*Waiting the HSI ready flag*/
		while( ( ( ( RCC->RCC_CR >> CR_HSIRDY ) & GET_MASK ) != HSI_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 8000e26:	e002      	b.n	8000e2e <RCC_SetClkSts+0xe2>
		{
			/*counter(Time Out)*/
			Local_TimeOut++;
 8000e28:	89bb      	ldrh	r3, [r7, #12]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	81bb      	strh	r3, [r7, #12]
		while( ( ( ( RCC->RCC_CR >> CR_HSIRDY ) & GET_MASK ) != HSI_READY_FLAG ) && ( Local_TimeOut <= TIMEOUT ) )
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d015      	beq.n	8000e68 <RCC_SetClkSts+0x11c>
 8000e3c:	89bb      	ldrh	r3, [r7, #12]
 8000e3e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000e42:	d9f1      	bls.n	8000e28 <RCC_SetClkSts+0xdc>
		}
		break;
 8000e44:	e010      	b.n	8000e68 <RCC_SetClkSts+0x11c>
		/*HSI OFF*/
		case RCC_OFF:	RCC->RCC_CR &=~ ( SET_MASK << CR_HSION );	break;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <RCC_SetClkSts+0x12c>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e00a      	b.n	8000e6a <RCC_SetClkSts+0x11e>

		default : Local_ErrorState = NOK;							break;
 8000e54:	2301      	movs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e007      	b.n	8000e6a <RCC_SetClkSts+0x11e>
		}
	}
	else
	{
		Local_ErrorState = NOK;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e004      	b.n	8000e6a <RCC_SetClkSts+0x11e>
		break;
 8000e60:	bf00      	nop
 8000e62:	e002      	b.n	8000e6a <RCC_SetClkSts+0x11e>
		break;
 8000e64:	bf00      	nop
 8000e66:	e000      	b.n	8000e6a <RCC_SetClkSts+0x11e>
		break;
 8000e68:	bf00      	nop
	}
	return Local_ErrorState;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <RCC_SetSysClk>:
 * @brief:	Set system clock (PLL, HSE, HSI)
 * @param:	Copy_ClockType		(enum: @ClockSrc_t)
 * @retval:	Local_ErrorState	(enum: @ErrorState_t)
 * */
ErrorState_t RCC_SetSysClk(ClockSrc_t Copy_ClockType)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
	ErrorState_t Local_ErrorState = OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
	switch(Copy_ClockType)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d020      	beq.n	8000ed2 <RCC_SetSysClk+0x56>
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	dc2b      	bgt.n	8000eec <RCC_SetSysClk+0x70>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <RCC_SetSysClk+0x22>
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d00d      	beq.n	8000eb8 <RCC_SetSysClk+0x3c>
 8000e9c:	e026      	b.n	8000eec <RCC_SetSysClk+0x70>
	{
	/* PLL selected as system clock*/
	case CLK_SRC_PLL:

		RCC->RCC_CFGR |=  ( SET_MASK << CFGR_SW1 );
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &=~ ( SET_MASK << CFGR_SW0 );
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]

		break;
 8000eb6:	e01c      	b.n	8000ef2 <RCC_SetSysClk+0x76>
		/* HSE selected as system clock*/
	case CLK_SRC_HSE:

		RCC->RCC_CFGR &=~ ( SET_MASK << CFGR_SW1 );
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000ebe:	f023 0302 	bic.w	r3, r3, #2
 8000ec2:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR |=  ( SET_MASK << CFGR_SW0 );
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6053      	str	r3, [r2, #4]

		break;
 8000ed0:	e00f      	b.n	8000ef2 <RCC_SetSysClk+0x76>
		/*HSI selected as system clock*/
	case CLK_SRC_HSI:

		RCC->RCC_CFGR &=~ ( SET_MASK << CFGR_SW1 );
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000ed8:	f023 0302 	bic.w	r3, r3, #2
 8000edc:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &=~ ( SET_MASK << CFGR_SW0 );
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <RCC_SetSysClk+0x84>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]

		break;
 8000eea:	e002      	b.n	8000ef2 <RCC_SetSysClk+0x76>

	default: Local_ErrorState = NOK;	break;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	bf00      	nop
	}

	return Local_ErrorState;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <RCC_APB2EnableClock>:
 * @brief:	Enable APB2 clock for peripheral
 * @param:	Copy_Peripheral		(ENUM: @APB2Peripherals_t)
 * @retval:	void
 * */
void RCC_APB2EnableClock(APB2Peripherals_t Copy_Peripheral)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	RCC->RCC_APB2ENR |= ( SET_MASK << Copy_Peripheral );
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <RCC_APB2EnableClock+0x28>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	2101      	movs	r1, #1
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <RCC_APB2EnableClock+0x28>)
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	6193      	str	r3, [r2, #24]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	40021000 	.word	0x40021000

08000f30 <SYSTIC_delay_ms>:
#include "ErrType.h"
#include "BIT_MATH.h"


uint8_t SYSTIC_delay_ms(uint32_t time)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    uint8_t Local_u8ErrorState = OK ;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	72fb      	strb	r3, [r7, #11]
    uint32_t Local_u32Value =(time * 1000 *AHB_CLOCK /8);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f42:	fb02 f303 	mul.w	r3, r2, r3
 8000f46:	08db      	lsrs	r3, r3, #3
 8000f48:	60fb      	str	r3, [r7, #12]
    /*check if the value > the register available bits*/
    if(Local_u32Value > 0xffffff)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d302      	bcc.n	8000f58 <SYSTIC_delay_ms+0x28>
    {
    	Local_u32Value = 0xffffff ;
 8000f52:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000f56:	60fb      	str	r3, [r7, #12]
    }
    /*Select the SYSTIC CLOCK to the processor clock source AHB /8 */
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_CLKSOURCE);
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1a      	ldr	r2, [pc, #104]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f5e:	f023 0304 	bic.w	r3, r3, #4
 8000f62:	6013      	str	r3, [r2, #0]
    /*Reset the count flag*/
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_COUNTFLAG);
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
    /* Clear the value in the SysTick reload value register */
    SYSTIC->STK_LOAD &= 0b11111111<<24;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000f7a:	6053      	str	r3, [r2, #4]
    /*set the value in the SysTick reload value register */
    SYSTIC->STK_LOAD |=Local_u32Value;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	4911      	ldr	r1, [pc, #68]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
    /* Clear the VAL Register to load the start of the down counter from the LOAD register */
    SYSTIC->STK_VAL &=0b11111111<<24;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f8e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000f92:	6093      	str	r3, [r2, #8]
    /*Enable SysTick*/
    SET_BIT(SYSTIC->STK_CTRL,STK_CTRL_ENABLE);
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]
    /*Waiting flag */
    while((GET_BIT(SYSTIC->STK_CTRL,STK_CTRL_COUNTFLAG))==0)
 8000fa0:	bf00      	nop
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f9      	beq.n	8000fa2 <SYSTIC_delay_ms+0x72>
    {
    	/*Code*/
    }

    /*disable SysTick*/
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_ENABLE);
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SYSTIC_delay_ms+0x98>)
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	6013      	str	r3, [r2, #0]

    return Local_u8ErrorState;
 8000fba:	7afb      	ldrb	r3, [r7, #11]

}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <USART1_SetBaudRate>:
#include "USART_interface.h"
#include "USART_private.h"
#include "USART_config.h"

static void USART1_SetBaudRate(u32 clock, u32 baudRate)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
    // Calculate the BRR value
    u32 brr_value = (clock / (16 * baudRate));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe0:	60fb      	str	r3, [r7, #12]
    u32 fraction = (clock % (16 * baudRate)) * 16 / (16 * baudRate);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	011a      	lsls	r2, r3, #4
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fec:	fb01 f202 	mul.w	r2, r1, r2
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	011a      	lsls	r2, r3, #4
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffc:	60bb      	str	r3, [r7, #8]
    
    // Set the BRR register
    USART1->BRR = (brr_value << 4) | (fraction & 0x0F);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	011a      	lsls	r2, r3, #4
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	f003 030f 	and.w	r3, r3, #15
 8001008:	4903      	ldr	r1, [pc, #12]	; (8001018 <USART1_SetBaudRate+0x4c>)
 800100a:	4313      	orrs	r3, r2
 800100c:	608b      	str	r3, [r1, #8]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40013800 	.word	0x40013800

0800101c <MUSART1_voidInit>:
void MUSART1_voidInit(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	/*	baud rate = 9600		*/
	// USART1 -> BRR = 0x341;
	USART1_SetBaudRate(8000000,9600);
 8001020:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <MUSART1_voidInit+0x3c>)
 8001026:	f7ff ffd1 	bl	8000fcc <USART1_SetBaudRate>

	SET_BIT((USART1-> CR[0]), 3);
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MUSART1_voidInit+0x40>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <MUSART1_voidInit+0x40>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART1-> CR[0]), 2);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MUSART1_voidInit+0x40>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	4a08      	ldr	r2, [pc, #32]	; (800105c <MUSART1_voidInit+0x40>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART1-> CR[0]), 13);
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MUSART1_voidInit+0x40>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <MUSART1_voidInit+0x40>)
 8001048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800104c:	60d3      	str	r3, [r2, #12]
	
	USART1 -> SR = 0;
 800104e:	4b03      	ldr	r3, [pc, #12]	; (800105c <MUSART1_voidInit+0x40>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	007a1200 	.word	0x007a1200
 800105c:	40013800 	.word	0x40013800

08001060 <MUSART1_u8Receive>:
	}
	
}

u8 MUSART1_u8Receive(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
	u8 Loc_u8ReceivedData = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]
	while((GET_BIT((USART1 -> SR), 5)) == 0);
 800106a:	bf00      	nop
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <MUSART1_u8Receive+0x2c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f9      	beq.n	800106c <MUSART1_u8Receive+0xc>
	Loc_u8ReceivedData = USART1 -> DR;
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <MUSART1_u8Receive+0x2c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	71fb      	strb	r3, [r7, #7]
	return (Loc_u8ReceivedData);
 800107e:	79fb      	ldrb	r3, [r7, #7]
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40013800 	.word	0x40013800

08001090 <MUSART1_u8ReceiveArray>:
#include "CLCD_interface.h"

extern uint8_t RecivedData[14]  ;


void MUSART1_u8ReceiveArray(uint8_t* arr, uint16_t size) {
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	81fb      	strh	r3, [r7, #14]
 80010a0:	e00c      	b.n	80010bc <MUSART1_u8ReceiveArray+0x2c>
        arr[i] = MUSART1_u8Receive();
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	18d4      	adds	r4, r2, r3
 80010a8:	f7ff ffda 	bl	8001060 <MUSART1_u8Receive>
 80010ac:	4603      	mov	r3, r0
 80010ae:	7023      	strb	r3, [r4, #0]
		SYSTIC_delay_ms(10);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f7ff ff3d 	bl	8000f30 <SYSTIC_delay_ms>
    for (uint16_t i = 0; i < size; i++) {
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	3301      	adds	r3, #1
 80010ba:	81fb      	strh	r3, [r7, #14]
 80010bc:	89fa      	ldrh	r2, [r7, #14]
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3ee      	bcc.n	80010a2 <MUSART1_u8ReceiveArray+0x12>
    }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
	...

080010d0 <main>:

int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

	RCC_Clock_Init();
 80010d6:	f7ff f84b 	bl	8000170 <RCC_Clock_Init>
	Pins_Init();
 80010da:	f7ff f863 	bl	80001a4 <Pins_Init>
	CLCD_voidPinInit();
 80010de:	f7ff f9bd 	bl	800045c <CLCD_voidPinInit>
	CLCD_voidInit();
 80010e2:	f7ff fa9c 	bl	800061e <CLCD_voidInit>
	Interrupts_Init();
 80010e6:	f7ff f89f 	bl	8000228 <Interrupts_Init>
	MUSART1_voidInit();
 80010ea:	f7ff ff97 	bl	800101c <MUSART1_voidInit>

	uint8_t Check ;
	uint8_t Read_Pin ;

	Check = MUSART1_u8Receive();
 80010ee:	f7ff ffb7 	bl	8001060 <MUSART1_u8Receive>
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]

	/* Loop forever */

	if(Check== '2')
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b32      	cmp	r3, #50	; 0x32
 80010fa:	d104      	bne.n	8001106 <main+0x36>
	{
		TURN_ON_LED();
 80010fc:	f7ff f97e 	bl	80003fc <TURN_ON_LED>
		CLEAR_DISPLAY();
 8001100:	f7ff f984 	bl	800040c <CLEAR_DISPLAY>
		while(1);
 8001104:	e7fe      	b.n	8001104 <main+0x34>
	}
	else if(Check== '1')
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b31      	cmp	r3, #49	; 0x31
 800110a:	d121      	bne.n	8001150 <main+0x80>
	{
		for(;;)
		{

			LED_On(PORTC, PIN15) ;
 800110c:	210f      	movs	r1, #15
 800110e:	2002      	movs	r0, #2
 8001110:	f7ff fdcd 	bl	8000cae <LED_On>
			SYSTIC_delay_ms(1000);
 8001114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001118:	f7ff ff0a 	bl	8000f30 <SYSTIC_delay_ms>
			MUSART1_u8ReceiveArray(&RecivedData , 14);
 800111c:	210e      	movs	r1, #14
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <main+0x8c>)
 8001120:	f7ff ffb6 	bl	8001090 <MUSART1_u8ReceiveArray>
			Display_Date();
 8001124:	f7ff f904 	bl	8000330 <Display_Date>
			_delay_1s();
 8001128:	f7ff f976 	bl	8000418 <_delay_1s>
			Display_Time();
 800112c:	f7ff f8ce 	bl	80002cc <Display_Time>
			GPIO_u8ReadPinValue(PORTB, PIN13, &Read_Pin);
 8001130:	1dbb      	adds	r3, r7, #6
 8001132:	461a      	mov	r2, r3
 8001134:	210d      	movs	r1, #13
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff fd6e 	bl	8000c18 <GPIO_u8ReadPinValue>
			if(Read_Pin== PIN_LOW)
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1e4      	bne.n	800110c <main+0x3c>
			{
				DisplayAlarmInfo();
 8001142:	f7ff f87f 	bl	8000244 <DisplayAlarmInfo>
				LED_Toggle(PORTC, PIN14);
 8001146:	210e      	movs	r1, #14
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff fdc2 	bl	8000cd2 <LED_Toggle>
			LED_On(PORTC, PIN15) ;
 800114e:	e7dd      	b.n	800110c <main+0x3c>
 8001150:	2300      	movs	r3, #0
			}
		}
	}
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000028 	.word	0x20000028

08001160 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001162:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001164:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <LoopForever+0x6>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LoopForever+0xe>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <LoopForever+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800118e:	f000 f811 	bl	80011b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001192:	f7ff ff9d 	bl	80010d0 <main>

08001196 <LoopForever>:

LoopForever:
  b LoopForever
 8001196:	e7fe      	b.n	8001196 <LoopForever>
  ldr   r0, =_estack
 8001198:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011a4:	0800125c 	.word	0x0800125c
  ldr r2, =_sbss
 80011a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011ac:	20000078 	.word	0x20000078

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>
	...

080011b4 <__libc_init_array>:
 80011b4:	b570      	push	{r4, r5, r6, lr}
 80011b6:	2600      	movs	r6, #0
 80011b8:	4d0c      	ldr	r5, [pc, #48]	; (80011ec <__libc_init_array+0x38>)
 80011ba:	4c0d      	ldr	r4, [pc, #52]	; (80011f0 <__libc_init_array+0x3c>)
 80011bc:	1b64      	subs	r4, r4, r5
 80011be:	10a4      	asrs	r4, r4, #2
 80011c0:	42a6      	cmp	r6, r4
 80011c2:	d109      	bne.n	80011d8 <__libc_init_array+0x24>
 80011c4:	f000 f81a 	bl	80011fc <_init>
 80011c8:	2600      	movs	r6, #0
 80011ca:	4d0a      	ldr	r5, [pc, #40]	; (80011f4 <__libc_init_array+0x40>)
 80011cc:	4c0a      	ldr	r4, [pc, #40]	; (80011f8 <__libc_init_array+0x44>)
 80011ce:	1b64      	subs	r4, r4, r5
 80011d0:	10a4      	asrs	r4, r4, #2
 80011d2:	42a6      	cmp	r6, r4
 80011d4:	d105      	bne.n	80011e2 <__libc_init_array+0x2e>
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
 80011d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80011dc:	4798      	blx	r3
 80011de:	3601      	adds	r6, #1
 80011e0:	e7ee      	b.n	80011c0 <__libc_init_array+0xc>
 80011e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011e6:	4798      	blx	r3
 80011e8:	3601      	adds	r6, #1
 80011ea:	e7f2      	b.n	80011d2 <__libc_init_array+0x1e>
 80011ec:	08001254 	.word	0x08001254
 80011f0:	08001254 	.word	0x08001254
 80011f4:	08001254 	.word	0x08001254
 80011f8:	08001258 	.word	0x08001258

080011fc <_init>:
 80011fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fe:	bf00      	nop
 8001200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001202:	bc08      	pop	{r3}
 8001204:	469e      	mov	lr, r3
 8001206:	4770      	bx	lr

08001208 <_fini>:
 8001208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800120a:	bf00      	nop
 800120c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800120e:	bc08      	pop	{r3}
 8001210:	469e      	mov	lr, r3
 8001212:	4770      	bx	lr
