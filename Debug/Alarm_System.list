
Alarm_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080021bc  080021bc  000121bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e0  080025e0  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025e8  080025e8  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025ec  080025ec  000125ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080025f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200000ec  080026dc  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080026dc  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000373a  00000000  00000000  0002015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d29  00000000  00000000  00023899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000380  00000000  00000000  000245c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000027e  00000000  00000000  00024948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002581  00000000  00000000  00024bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004311  00000000  00000000  00027147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a055  00000000  00000000  0002b458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c9c  00000000  00000000  000354b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0003614c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000ec 	.word	0x200000ec
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080021a4 	.word	0x080021a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000f0 	.word	0x200000f0
 8000200:	080021a4 	.word	0x080021a4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <APP_voidInit>:




void APP_voidInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08c      	sub	sp, #48	; 0x30
 8000504:	af00      	add	r7, sp, #0

	 RCC_AHB1EnableClk(AHB1_GPIOA);
 8000506:	2000      	movs	r0, #0
 8000508:	f001 f804 	bl	8001514 <RCC_AHB1EnableClk>
	 RCC_AHB1EnableClk(AHB1_GPIOB);
 800050c:	2001      	movs	r0, #1
 800050e:	f001 f801 	bl	8001514 <RCC_AHB1EnableClk>

	 RCC_APB1Enable(APB1_USART2);
 8000512:	2011      	movs	r0, #17
 8000514:	f001 f816 	bl	8001544 <RCC_APB1Enable>
	 RCC_APB1Enable(APB1_I2C1);
 8000518:	2015      	movs	r0, #21
 800051a:	f001 f813 	bl	8001544 <RCC_APB1Enable>


	 GPIO_PIN_CFG_t PINA5 =
 800051e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	f8c3 2003 	str.w	r2, [r3, #3]
 800052a:	2305      	movs	r3, #5
 800052c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000530:	2301      	movs	r3, #1
 8000532:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 };




	 GPIO_PIN_CFG_t USART_TX_PIN = {
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	f8c3 2003 	str.w	r2, [r3, #3]
 8000542:	2302      	movs	r3, #2
 8000544:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000548:	2302      	movs	r3, #2
 800054a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800054e:	2307      	movs	r3, #7
 8000550:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.AltFunc=AF7, .Mode=ALTERNATIVE_FUNCTION, .OutputType=PUSH_PULL,
			.PinNum=PIN2, .Port=PORTA
	};

	 GPIO_PIN_CFG_t USART_RX_PIN = {
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	f8c3 2003 	str.w	r2, [r3, #3]
 8000560:	2303      	movs	r3, #3
 8000562:	767b      	strb	r3, [r7, #25]
 8000564:	2302      	movs	r3, #2
 8000566:	76bb      	strb	r3, [r7, #26]
 8000568:	2307      	movs	r3, #7
 800056a:	77bb      	strb	r3, [r7, #30]
			.AltFunc=AF7, .Mode=ALTERNATIVE_FUNCTION, .OutputType=PUSH_PULL,
			.PinNum=PIN3, .Port=PORTA
	};


	GPIO_PIN_CFG_t GPIO_SDA =
 800056c:	4a2d      	ldr	r2, [pc, #180]	; (8000624 <APP_voidInit+0x124>)
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000576:	6018      	str	r0, [r3, #0]
 8000578:	3304      	adds	r3, #4
 800057a:	8019      	strh	r1, [r3, #0]
 800057c:	3302      	adds	r3, #2
 800057e:	0c0a      	lsrs	r2, r1, #16
 8000580:	701a      	strb	r2, [r3, #0]
	{
			.Port = PORTB, .PinNum = PIN7, .Mode  = ALTERNATIVE_FUNCTION, .OutputType = OPEN_DRAIN,
			.AltFunc  = AF4, .PullType = PULL_UP, .Speed  = HIGH_
	};
	GPIO_PIN_CFG_t GPIO_SCL=
 8000582:	4a29      	ldr	r2, [pc, #164]	; (8000628 <APP_voidInit+0x128>)
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800058c:	6018      	str	r0, [r3, #0]
 800058e:	3304      	adds	r3, #4
 8000590:	8019      	strh	r1, [r3, #0]
 8000592:	3302      	adds	r3, #2
 8000594:	0c0a      	lsrs	r2, r1, #16
 8000596:	701a      	strb	r2, [r3, #0]
			.Port     = PORTB,	.PinNum        = PIN6,	.Mode          = ALTERNATIVE_FUNCTION,
			.OutputType = OPEN_DRAIN, .AltFunc  = AF4, .PullType = PULL_UP, .Speed   = HIGH_
	};


	I2C1_SysConfig.I2C_NUMBER 				  = I2C_1					;
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <APP_voidInit+0x12c>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	I2C1_SysConfig.I2C_ACKNOWLEDGE 		      = I2C_ACK					;
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <APP_voidInit+0x12c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	705a      	strb	r2, [r3, #1]
	I2C1_SysConfig.I2C_SPEED_MODE 			  = SM_MODE					;
 80005a4:	4b21      	ldr	r3, [pc, #132]	; (800062c <APP_voidInit+0x12c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	709a      	strb	r2, [r3, #2]
	I2C1_SysConfig.I2C_STRETCHING 			  = NO_STRETCH				;
 80005aa:	4b20      	ldr	r3, [pc, #128]	; (800062c <APP_voidInit+0x12c>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	70da      	strb	r2, [r3, #3]
	I2C1_SysConfig.I2C_SCL_FREQ 			  = 100						;
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <APP_voidInit+0x12c>)
 80005b2:	2264      	movs	r2, #100	; 0x64
 80005b4:	80da      	strh	r2, [r3, #6]
	I2C1_SysConfig.I2C_FREQ 				  = 16						;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <APP_voidInit+0x12c>)
 80005b8:	2210      	movs	r2, #16
 80005ba:	721a      	strb	r2, [r3, #8]
	I2C1_SysConfig.I2C_PEC 				      = NO_PEC					;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <APP_voidInit+0x12c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	711a      	strb	r2, [r3, #4]
	I2C1_SysConfig.I2C_ADD_MODE 			  = _7_BIT_SLAVE_ADD		;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <APP_voidInit+0x12c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	715a      	strb	r2, [r3, #5]
	I2C1_SysConfig.I2C_OWN_ADD 			      = 0						;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <APP_voidInit+0x12c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	725a      	strb	r2, [r3, #9]

	

		USART_Cnfg_t UART2 =
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <APP_voidInit+0x130>)
 80005d0:	463b      	mov	r3, r7
 80005d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d6:	6018      	str	r0, [r3, #0]
 80005d8:	3304      	adds	r3, #4
 80005da:	8019      	strh	r1, [r3, #0]





	 GPIO_u8PinInit(&PINA5);
 80005dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f9db 	bl	800099c <GPIO_u8PinInit>

	 GPIO_u8PinInit(&USART_TX_PIN);
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f9d6 	bl	800099c <GPIO_u8PinInit>
	 GPIO_u8PinInit(&USART_RX_PIN);
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f9d1 	bl	800099c <GPIO_u8PinInit>

	 GPIO_u8PinInit(&GPIO_SDA);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f9cc 	bl	800099c <GPIO_u8PinInit>
	 GPIO_u8PinInit(&GPIO_SCL);
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f9c7 	bl	800099c <GPIO_u8PinInit>


	 USART_u8Init(&UART2);
 800060e:	463b      	mov	r3, r7
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fb71 	bl	8001cf8 <USART_u8Init>
	 I2C_Init(&I2C1_SysConfig);
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <APP_voidInit+0x12c>)
 8000618:	f000 faee 	bl	8000bf8 <I2C_Init>




}
 800061c:	bf00      	nop
 800061e:	3730      	adds	r7, #48	; 0x30
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	080021bc 	.word	0x080021bc
 8000628:	080021c4 	.word	0x080021c4
 800062c:	20000108 	.word	0x20000108
 8000630:	080021cc 	.word	0x080021cc

08000634 <APP_voidLogin>:




void APP_voidLogin(void)
{ 
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	uint8_t Local_u8Check = LOGIN_IsValid() ;
 800063a:	f000 fea9 	bl	8001390 <LOGIN_IsValid>
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]

	if (Local_u8Check == VALID)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d103      	bne.n	8000650 <APP_voidLogin+0x1c>
	{
		Print((uint8_t*)"\r\n\r\n Welcome Eslam .................");
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <APP_voidLogin+0x34>)
 800064a:	f000 ffcb 	bl	80015e4 <Print>
		
	}
	
	
	
}
 800064e:	e006      	b.n	800065e <APP_voidLogin+0x2a>
	else if (Local_u8Check == INVALID)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d103      	bne.n	800065e <APP_voidLogin+0x2a>
		Print((uint8_t*)"\r\n\r\n The System is closed :(  ");
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <APP_voidLogin+0x38>)
 8000658:	f000 ffc4 	bl	80015e4 <Print>
		while (1)
 800065c:	e7fe      	b.n	800065c <APP_voidLogin+0x28>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	080021d4 	.word	0x080021d4
 800066c:	080021fc 	.word	0x080021fc

08000670 <APP_voidMenu>:


void APP_voidMenu(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	
	uint8_t Local_u8Number ;

	
	Print((uint8_t*)"\r\n\r\n Menu : ");
 8000676:	4837      	ldr	r0, [pc, #220]	; (8000754 <APP_voidMenu+0xe4>)
 8000678:	f000 ffb4 	bl	80015e4 <Print>
	Print((uint8_t*)"\r\n\r\n 1) Display time and date ");
 800067c:	4836      	ldr	r0, [pc, #216]	; (8000758 <APP_voidMenu+0xe8>)
 800067e:	f000 ffb1 	bl	80015e4 <Print>
	Print((uint8_t*)"\r\n 2) Set time and date ");
 8000682:	4836      	ldr	r0, [pc, #216]	; (800075c <APP_voidMenu+0xec>)
 8000684:	f000 ffae 	bl	80015e4 <Print>
	Print((uint8_t*)"\r\n 3) Set Alarm ");
 8000688:	4835      	ldr	r0, [pc, #212]	; (8000760 <APP_voidMenu+0xf0>)
 800068a:	f000 ffab 	bl	80015e4 <Print>
	Print((uint8_t*)"\r\n 4) Display all Alarms ");
 800068e:	4835      	ldr	r0, [pc, #212]	; (8000764 <APP_voidMenu+0xf4>)
 8000690:	f000 ffa8 	bl	80015e4 <Print>
	Print((uint8_t*)"\r\n 5) Exit \r\n");
 8000694:	4834      	ldr	r0, [pc, #208]	; (8000768 <APP_voidMenu+0xf8>)
 8000696:	f000 ffa5 	bl	80015e4 <Print>

	Input(&Local_u8Number , 1);
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	2101      	movs	r1, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f856 	bl	8001750 <Input>

	while (Local_u8Number < '1' || Local_u8Number > '5')
 80006a4:	e007      	b.n	80006b6 <APP_voidMenu+0x46>
	{
		Print((uint8_t*)"\r\n Please enter a valid number ... ");
 80006a6:	4831      	ldr	r0, [pc, #196]	; (800076c <APP_voidMenu+0xfc>)
 80006a8:	f000 ff9c 	bl	80015e4 <Print>
		Input(&Local_u8Number , 1);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 f84d 	bl	8001750 <Input>
	while (Local_u8Number < '1' || Local_u8Number > '5')
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b30      	cmp	r3, #48	; 0x30
 80006ba:	d9f4      	bls.n	80006a6 <APP_voidMenu+0x36>
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b35      	cmp	r3, #53	; 0x35
 80006c0:	d8f1      	bhi.n	80006a6 <APP_voidMenu+0x36>
	}

	switch (Local_u8Number)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	3b31      	subs	r3, #49	; 0x31
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d83f      	bhi.n	800074a <APP_voidMenu+0xda>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <APP_voidMenu+0x60>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e5 	.word	0x080006e5
 80006d4:	080006eb 	.word	0x080006eb
 80006d8:	080006f7 	.word	0x080006f7
 80006dc:	08000743 	.word	0x08000743
 80006e0:	08000749 	.word	0x08000749
	{
		case '1' :
			SRV_ShowTimeNDate();
 80006e4:	f001 f8bc 	bl	8001860 <SRV_ShowTimeNDate>
			break;
 80006e8:	e030      	b.n	800074c <APP_voidMenu+0xdc>

		case '2' :
			SRV_SetTimeNDate();
 80006ea:	f001 f84f 	bl	800178c <SRV_SetTimeNDate>
			Print((uint8_t*)"\r\nTime and Date is set successfully. ;)");
 80006ee:	4820      	ldr	r0, [pc, #128]	; (8000770 <APP_voidMenu+0x100>)
 80006f0:	f000 ff78 	bl	80015e4 <Print>
			break;
 80006f4:	e02a      	b.n	800074c <APP_voidMenu+0xdc>

		case '3' :
			//Set_Alarm();
			uint8_t Local_u8AlarmNumber=0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	71bb      	strb	r3, [r7, #6]
			//Read Time and Date from user
			Print( (uint8_t*)"\nWhich alarm you want to set?");
 80006fa:	481e      	ldr	r0, [pc, #120]	; (8000774 <APP_voidMenu+0x104>)
 80006fc:	f000 ff72 	bl	80015e4 <Print>
			Print( (uint8_t*)"\nAlarm 1");
 8000700:	481d      	ldr	r0, [pc, #116]	; (8000778 <APP_voidMenu+0x108>)
 8000702:	f000 ff6f 	bl	80015e4 <Print>
			Print( (uint8_t*)"\nAlarm 2");
 8000706:	481d      	ldr	r0, [pc, #116]	; (800077c <APP_voidMenu+0x10c>)
 8000708:	f000 ff6c 	bl	80015e4 <Print>
			Print( (uint8_t*)"\nAlarm 3");
 800070c:	481c      	ldr	r0, [pc, #112]	; (8000780 <APP_voidMenu+0x110>)
 800070e:	f000 ff69 	bl	80015e4 <Print>
			Print( (uint8_t*)"\nAlarm 4");
 8000712:	481c      	ldr	r0, [pc, #112]	; (8000784 <APP_voidMenu+0x114>)
 8000714:	f000 ff66 	bl	80015e4 <Print>
			Print( (uint8_t*)"\nAlarm 5");
 8000718:	481b      	ldr	r0, [pc, #108]	; (8000788 <APP_voidMenu+0x118>)
 800071a:	f000 ff63 	bl	80015e4 <Print>

			Print( (uint8_t*)"\nAlarm [");
 800071e:	481b      	ldr	r0, [pc, #108]	; (800078c <APP_voidMenu+0x11c>)
 8000720:	f000 ff60 	bl	80015e4 <Print>
			Input( &Local_u8AlarmNumber , 1);
 8000724:	1dbb      	adds	r3, r7, #6
 8000726:	2101      	movs	r1, #1
 8000728:	4618      	mov	r0, r3
 800072a:	f001 f811 	bl	8001750 <Input>
			Print( (uint8_t*)"]");
 800072e:	4818      	ldr	r0, [pc, #96]	; (8000790 <APP_voidMenu+0x120>)
 8000730:	f000 ff58 	bl	80015e4 <Print>

			SRV_SetAlarm((Local_u8AlarmNumber-49));
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	3b31      	subs	r3, #49	; 0x31
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f8c8 	bl	80018d0 <SRV_SetAlarm>
			break;
 8000740:	e004      	b.n	800074c <APP_voidMenu+0xdc>

		case '4' :
			Display_Alarms();
 8000742:	f000 f827 	bl	8000794 <Display_Alarms>
			break;
 8000746:	e001      	b.n	800074c <APP_voidMenu+0xdc>

		case '5' :
			while (1)
 8000748:	e7fe      	b.n	8000748 <APP_voidMenu+0xd8>
			}
			
			break;
		
		default:
			break;
 800074a:	bf00      	nop
	}
	


}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800221c 	.word	0x0800221c
 8000758:	0800222c 	.word	0x0800222c
 800075c:	0800224c 	.word	0x0800224c
 8000760:	08002268 	.word	0x08002268
 8000764:	0800227c 	.word	0x0800227c
 8000768:	08002298 	.word	0x08002298
 800076c:	080022a8 	.word	0x080022a8
 8000770:	080022cc 	.word	0x080022cc
 8000774:	080022f4 	.word	0x080022f4
 8000778:	08002314 	.word	0x08002314
 800077c:	08002320 	.word	0x08002320
 8000780:	0800232c 	.word	0x0800232c
 8000784:	08002338 	.word	0x08002338
 8000788:	08002344 	.word	0x08002344
 800078c:	08002350 	.word	0x08002350
 8000790:	0800235c 	.word	0x0800235c

08000794 <Display_Alarms>:

}


 void Display_Alarms(void)
 {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
	uint8_t LOCAL_u8LoopIterator ;

	Print((uint8_t*)"\r\n");
 800079a:	4813      	ldr	r0, [pc, #76]	; (80007e8 <Display_Alarms+0x54>)
 800079c:	f000 ff22 	bl	80015e4 <Print>

	for(LOCAL_u8LoopIterator = 0 ; LOCAL_u8LoopIterator < NUM_OF_ALARMS  ; LOCAL_u8LoopIterator++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	e018      	b.n	80007d8 <Display_Alarms+0x44>
	{
		Print((uint8_t*)"\r\n");
 80007a6:	4810      	ldr	r0, [pc, #64]	; (80007e8 <Display_Alarms+0x54>)
 80007a8:	f000 ff1c 	bl	80015e4 <Print>
		SendChar(LOCAL_u8LoopIterator + 1 + 48 );
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	3331      	adds	r3, #49	; 0x31
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 ffdc 	bl	8001770 <SendChar>
		Print((uint8_t*)") ");
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <Display_Alarms+0x58>)
 80007ba:	f000 ff13 	bl	80015e4 <Print>
		Print((uint8_t*)&Global_u8Alarms[LOCAL_u8LoopIterator]);
 80007be:	79fa      	ldrb	r2, [r7, #7]
 80007c0:	4613      	mov	r3, r2
 80007c2:	011b      	lsls	r3, r3, #4
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <Display_Alarms+0x5c>)
 80007ca:	4413      	add	r3, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 ff09 	bl	80015e4 <Print>
	for(LOCAL_u8LoopIterator = 0 ; LOCAL_u8LoopIterator < NUM_OF_ALARMS  ; LOCAL_u8LoopIterator++)
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	3301      	adds	r3, #1
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d9e3      	bls.n	80007a6 <Display_Alarms+0x12>
	}
	
 }
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	080023f4 	.word	0x080023f4
 80007ec:	080023f8 	.word	0x080023f8
 80007f0:	20000000 	.word	0x20000000

080007f4 <APP_FirstSetUp>:



void APP_FirstSetUp(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	SRV_SetTimeNDate();
 80007f8:	f000 ffc8 	bl	800178c <SRV_SetTimeNDate>

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <RTC_SetTimeDate_>:

#include "DS1307_prv.h"
#include "DS1307_interface.h"

void RTC_SetTimeDate_(I2C_config_t* I2C_Config, RTC_Config_t* TimeAndDate ,RTC_Format_t Format)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	4613      	mov	r3, r2
 800080c:	71fb      	strb	r3, [r7, #7]
	static uint8_t Local_u8DateTime[8] = {0};
	uint8_t Local_u8Iterator;
	Local_u8DateTime[0] = 0x00;
 800080e:	4b37      	ldr	r3, [pc, #220]	; (80008ec <RTC_SetTimeDate_+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]


	/*Seconds*/
	Local_u8DateTime[1] = (TimeAndDate->SECONDS);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	789a      	ldrb	r2, [r3, #2]
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <RTC_SetTimeDate_+0xec>)
 800081a:	705a      	strb	r2, [r3, #1]
	/* it is important to enable the oscillator (CH bit=0) during initial configuration.*/
	Local_u8DateTime[1] &=~ (1 << 7);
 800081c:	4b33      	ldr	r3, [pc, #204]	; (80008ec <RTC_SetTimeDate_+0xec>)
 800081e:	785b      	ldrb	r3, [r3, #1]
 8000820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <RTC_SetTimeDate_+0xec>)
 8000828:	705a      	strb	r2, [r3, #1]
	/*Minutes*/
	Local_u8DateTime[2] = (TimeAndDate->MINUTES);
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	78da      	ldrb	r2, [r3, #3]
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <RTC_SetTimeDate_+0xec>)
 8000830:	709a      	strb	r2, [r3, #2]

	/*24 time format*/
	if(TimeAndDate->TIME_FORMAT == '1')
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b31      	cmp	r3, #49	; 0x31
 8000838:	d10b      	bne.n	8000852 <RTC_SetTimeDate_+0x52>
	{
		Local_u8DateTime[3] = (TimeAndDate->HOURS);
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	791a      	ldrb	r2, [r3, #4]
 800083e:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <RTC_SetTimeDate_+0xec>)
 8000840:	70da      	strb	r2, [r3, #3]
		Local_u8DateTime[3] &=~ (1 << 6);
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <RTC_SetTimeDate_+0xec>)
 8000844:	78db      	ldrb	r3, [r3, #3]
 8000846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <RTC_SetTimeDate_+0xec>)
 800084e:	70da      	strb	r2, [r3, #3]
 8000850:	e01a      	b.n	8000888 <RTC_SetTimeDate_+0x88>
	}
	else
	{
		if(TimeAndDate->AM_PM_NOTATION == '0')
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	785b      	ldrb	r3, [r3, #1]
 8000856:	2b30      	cmp	r3, #48	; 0x30
 8000858:	d104      	bne.n	8000864 <RTC_SetTimeDate_+0x64>
		{
			Local_u8DateTime[3] = (TimeAndDate->HOURS);
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	791a      	ldrb	r2, [r3, #4]
 800085e:	4b23      	ldr	r3, [pc, #140]	; (80008ec <RTC_SetTimeDate_+0xec>)
 8000860:	70da      	strb	r2, [r3, #3]
 8000862:	e00a      	b.n	800087a <RTC_SetTimeDate_+0x7a>
		}
		else
		{
			Local_u8DateTime[3] = (TimeAndDate->HOURS);
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	791a      	ldrb	r2, [r3, #4]
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <RTC_SetTimeDate_+0xec>)
 800086a:	70da      	strb	r2, [r3, #3]
			Local_u8DateTime[3] |= (1 << 5);
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <RTC_SetTimeDate_+0xec>)
 800086e:	78db      	ldrb	r3, [r3, #3]
 8000870:	f043 0320 	orr.w	r3, r3, #32
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <RTC_SetTimeDate_+0xec>)
 8000878:	70da      	strb	r2, [r3, #3]
		}
		Local_u8DateTime[3] |= (1 << 6);
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <RTC_SetTimeDate_+0xec>)
 800087c:	78db      	ldrb	r3, [r3, #3]
 800087e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <RTC_SetTimeDate_+0xec>)
 8000886:	70da      	strb	r2, [r3, #3]

	}

	Local_u8DateTime[4] = (TimeAndDate->WEEK_DAY);
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	7a1a      	ldrb	r2, [r3, #8]
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <RTC_SetTimeDate_+0xec>)
 800088e:	711a      	strb	r2, [r3, #4]

	Local_u8DateTime[5] = (TimeAndDate->DAY);
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	795a      	ldrb	r2, [r3, #5]
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <RTC_SetTimeDate_+0xec>)
 8000896:	715a      	strb	r2, [r3, #5]

	Local_u8DateTime[6] = (TimeAndDate->MONTH);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	799a      	ldrb	r2, [r3, #6]
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <RTC_SetTimeDate_+0xec>)
 800089e:	719a      	strb	r2, [r3, #6]

	Local_u8DateTime[7] = (TimeAndDate->YEAR);
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	79da      	ldrb	r2, [r3, #7]
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <RTC_SetTimeDate_+0xec>)
 80008a6:	71da      	strb	r2, [r3, #7]

	if(Format == DECIMAL_FORMAT)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d113      	bne.n	80008d6 <RTC_SetTimeDate_+0xd6>
	{
		for(Local_u8Iterator=0 ; Local_u8Iterator<8 ;Local_u8Iterator++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	75fb      	strb	r3, [r7, #23]
 80008b2:	e00d      	b.n	80008d0 <RTC_SetTimeDate_+0xd0>
		{
			Local_u8DateTime[Local_u8Iterator] = DecimalToBCD(Local_u8DateTime[Local_u8Iterator]);
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <RTC_SetTimeDate_+0xec>)
 80008b8:	5cd3      	ldrb	r3, [r2, r3]
 80008ba:	7dfc      	ldrb	r4, [r7, #23]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f849 	bl	8000954 <DecimalToBCD>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <RTC_SetTimeDate_+0xec>)
 80008c8:	551a      	strb	r2, [r3, r4]
		for(Local_u8Iterator=0 ; Local_u8Iterator<8 ;Local_u8Iterator++)
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
 80008cc:	3301      	adds	r3, #1
 80008ce:	75fb      	strb	r3, [r7, #23]
 80008d0:	7dfb      	ldrb	r3, [r7, #23]
 80008d2:	2b07      	cmp	r3, #7
 80008d4:	d9ee      	bls.n	80008b4 <RTC_SetTimeDate_+0xb4>
		}
	}

	I2C_MasterTransmitData(I2C_Config, WRITE_DS1307_RTC_ADDRESS, Local_u8DateTime, 7);
 80008d6:	2307      	movs	r3, #7
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <RTC_SetTimeDate_+0xec>)
 80008da:	21d0      	movs	r1, #208	; 0xd0
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f000 fb57 	bl	8000f90 <I2C_MasterTransmitData>
}
 80008e2:	bf00      	nop
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000120 	.word	0x20000120

080008f0 <RTC_ReadTimeDate>:
	I2C_MasterTransmitData(I2C_Config, WRITE_DS1307_RTC_ADDRESS, Local_u8DateTime, 8);
}


void RTC_ReadTimeDate(I2C_config_t* I2C_Config, RTC_Config_t* TimeAndDate ,uint8_t* DT)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
	//static uint8_t Local_u8ReceivedBCDDateTime[7] = {0};

	uint8_t Local_u8Counter=0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	75fb      	strb	r3, [r7, #23]

	I2C_MasterRequestWrite(I2C_Config, WRITE_DS1307_RTC_ADDRESS);
 8000900:	21d0      	movs	r1, #208	; 0xd0
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f000 fbe4 	bl	80010d0 <I2C_MasterRequestWrite>

	I2C_SendDataPacket(I2C_Config, 0x00);
 8000908:	2100      	movs	r1, #0
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f000 fc34 	bl	8001178 <I2C_SendDataPacket>

	I2C_MasterRequestRead(I2C_Config, READ_DS1307_RTC_ADDRESS);
 8000910:	21d1      	movs	r1, #209	; 0xd1
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f000 fc4c 	bl	80011b0 <I2C_MasterRequestRead>

	for(Local_u8Counter = 0 ; Local_u8Counter < 7 ; Local_u8Counter++ )
 8000918:	2300      	movs	r3, #0
 800091a:	75fb      	strb	r3, [r7, #23]
 800091c:	e00f      	b.n	800093e <RTC_ReadTimeDate+0x4e>
	{
		if(Local_u8Counter == 6)
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	2b06      	cmp	r3, #6
 8000922:	d102      	bne.n	800092a <RTC_ReadTimeDate+0x3a>
		{
			I2C_DisableAck(I2C_Config);
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f000 fc95 	bl	8001254 <I2C_DisableAck>
		}
		I2C_MasterReceiveData(I2C_Config, &DT[Local_u8Counter]);
 800092a:	7dfb      	ldrb	r3, [r7, #23]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	4619      	mov	r1, r3
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f000 fbaa 	bl	800108c <I2C_MasterReceiveData>
	for(Local_u8Counter = 0 ; Local_u8Counter < 7 ; Local_u8Counter++ )
 8000938:	7dfb      	ldrb	r3, [r7, #23]
 800093a:	3301      	adds	r3, #1
 800093c:	75fb      	strb	r3, [r7, #23]
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	2b06      	cmp	r3, #6
 8000942:	d9ec      	bls.n	800091e <RTC_ReadTimeDate+0x2e>
	}

	I2C_SendStopCondition(I2C_Config);
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f000 fafd 	bl	8000f44 <I2C_SendStopCondition>

}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <DecimalToBCD>:

// Function to convert a decimal value to BCD
uint8_t DecimalToBCD(uint8_t decimal) {
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	return (((decimal / 10) << 4) | (decimal % 10));
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <DecimalToBCD+0x44>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	b258      	sxtb	r0, r3
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <DecimalToBCD+0x44>)
 8000972:	fba3 1302 	umull	r1, r3, r3, r2
 8000976:	08d9      	lsrs	r1, r3, #3
 8000978:	460b      	mov	r3, r1
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	440b      	add	r3, r1
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	b25b      	sxtb	r3, r3
 8000986:	4303      	orrs	r3, r0
 8000988:	b25b      	sxtb	r3, r3
 800098a:	b2db      	uxtb	r3, r3
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	cccccccd 	.word	0xcccccccd

0800099c <GPIO_u8PinInit>:
 */
/*===============================================================================================================*/


uint8_t GPIO_u8PinInit (const GPIO_PIN_CFG_t* PinCFG )
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
    uint8_t Local_u8ErrorState = OK ;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]

    if (PinCFG != NULL)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 8116 	beq.w	8000bdc <GPIO_u8PinInit+0x240>
    {

        /* You should check All Variables */
       if ((PinCFG->Port <= PORTH) && (PinCFG->PinNum <= PIN15))
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b07      	cmp	r3, #7
 80009b6:	f200 810e 	bhi.w	8000bd6 <GPIO_u8PinInit+0x23a>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	785b      	ldrb	r3, [r3, #1]
 80009be:	2b0f      	cmp	r3, #15
 80009c0:	f200 8109 	bhi.w	8000bd6 <GPIO_u8PinInit+0x23a>
       {
            /* Selsect GPIO mode : Input , Output , Analog , Alternate Function */
            (GPIOPort[PinCFG->Port]->MODER) &= ~(MODER_MASK << ((PinCFG->PinNum) * MODER_PIN_ACCESS)); /* Clear the mode bits*/
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b8a      	ldr	r3, [pc, #552]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 80009cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2103      	movs	r1, #3
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	4b82      	ldr	r3, [pc, #520]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 80009ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009ee:	400a      	ands	r2, r1
 80009f0:	601a      	str	r2, [r3, #0]
            (GPIOPort[PinCFG->Port]->MODER) |=  ( (PinCFG->Mode) << (PinCFG->PinNum) * MODER_PIN_ACCESS );
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b7e      	ldr	r3, [pc, #504]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 80009fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	789b      	ldrb	r3, [r3, #2]
 8000a04:	4619      	mov	r1, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	785b      	ldrb	r3, [r3, #1]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	4b76      	ldr	r3, [pc, #472]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000a1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	601a      	str	r2, [r3, #0]

            /* Select GPIO pull state : Pullup , pulldown , no pull */
            (GPIOPort[PinCFG->Port]->PUPDR) &= ~(PUPDR_MASK << ((PinCFG->PinNum) * PUPDR_PIN_ACCESS));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b72      	ldr	r3, [pc, #456]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2e:	68da      	ldr	r2, [r3, #12]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	785b      	ldrb	r3, [r3, #1]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2103      	movs	r1, #3
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	4b6b      	ldr	r3, [pc, #428]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000a48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	60da      	str	r2, [r3, #12]
            (GPIOPort[PinCFG->Port]->PUPDR) |=  ( (PinCFG->PullType) << (PinCFG->PinNum) * PUPDR_PIN_ACCESS );
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b67      	ldr	r3, [pc, #412]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	795b      	ldrb	r3, [r3, #5]
 8000a62:	4619      	mov	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	785b      	ldrb	r3, [r3, #1]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	4619      	mov	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	4b5f      	ldr	r3, [pc, #380]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000a78:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	60da      	str	r2, [r3, #12]


            /* Select output type and output speed in case of general purpose output or alternate function */
            if ((PinCFG->Mode == OUTPUT) || (PinCFG->Mode == ALTERNATIVE_FUNCTION))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	789b      	ldrb	r3, [r3, #2]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d004      	beq.n	8000a92 <GPIO_u8PinInit+0xf6>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	789b      	ldrb	r3, [r3, #2]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	f040 80a8 	bne.w	8000be2 <GPIO_u8PinInit+0x246>
            {
                /* select output type : Push pull , op(en drain  */
                 (GPIOPort[PinCFG->Port]->OTYPER) &= ~( OTYPER_MASK << (PinCFG->PinNum));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b56      	ldr	r3, [pc, #344]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9e:	6859      	ldr	r1, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	785b      	ldrb	r3, [r3, #1]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	4093      	lsls	r3, r2
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	4b50      	ldr	r3, [pc, #320]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000ab4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ab8:	400a      	ands	r2, r1
 8000aba:	605a      	str	r2, [r3, #4]
                 (GPIOPort[PinCFG->Port]->OTYPER) |=  ( (PinCFG->OutputType)  << (PinCFG->PinNum) );
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	785b      	ldrb	r3, [r3, #1]
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	4619      	mov	r1, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	4b44      	ldr	r3, [pc, #272]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000ae2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	605a      	str	r2, [r3, #4]

                /* Select output speed : Low Meduim High Fast */
                  (GPIOPort[PinCFG->Port]->OSPEEDER) &= ~(OSPEEDER_MASK << ((PinCFG->PinNum) * OSPEEDER_PIN_ACCESS)); 
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b40      	ldr	r3, [pc, #256]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2103      	movs	r1, #3
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4619      	mov	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000b10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b14:	400a      	ands	r2, r1
 8000b16:	609a      	str	r2, [r3, #8]
                  (GPIOPort[PinCFG->Port]->OSPEEDER) |=  ((PinCFG->Speed) << ((PinCFG->PinNum) * OSPEEDER_PIN_ACCESS));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	78db      	ldrb	r3, [r3, #3]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	785b      	ldrb	r3, [r3, #1]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	4619      	mov	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000b40:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b44:	430a      	orrs	r2, r1
 8000b46:	609a      	str	r2, [r3, #8]
            
                /* Select the pin alternative function */
                if ((PinCFG->Mode == ALTERNATIVE_FUNCTION))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	789b      	ldrb	r3, [r3, #2]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d148      	bne.n	8000be2 <GPIO_u8PinInit+0x246>
                {
                    uint8_t Local_u8RegNum = (PinCFG->PinNum) / AFR_PIN_SHIFTING ;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	785b      	ldrb	r3, [r3, #1]
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	73bb      	strb	r3, [r7, #14]
                    uint8_t Local_u8BitNum = (PinCFG->PinNum) % AFR_PIN_SHIFTING ;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	737b      	strb	r3, [r7, #13]

                    (GPIOPort[PinCFG->Port]->AFR[Local_u8RegNum]) &= ~(AFR_MASK << (Local_u8BitNum * AFR_PIN_ACCESS) );
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6e:	7bba      	ldrb	r2, [r7, #14]
 8000b70:	3208      	adds	r2, #8
 8000b72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b76:	7b7b      	ldrb	r3, [r7, #13]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b90:	7bba      	ldrb	r2, [r7, #14]
 8000b92:	4001      	ands	r1, r0
 8000b94:	3208      	adds	r2, #8
 8000b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    (GPIOPort[PinCFG->Port]->AFR[Local_u8RegNum]) |=  (( PinCFG->AltFunc) << (Local_u8BitNum * AFR_PIN_ACCESS) );
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba6:	7bba      	ldrb	r2, [r7, #14]
 8000ba8:	3208      	adds	r2, #8
 8000baa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	799b      	ldrb	r3, [r3, #6]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	7b7b      	ldrb	r3, [r7, #13]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <GPIO_u8PinInit+0x258>)
 8000bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bca:	7bba      	ldrb	r2, [r7, #14]
 8000bcc:	4301      	orrs	r1, r0
 8000bce:	3208      	adds	r2, #8
 8000bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if ((PinCFG->Mode == OUTPUT) || (PinCFG->Mode == ALTERNATIVE_FUNCTION))
 8000bd4:	e005      	b.n	8000be2 <GPIO_u8PinInit+0x246>


       }
       else
       {
            Local_u8ErrorState = NOK ;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e003      	b.n	8000be4 <GPIO_u8PinInit+0x248>
       
       
    }
    else
    {
        Local_u8ErrorState = NULL_PTR_ERR ;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e000      	b.n	8000be4 <GPIO_u8PinInit+0x248>
            if ((PinCFG->Mode == OUTPUT) || (PinCFG->Mode == ALTERNATIVE_FUNCTION))
 8000be2:	bf00      	nop
    




    return Local_u8ErrorState ;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000098 	.word	0x20000098

08000bf8 <I2C_Init>:

I2C_Reg_t* I2C[3] = {I2C1 ,I2C2 ,I2C3 };


ErrorState_t I2C_Init(I2C_config_t* Init)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_ErrState = I2C_OK;
 8000c00:	2307      	movs	r3, #7
 8000c02:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 8167 	beq.w	8000eda <I2C_Init+0x2e2>
	{
		uint32_t CCR_VALUE;

		/*ENABLE PERIPHERAL*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (SET_BIT_MASK << CR1_PE);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4ba8      	ldr	r3, [pc, #672]	; (8000eb4 <I2C_Init+0x2bc>)
 8000c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4ba4      	ldr	r3, [pc, #656]	; (8000eb4 <I2C_Init+0x2bc>)
 8000c22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c26:	f022 0201 	bic.w	r2, r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]

		/*RESET I2C*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (1 << CR1_SWRST);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4ba0      	ldr	r3, [pc, #640]	; (8000eb4 <I2C_Init+0x2bc>)
 8000c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4b9c      	ldr	r3, [pc, #624]	; (8000eb4 <I2C_Init+0x2bc>)
 8000c42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c4a:	601a      	str	r2, [r3, #0]
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (1 << CR1_SWRST);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b98      	ldr	r3, [pc, #608]	; (8000eb4 <I2C_Init+0x2bc>)
 8000c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4b94      	ldr	r3, [pc, #592]	; (8000eb4 <I2C_Init+0x2bc>)
 8000c62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c6a:	601a      	str	r2, [r3, #0]

		/*I2C APB peripheral clk*/
		I2C[Init->I2C_NUMBER]->I2C_CR2 &=~ (0x3F << CR2_FREQ_0);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b90      	ldr	r3, [pc, #576]	; (8000eb4 <I2C_Init+0x2bc>)
 8000c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4b8c      	ldr	r3, [pc, #560]	; (8000eb4 <I2C_Init+0x2bc>)
 8000c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c86:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000c8a:	605a      	str	r2, [r3, #4]
		I2C[Init->I2C_NUMBER]->I2C_CR2 |= (Init->I2C_FREQ << CR2_FREQ_0);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b88      	ldr	r3, [pc, #544]	; (8000eb4 <I2C_Init+0x2bc>)
 8000c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7a1b      	ldrb	r3, [r3, #8]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	4b83      	ldr	r3, [pc, #524]	; (8000eb4 <I2C_Init+0x2bc>)
 8000ca8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	605a      	str	r2, [r3, #4]

		/*Rise Time*/
		I2C[Init->I2C_NUMBER]->I2C_TRISE &=~ 0x13;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b7f      	ldr	r3, [pc, #508]	; (8000eb4 <I2C_Init+0x2bc>)
 8000cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbc:	6a1a      	ldr	r2, [r3, #32]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4b7b      	ldr	r3, [pc, #492]	; (8000eb4 <I2C_Init+0x2bc>)
 8000cc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cca:	f022 0213 	bic.w	r2, r2, #19
 8000cce:	621a      	str	r2, [r3, #32]
		I2C[Init->I2C_NUMBER]->I2C_TRISE |= 0x11;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b77      	ldr	r3, [pc, #476]	; (8000eb4 <I2C_Init+0x2bc>)
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	6a1a      	ldr	r2, [r3, #32]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4b73      	ldr	r3, [pc, #460]	; (8000eb4 <I2C_Init+0x2bc>)
 8000ce6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cea:	f042 0211 	orr.w	r2, r2, #17
 8000cee:	621a      	str	r2, [r3, #32]

		/*calculate Rise Time*/
		/*STANDARD MODE*/
		I2C[Init->I2C_NUMBER]->I2C_CCR &=~ ( SET_BIT_MASK << 15 );
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b6f      	ldr	r3, [pc, #444]	; (8000eb4 <I2C_Init+0x2bc>)
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	69da      	ldr	r2, [r3, #28]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	4619      	mov	r1, r3
 8000d04:	4b6b      	ldr	r3, [pc, #428]	; (8000eb4 <I2C_Init+0x2bc>)
 8000d06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d0e:	61da      	str	r2, [r3, #28]
		I2C[Init->I2C_NUMBER]->I2C_CCR |= ( Init->I2C_SPEED_MODE << 15 );
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b67      	ldr	r3, [pc, #412]	; (8000eb4 <I2C_Init+0x2bc>)
 8000d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1c:	69da      	ldr	r2, [r3, #28]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	789b      	ldrb	r3, [r3, #2]
 8000d22:	03db      	lsls	r3, r3, #15
 8000d24:	4619      	mov	r1, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	4b61      	ldr	r3, [pc, #388]	; (8000eb4 <I2C_Init+0x2bc>)
 8000d2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	61da      	str	r2, [r3, #28]

		/*Calculate CCR Register Value*/
		CCR_VALUE = ((Init->I2C_FREQ) * (1000));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7a1b      	ldrb	r3, [r3, #8]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d40:	fb02 f303 	mul.w	r3, r2, r3
 8000d44:	60bb      	str	r3, [r7, #8]
		CCR_VALUE /= (Init->I2C_SCL_FREQ);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	88db      	ldrh	r3, [r3, #6]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
		CCR_VALUE /= 2;
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	085b      	lsrs	r3, r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
		/*Set Clock*/
		I2C[Init->I2C_NUMBER]->I2C_CCR |= CCR_VALUE ;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b54      	ldr	r3, [pc, #336]	; (8000eb4 <I2C_Init+0x2bc>)
 8000d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d66:	69d9      	ldr	r1, [r3, #28]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <I2C_Init+0x2bc>)
 8000d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	430a      	orrs	r2, r1
 8000d78:	61da      	str	r2, [r3, #28]

		/*clock Sretching*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (1 << CR1_NOSTRETCH);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b4c      	ldr	r3, [pc, #304]	; (8000eb4 <I2C_Init+0x2bc>)
 8000d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4b49      	ldr	r3, [pc, #292]	; (8000eb4 <I2C_Init+0x2bc>)
 8000d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d98:	601a      	str	r2, [r3, #0]
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (Init->I2C_STRETCHING << CR1_NOSTRETCH);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <I2C_Init+0x2bc>)
 8000da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	78db      	ldrb	r3, [r3, #3]
 8000dac:	01db      	lsls	r3, r3, #7
 8000dae:	4619      	mov	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <I2C_Init+0x2bc>)
 8000db8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]

		/*packet error cheching PEC*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (1 << CR1_PEC);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <I2C_Init+0x2bc>)
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <I2C_Init+0x2bc>)
 8000dd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000dda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dde:	601a      	str	r2, [r3, #0]
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (Init->I2C_PEC << CR1_PEC);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <I2C_Init+0x2bc>)
 8000de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	791b      	ldrb	r3, [r3, #4]
 8000df2:	031b      	lsls	r3, r3, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <I2C_Init+0x2bc>)
 8000dfe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]

		/**/
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (1 << CR1_ENGC);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <I2C_Init+0x2bc>)
 8000e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <I2C_Init+0x2bc>)
 8000e1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e24:	601a      	str	r2, [r3, #0]

		/*Address mode*/
		I2C[Init->I2C_NUMBER]->I2C_OAR1 &=~ (1 << OAR1_ADDMODE);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <I2C_Init+0x2bc>)
 8000e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <I2C_Init+0x2bc>)
 8000e3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e44:	609a      	str	r2, [r3, #8]
		I2C[Init->I2C_NUMBER]->I2C_OAR1 |= (Init->I2C_ADD_MODE << OAR1_ADDMODE);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <I2C_Init+0x2bc>)
 8000e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	795b      	ldrb	r3, [r3, #5]
 8000e58:	03db      	lsls	r3, r3, #15
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <I2C_Init+0x2bc>)
 8000e64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	609a      	str	r2, [r3, #8]

		/*Own address*/
		I2C[Init->I2C_NUMBER]->I2C_OAR1 &=~ (0x07F << OAR1_ADD1);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <I2C_Init+0x2bc>)
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <I2C_Init+0x2bc>)
 8000e82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e86:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8000e8a:	609a      	str	r2, [r3, #8]
		I2C[Init->I2C_NUMBER]->I2C_OAR1 |= (Init->I2C_OWN_ADD << OAR1_ADD1);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <I2C_Init+0x2bc>)
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7a5b      	ldrb	r3, [r3, #9]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	4b02      	ldr	r3, [pc, #8]	; (8000eb4 <I2C_Init+0x2bc>)
 8000eaa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	e001      	b.n	8000eb8 <I2C_Init+0x2c0>
 8000eb4:	200000b8 	.word	0x200000b8

		/*ENABLE PERIPHERAL*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (SET_BIT_MASK << CR1_PE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <I2C_Init+0x2f4>)
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <I2C_Init+0x2f4>)
 8000ece:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ed2:	f042 0201 	orr.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e001      	b.n	8000ede <I2C_Init+0x2e6>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8000eda:	230b      	movs	r3, #11
 8000edc:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]


}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	200000b8 	.word	0x200000b8

08000ef0 <I2C_SendStartCondition>:

/**/
ErrorState_t I2C_SendStartCondition(I2C_config_t* Init)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

	ErrorState_t Local_ErrState = I2C_OK;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d016      	beq.n	8000f30 <I2C_SendStartCondition+0x40>
	{
		/*START CONDITION*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (SET_BIT_MASK << CR1_START);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <I2C_SendStartCondition+0x50>)
 8000f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <I2C_SendStartCondition+0x50>)
 8000f18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f20:	601a      	str	r2, [r3, #0]
		/*wait for SB=1 , then write address to DR*/
		Local_ErrState = WaitForR1Flag(Init, SR1_SB);
 8000f22:	2100      	movs	r1, #0
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 fa05 	bl	8001334 <WaitForR1Flag>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e001      	b.n	8000f34 <I2C_SendStartCondition+0x44>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8000f30:	230b      	movs	r3, #11
 8000f32:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000b8 	.word	0x200000b8

08000f44 <I2C_SendStopCondition>:

/**/
ErrorState_t I2C_SendStopCondition(I2C_config_t* Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	ErrorState_t Local_ErrState = I2C_OK;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d010      	beq.n	8000f78 <I2C_SendStopCondition+0x34>
	{
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (SET_BIT_MASK << CR1_STOP);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <I2C_SendStopCondition+0x48>)
 8000f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <I2C_SendStopCondition+0x48>)
 8000f6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e001      	b.n	8000f7c <I2C_SendStopCondition+0x38>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8000f78:	230b      	movs	r3, #11
 8000f7a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000b8 	.word	0x200000b8

08000f90 <I2C_MasterTransmitData>:

	WaitForR1Flag(Init, SR1_BTF);
}

ErrorState_t I2C_MasterTransmitData(I2C_config_t* Init ,uint8_t Address,uint8_t* u8Data ,uint8_t u8size)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	72fb      	strb	r3, [r7, #11]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	72bb      	strb	r3, [r7, #10]
	ErrorState_t Local_ErrState = I2C_OK;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	75fb      	strb	r3, [r7, #23]
	uint16_t Local_FlagVal=0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	82bb      	strh	r3, [r7, #20]
	uint8_t u8Counter=0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	75bb      	strb	r3, [r7, #22]

	if(Init != NULL)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d060      	beq.n	8001078 <I2C_MasterTransmitData+0xe8>
	{

		WaitForBusyFlag(Init);
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f992 	bl	80012e0 <WaitForBusyFlag>

		//I2C_EnableAck(Init);

		/*START CONDITION*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (1 << CR1_START);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <I2C_MasterTransmitData+0xf8>)
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <I2C_MasterTransmitData+0xf8>)
 8000fd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fda:	601a      	str	r2, [r3, #0]
		/*wait for SB=1 , then write address to DR*/
		WaitForR1Flag(Init, SR1_SB);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f9a8 	bl	8001334 <WaitForR1Flag>

		/*write address to DR*/
		I2C[Init->I2C_NUMBER]->I2C_DR = Address;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <I2C_MasterTransmitData+0xf8>)
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	7afa      	ldrb	r2, [r7, #11]
 8000ff2:	611a      	str	r2, [r3, #16]
		/*wait ADDR=1*/
		WaitForR1Flag(Init, SR1_ADDR);
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f99c 	bl	8001334 <WaitForR1Flag>
		/*Clear ADDR by reading SR1 and SR2*/
		Local_FlagVal = I2C[Init->I2C_NUMBER]->I2C_SR1;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <I2C_MasterTransmitData+0xf8>)
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	82bb      	strh	r3, [r7, #20]
		Local_FlagVal = I2C[Init->I2C_NUMBER]->I2C_SR2;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <I2C_MasterTransmitData+0xf8>)
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	82bb      	strh	r3, [r7, #20]

		for(u8Counter=0;u8Counter<u8size;u8Counter++)
 800101c:	2300      	movs	r3, #0
 800101e:	75bb      	strb	r3, [r7, #22]
 8001020:	e011      	b.n	8001046 <I2C_MasterTransmitData+0xb6>
		{
			WaitForR1Flag(Init, SR1_TxE);
 8001022:	2107      	movs	r1, #7
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 f985 	bl	8001334 <WaitForR1Flag>
			/*TXE=1, Write data*/
			I2C[Init->I2C_NUMBER]->I2C_DR = u8Data[u8Counter];
 800102a:	7dbb      	ldrb	r3, [r7, #22]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <I2C_MasterTransmitData+0xf8>)
 800103a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800103e:	611a      	str	r2, [r3, #16]
		for(u8Counter=0;u8Counter<u8size;u8Counter++)
 8001040:	7dbb      	ldrb	r3, [r7, #22]
 8001042:	3301      	adds	r3, #1
 8001044:	75bb      	strb	r3, [r7, #22]
 8001046:	7dba      	ldrb	r2, [r7, #22]
 8001048:	7abb      	ldrb	r3, [r7, #10]
 800104a:	429a      	cmp	r2, r3
 800104c:	d3e9      	bcc.n	8001022 <I2C_MasterTransmitData+0x92>

		}

		WaitForR1Flag(Init, SR1_BTF);
 800104e:	2102      	movs	r1, #2
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 f96f 	bl	8001334 <WaitForR1Flag>
		//while( ((I2C[Init->I2C_NUMBER]->I2C_SR1 >> SR1_BTF) & GET_BIT_MASK) != I2C_READY_FLAG )
		/*Stop Condition*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (1 << CR1_STOP);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <I2C_MasterTransmitData+0xf8>)
 800105e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <I2C_MasterTransmitData+0xf8>)
 800106c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e001      	b.n	800107c <I2C_MasterTransmitData+0xec>

	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8001078:	230b      	movs	r3, #11
 800107a:	75fb      	strb	r3, [r7, #23]
	}


	return Local_ErrState;
 800107c:	7dfb      	ldrb	r3, [r7, #23]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000b8 	.word	0x200000b8

0800108c <I2C_MasterReceiveData>:

ErrorState_t I2C_MasterReceiveData(I2C_config_t* Init ,uint8_t* u8Data )
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
	ErrorState_t Local_ErrState = I2C_OK;
 8001096:	2307      	movs	r3, #7
 8001098:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00e      	beq.n	80010be <I2C_MasterReceiveData+0x32>
	{
		WaitForR1Flag(Init, SR1_RxNE);
 80010a0:	2106      	movs	r1, #6
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f946 	bl	8001334 <WaitForR1Flag>

		*u8Data = (uint8_t)I2C[Init->I2C_NUMBER]->I2C_DR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <I2C_MasterReceiveData+0x40>)
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e001      	b.n	80010c2 <I2C_MasterReceiveData+0x36>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 80010be:	230b      	movs	r3, #11
 80010c0:	73fb      	strb	r3, [r7, #15]
	}


	return Local_ErrState;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000b8 	.word	0x200000b8

080010d0 <I2C_MasterRequestWrite>:


/*********************************************************************************************/
/*SendAddressPacketMTransmitter*/
ErrorState_t I2C_MasterRequestWrite(I2C_config_t* Init, uint8_t u8Address)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	ErrorState_t Local_ErrState = I2C_OK;
 80010dc:	2307      	movs	r3, #7
 80010de:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d03f      	beq.n	8001166 <I2C_MasterRequestWrite+0x96>
	{
		Local_ErrState = WaitForBusyFlag(Init);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f8fa 	bl	80012e0 <WaitForBusyFlag>
 80010ec:	4603      	mov	r3, r0
 80010ee:	73fb      	strb	r3, [r7, #15]
		if(Local_ErrState ==  I2C_TIMEOUT)
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d124      	bne.n	8001140 <I2C_MasterRequestWrite+0x70>
		{
			I2C[Init->I2C_NUMBER]->I2C_CR1 |= (1 << CR1_SWRST);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <I2C_MasterRequestWrite+0xa4>)
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <I2C_MasterRequestWrite+0xa4>)
 800110c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001114:	601a      	str	r2, [r3, #0]
			I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (1 << CR1_SWRST);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <I2C_MasterRequestWrite+0xa4>)
 800111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <I2C_MasterRequestWrite+0xa4>)
 800112c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001134:	601a      	str	r2, [r3, #0]

			Local_ErrState = I2C_Init(Init);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fd5e 	bl	8000bf8 <I2C_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	73fb      	strb	r3, [r7, #15]
		}

		//I2C_EnableAck(Init);

		/*START CONDITION*/
		I2C_SendStartCondition(Init);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fed5 	bl	8000ef0 <I2C_SendStartCondition>

		/*write address to DR*/
		I2C[Init->I2C_NUMBER]->I2C_DR = (uint32_t)u8Address;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <I2C_MasterRequestWrite+0xa4>)
 800114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	611a      	str	r2, [r3, #16]

		/*wait ADDR=1*/
		WaitForR1Flag(Init, SR1_ADDR);
 8001156:	2101      	movs	r1, #1
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f8eb 	bl	8001334 <WaitForR1Flag>

		/*Clear ADDR by reading SR1 and SR2*/
		ClearFlag(Init);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f89e 	bl	80012a0 <ClearFlag>
 8001164:	e001      	b.n	800116a <I2C_MasterRequestWrite+0x9a>

	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8001166:	230b      	movs	r3, #11
 8001168:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200000b8 	.word	0x200000b8

08001178 <I2C_SendDataPacket>:

void I2C_SendDataPacket(I2C_config_t* Init ,uint8_t u8Data )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	WaitForR1Flag(Init, SR1_TxE);
 8001184:	2107      	movs	r1, #7
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f8d4 	bl	8001334 <WaitForR1Flag>
	/*TXE=1, Write data*/
	I2C[Init->I2C_NUMBER]->I2C_DR = u8Data;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <I2C_SendDataPacket+0x34>)
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	78fa      	ldrb	r2, [r7, #3]
 800119a:	611a      	str	r2, [r3, #16]

	WaitForR1Flag(Init, SR1_BTF);
 800119c:	2102      	movs	r1, #2
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f8c8 	bl	8001334 <WaitForR1Flag>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000b8 	.word	0x200000b8

080011b0 <I2C_MasterRequestRead>:


/*I2C_SendAddressPacketMReceiver*/
ErrorState_t I2C_MasterRequestRead(I2C_config_t* Init, uint8_t u8Address)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	70fb      	strb	r3, [r7, #3]
	ErrorState_t Local_ErrState = I2C_OK;
 80011bc:	2307      	movs	r3, #7
 80011be:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d017      	beq.n	80011f6 <I2C_MasterRequestRead+0x46>
	{
		I2C_EnableAck(Init);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f81e 	bl	8001208 <I2C_EnableAck>

		/*START CONDITION*/
		I2C_SendStartCondition(Init);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fe8f 	bl	8000ef0 <I2C_SendStartCondition>

		/*write address to DR*/
		I2C[Init->I2C_NUMBER]->I2C_DR = u8Address;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <I2C_MasterRequestRead+0x54>)
 80011da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011de:	78fa      	ldrb	r2, [r7, #3]
 80011e0:	611a      	str	r2, [r3, #16]



		/*wait ADDR=1*/
		Local_ErrState = WaitForR1Flag(Init, SR1_ADDR);
 80011e2:	2101      	movs	r1, #1
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f8a5 	bl	8001334 <WaitForR1Flag>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]

		/*Clear ADDR by reading SR1 and SR2*/
		ClearFlag(Init);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f856 	bl	80012a0 <ClearFlag>
 80011f4:	e001      	b.n	80011fa <I2C_MasterRequestRead+0x4a>

	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 80011f6:	230b      	movs	r3, #11
 80011f8:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200000b8 	.word	0x200000b8

08001208 <I2C_EnableAck>:
/********************************************************************************
 ****************** ### PRIVATE FUNCTION SECTION ### ***************************
 ********************************************************************************/

ErrorState_t I2C_EnableAck(I2C_config_t* Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

	ErrorState_t Local_ErrState = I2C_OK;
 8001210:	2307      	movs	r3, #7
 8001212:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d010      	beq.n	800123c <I2C_EnableAck+0x34>
	{
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (SET_BIT_MASK << 10);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <I2C_EnableAck+0x48>)
 8001222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <I2C_EnableAck+0x48>)
 8001230:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	e001      	b.n	8001240 <I2C_EnableAck+0x38>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 800123c:	230b      	movs	r3, #11
 800123e:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200000b8 	.word	0x200000b8

08001254 <I2C_DisableAck>:

ErrorState_t I2C_DisableAck(I2C_config_t* Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

	ErrorState_t Local_ErrState = I2C_OK;
 800125c:	2307      	movs	r3, #7
 800125e:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d010      	beq.n	8001288 <I2C_DisableAck+0x34>
	{
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (SET_BIT_MASK << 10);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <I2C_DisableAck+0x48>)
 800126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <I2C_DisableAck+0x48>)
 800127c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e001      	b.n	800128c <I2C_DisableAck+0x38>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8001288:	230b      	movs	r3, #11
 800128a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200000b8 	.word	0x200000b8

080012a0 <ClearFlag>:

uint16_t ClearFlag(I2C_config_t* Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	uint16_t Local_FlagVal = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	81fb      	strh	r3, [r7, #14]

	Local_FlagVal = I2C[Init->I2C_NUMBER]->I2C_SR1;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <ClearFlag+0x3c>)
 80012b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	81fb      	strh	r3, [r7, #14]
	Local_FlagVal = I2C[Init->I2C_NUMBER]->I2C_SR2;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <ClearFlag+0x3c>)
 80012c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	81fb      	strh	r3, [r7, #14]

	return Local_FlagVal;
 80012cc:	89fb      	ldrh	r3, [r7, #14]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200000b8 	.word	0x200000b8

080012e0 <WaitForBusyFlag>:

ErrorState_t WaitForBusyFlag(I2C_config_t* Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_ErrState = I2C_OK;
 80012e8:	2307      	movs	r3, #7
 80012ea:	72fb      	strb	r3, [r7, #11]

	uint32_t Loacl_u32TimeOut=0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
	while( ((I2C[Init->I2C_NUMBER]->I2C_SR2 >> SR2_BUSY) & GET_BIT_MASK) == 1 )
 80012f0:	e008      	b.n	8001304 <WaitForBusyFlag+0x24>
	{
		Loacl_u32TimeOut++;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3301      	adds	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
		if(Loacl_u32TimeOut > IIC_MAX_TIMEOUT)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4a0c      	ldr	r2, [pc, #48]	; (800132c <WaitForBusyFlag+0x4c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d901      	bls.n	8001304 <WaitForBusyFlag+0x24>
		{
			return I2C_TIMEOUT;
 8001300:	230a      	movs	r3, #10
 8001302:	e00c      	b.n	800131e <WaitForBusyFlag+0x3e>
	while( ((I2C[Init->I2C_NUMBER]->I2C_SR2 >> SR2_BUSY) & GET_BIT_MASK) == 1 )
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <WaitForBusyFlag+0x50>)
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b01      	cmp	r3, #1
 800131a:	d0ea      	beq.n	80012f2 <WaitForBusyFlag+0x12>
		}
	}
	return Local_ErrState;
 800131c:	7afb      	ldrb	r3, [r7, #11]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	0007a120 	.word	0x0007a120
 8001330:	200000b8 	.word	0x200000b8

08001334 <WaitForR1Flag>:

ErrorState_t WaitForR1Flag(I2C_config_t* Init ,I2C_SR1_t copy_FlagID)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
	ErrorState_t Local_ErrState = I2C_OK;
 8001340:	2307      	movs	r3, #7
 8001342:	72fb      	strb	r3, [r7, #11]

	uint32_t Loacl_u32TimeOut=0;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
	while( ((I2C[Init->I2C_NUMBER]->I2C_SR1 >> copy_FlagID)&GET_BIT_MASK) != I2C_READY_FLAG )
 8001348:	e008      	b.n	800135c <WaitForR1Flag+0x28>
	{
		Loacl_u32TimeOut++;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3301      	adds	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
		if(Loacl_u32TimeOut > IIC_MAX_TIMEOUT)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <WaitForR1Flag+0x54>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <WaitForR1Flag+0x28>
		{
			return I2C_TIMEOUT;
 8001358:	230a      	movs	r3, #10
 800135a:	e00e      	b.n	800137a <WaitForR1Flag+0x46>
	while( ((I2C[Init->I2C_NUMBER]->I2C_SR1 >> copy_FlagID)&GET_BIT_MASK) != I2C_READY_FLAG )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <WaitForR1Flag+0x58>)
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b01      	cmp	r3, #1
 8001376:	d1e8      	bne.n	800134a <WaitForR1Flag+0x16>
		}
	}
	return Local_ErrState;
 8001378:	7afb      	ldrb	r3, [r7, #11]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	0007a120 	.word	0x0007a120
 800138c:	200000b8 	.word	0x200000b8

08001390 <LOGIN_IsValid>:




LOGIN_t LOGIN_IsValid(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
    LOGIN_t LOCAL_Check = INVALID ;
 8001396:	2300      	movs	r3, #0
 8001398:	75fb      	strb	r3, [r7, #23]
    uint8_t LOCAL_u8Id[ID_LENGTH] = "1234" ;
 800139a:	4a51      	ldr	r2, [pc, #324]	; (80014e0 <LOGIN_IsValid+0x150>)
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a4:	6018      	str	r0, [r3, #0]
 80013a6:	3304      	adds	r3, #4
 80013a8:	7019      	strb	r1, [r3, #0]
    uint8_t LOCAL_u8Password[PASSWORD_LENGTH] = "4321" ;
 80013aa:	4a4e      	ldr	r2, [pc, #312]	; (80014e4 <LOGIN_IsValid+0x154>)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b2:	6018      	str	r0, [r3, #0]
 80013b4:	3304      	adds	r3, #4
 80013b6:	7019      	strb	r1, [r3, #0]
    uint8_t ID = 1 ;
 80013b8:	2301      	movs	r3, #1
 80013ba:	75bb      	strb	r3, [r7, #22]
    uint8_t Password = 1 ;
 80013bc:	2301      	movs	r3, #1
 80013be:	757b      	strb	r3, [r7, #21]
    uint8_t LoginIterator  ;
    Print("\r\n Welcome to the alarm system .....\r\n");
 80013c0:	4849      	ldr	r0, [pc, #292]	; (80014e8 <LOGIN_IsValid+0x158>)
 80013c2:	f000 f90f 	bl	80015e4 <Print>
    for(LoginIterator=0 ; LoginIterator < TRIALS_NUM ; LoginIterator++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	753b      	strb	r3, [r7, #20]
 80013ca:	e073      	b.n	80014b4 <LOGIN_IsValid+0x124>
    {
        ID = 1 ;
 80013cc:	2301      	movs	r3, #1
 80013ce:	75bb      	strb	r3, [r7, #22]
    	Password = 1 ;
 80013d0:	2301      	movs	r3, #1
 80013d2:	757b      	strb	r3, [r7, #21]
        uint8_t i  ;
        Print("\r\n Enter ID : ");
 80013d4:	4845      	ldr	r0, [pc, #276]	; (80014ec <LOGIN_IsValid+0x15c>)
 80013d6:	f000 f905 	bl	80015e4 <Print>
        Input(LOCAL_u8Id ,4);
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2104      	movs	r1, #4
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f9b5 	bl	8001750 <Input>
        for ( i = 0; i < ID_LENGTH ; i++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	74fb      	strb	r3, [r7, #19]
 80013ea:	e00e      	b.n	800140a <LOGIN_IsValid+0x7a>
        {
            if(LOGIN_u8CheckId[i]!=LOCAL_u8Id[i])
 80013ec:	7cfb      	ldrb	r3, [r7, #19]
 80013ee:	4a40      	ldr	r2, [pc, #256]	; (80014f0 <LOGIN_IsValid+0x160>)
 80013f0:	5cd2      	ldrb	r2, [r2, r3]
 80013f2:	7cfb      	ldrb	r3, [r7, #19]
 80013f4:	3318      	adds	r3, #24
 80013f6:	443b      	add	r3, r7
 80013f8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <LOGIN_IsValid+0x74>
            {

                ID = 0 ;
 8001400:	2300      	movs	r3, #0
 8001402:	75bb      	strb	r3, [r7, #22]
        for ( i = 0; i < ID_LENGTH ; i++)
 8001404:	7cfb      	ldrb	r3, [r7, #19]
 8001406:	3301      	adds	r3, #1
 8001408:	74fb      	strb	r3, [r7, #19]
 800140a:	7cfb      	ldrb	r3, [r7, #19]
 800140c:	2b04      	cmp	r3, #4
 800140e:	d9ed      	bls.n	80013ec <LOGIN_IsValid+0x5c>

            }
        }
        Print("\r\n Enter Password : ");
 8001410:	4838      	ldr	r0, [pc, #224]	; (80014f4 <LOGIN_IsValid+0x164>)
 8001412:	f000 f8e7 	bl	80015e4 <Print>
        Input(LOCAL_u8Password ,4);
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2104      	movs	r1, #4
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f998 	bl	8001750 <Input>
        Print("\r\n");
 8001420:	4835      	ldr	r0, [pc, #212]	; (80014f8 <LOGIN_IsValid+0x168>)
 8001422:	f000 f8df 	bl	80015e4 <Print>

        for ( i = 0; i < PASSWORD_LENGTH ; i++)
 8001426:	2300      	movs	r3, #0
 8001428:	74fb      	strb	r3, [r7, #19]
 800142a:	e00e      	b.n	800144a <LOGIN_IsValid+0xba>
        {
            if(LOGIN_u8CheckPassword[i]!=LOCAL_u8Password[i])
 800142c:	7cfb      	ldrb	r3, [r7, #19]
 800142e:	4a33      	ldr	r2, [pc, #204]	; (80014fc <LOGIN_IsValid+0x16c>)
 8001430:	5cd2      	ldrb	r2, [r2, r3]
 8001432:	7cfb      	ldrb	r3, [r7, #19]
 8001434:	3318      	adds	r3, #24
 8001436:	443b      	add	r3, r7
 8001438:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <LOGIN_IsValid+0xb4>
            {
                Password = 0 ;
 8001440:	2300      	movs	r3, #0
 8001442:	757b      	strb	r3, [r7, #21]
        for ( i = 0; i < PASSWORD_LENGTH ; i++)
 8001444:	7cfb      	ldrb	r3, [r7, #19]
 8001446:	3301      	adds	r3, #1
 8001448:	74fb      	strb	r3, [r7, #19]
 800144a:	7cfb      	ldrb	r3, [r7, #19]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d9ed      	bls.n	800142c <LOGIN_IsValid+0x9c>
            }
        }
        if (ID == 1 && Password == 1 )
 8001450:	7dbb      	ldrb	r3, [r7, #22]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d105      	bne.n	8001462 <LOGIN_IsValid+0xd2>
 8001456:	7d7b      	ldrb	r3, [r7, #21]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d102      	bne.n	8001462 <LOGIN_IsValid+0xd2>
        {
          LOCAL_Check = VALID ;
 800145c:	2301      	movs	r3, #1
 800145e:	75fb      	strb	r3, [r7, #23]

         /* Print("\r\n Welcome Eslam ...");  */
            break;
 8001460:	e02b      	b.n	80014ba <LOGIN_IsValid+0x12a>
        }
         else if (ID==0 && Password ==1)
 8001462:	7dbb      	ldrb	r3, [r7, #22]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d106      	bne.n	8001476 <LOGIN_IsValid+0xe6>
 8001468:	7d7b      	ldrb	r3, [r7, #21]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d103      	bne.n	8001476 <LOGIN_IsValid+0xe6>
        {

         Print("\r\n Invalid Id ");
 800146e:	4824      	ldr	r0, [pc, #144]	; (8001500 <LOGIN_IsValid+0x170>)
 8001470:	f000 f8b8 	bl	80015e4 <Print>
 8001474:	e015      	b.n	80014a2 <LOGIN_IsValid+0x112>

        }
        else if (ID==1 && Password ==0)
 8001476:	7dbb      	ldrb	r3, [r7, #22]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d106      	bne.n	800148a <LOGIN_IsValid+0xfa>
 800147c:	7d7b      	ldrb	r3, [r7, #21]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d103      	bne.n	800148a <LOGIN_IsValid+0xfa>
        {
            Print("\r\n Invalid Password");
 8001482:	4820      	ldr	r0, [pc, #128]	; (8001504 <LOGIN_IsValid+0x174>)
 8001484:	f000 f8ae 	bl	80015e4 <Print>
 8001488:	e00b      	b.n	80014a2 <LOGIN_IsValid+0x112>

        }
        else if (ID==0 && Password ==0)
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d108      	bne.n	80014a2 <LOGIN_IsValid+0x112>
 8001490:	7d7b      	ldrb	r3, [r7, #21]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d105      	bne.n	80014a2 <LOGIN_IsValid+0x112>
        {
           Print("\r\n Invalid Id");
 8001496:	481c      	ldr	r0, [pc, #112]	; (8001508 <LOGIN_IsValid+0x178>)
 8001498:	f000 f8a4 	bl	80015e4 <Print>
            Print("\r\n Invalid Password");
 800149c:	4819      	ldr	r0, [pc, #100]	; (8001504 <LOGIN_IsValid+0x174>)
 800149e:	f000 f8a1 	bl	80015e4 <Print>

        }
        if(LoginIterator < TRIALS_NUM -1 )
 80014a2:	7d3b      	ldrb	r3, [r7, #20]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d802      	bhi.n	80014ae <LOGIN_IsValid+0x11e>

        {

            Print("\r\n\r\n Try Again....\r\n");
 80014a8:	4818      	ldr	r0, [pc, #96]	; (800150c <LOGIN_IsValid+0x17c>)
 80014aa:	f000 f89b 	bl	80015e4 <Print>
    for(LoginIterator=0 ; LoginIterator < TRIALS_NUM ; LoginIterator++)
 80014ae:	7d3b      	ldrb	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	753b      	strb	r3, [r7, #20]
 80014b4:	7d3b      	ldrb	r3, [r7, #20]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d988      	bls.n	80013cc <LOGIN_IsValid+0x3c>
        }

    }

    if (ID == 1 && Password == 1 )
 80014ba:	7dbb      	ldrb	r3, [r7, #22]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <LOGIN_IsValid+0x13c>
 80014c0:	7d7b      	ldrb	r3, [r7, #21]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d102      	bne.n	80014cc <LOGIN_IsValid+0x13c>
    {
        LOCAL_Check = VALID ;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
 80014ca:	e004      	b.n	80014d6 <LOGIN_IsValid+0x146>
    }

    else
    {
    	
        Print("\r\n\r\n Invalid Login ");
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <LOGIN_IsValid+0x180>)
 80014ce:	f000 f889 	bl	80015e4 <Print>

       LOCAL_Check = INVALID ;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]

    }

    return  LOCAL_Check ;
 80014d6:	7dfb      	ldrb	r3, [r7, #23]

}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	080024b0 	.word	0x080024b0
 80014e4:	080024b8 	.word	0x080024b8
 80014e8:	080023fc 	.word	0x080023fc
 80014ec:	08002424 	.word	0x08002424
 80014f0:	200000c4 	.word	0x200000c4
 80014f4:	08002434 	.word	0x08002434
 80014f8:	0800244c 	.word	0x0800244c
 80014fc:	200000cc 	.word	0x200000cc
 8001500:	08002450 	.word	0x08002450
 8001504:	08002460 	.word	0x08002460
 8001508:	08002474 	.word	0x08002474
 800150c:	08002484 	.word	0x08002484
 8001510:	0800249c 	.word	0x0800249c

08001514 <RCC_AHB1EnableClk>:
void RCC_APB2ResetClk(RCC_APB2ENR_t Copy_enPeripheral)
{
	RCC->APB2RSTR |= (1 << Copy_enPeripheral);
}
void RCC_AHB1EnableClk(RCC_AHB1ENR_t Copy_enPeripheral)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
     RCC->AHB1ENR |= (1 << Copy_enPeripheral);
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <RCC_AHB1EnableClk+0x2c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	2101      	movs	r1, #1
 8001526:	fa01 f202 	lsl.w	r2, r1, r2
 800152a:	4611      	mov	r1, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <RCC_AHB1EnableClk+0x2c>)
 800152e:	430b      	orrs	r3, r1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <RCC_APB1Enable>:
void RCC_AHB3DisableClk(RCC_AHB3ENR_t Copy_enPeripheral)
{
	RCC->AHB3ENR &= ~(1 << Copy_enPeripheral);
}
void RCC_APB1Enable(RCC_APB1ENR_t Copy_enPeripheral)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	RCC->APB1ENR |= (1 << Copy_enPeripheral);
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <RCC_APB1Enable+0x2c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	4611      	mov	r1, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <RCC_APB1Enable+0x2c>)
 800155e:	430b      	orrs	r3, r1
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <SYSTIC_delay_ms_IT>:

}


void SYSTIC_delay_ms_IT(uint32_t time)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

    

    uint32_t LOCAL_u32Value = (time *1000 *  AHB_CLOCK / 8 );
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001582:	fb02 f303 	mul.w	r3, r2, r3
 8001586:	08db      	lsrs	r3, r3, #3
 8001588:	60fb      	str	r3, [r7, #12]

    /* check if the value > the Register  available bits  */
    if(LOCAL_u32Value > 0xffffff)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d302      	bcc.n	8001598 <SYSTIC_delay_ms_IT+0x24>
    {
    	LOCAL_u32Value = 0xffffff ;
 8001592:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001596:	60fb      	str	r3, [r7, #12]
    }

    /* Set the SYSTIC CLOCK to the Processor clock source / 8  */
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_CLKSOURCE);
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <SYSTIC_delay_ms_IT+0x6c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <SYSTIC_delay_ms_IT+0x6c>)
 800159e:	f023 0304 	bic.w	r3, r3, #4
 80015a2:	6013      	str	r3, [r2, #0]

     /* set the value in the SysTick reload value register */
    SYSTIC->STK_LOAD |= LOCAL_u32Value ;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <SYSTIC_delay_ms_IT+0x6c>)
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	490d      	ldr	r1, [pc, #52]	; (80015e0 <SYSTIC_delay_ms_IT+0x6c>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]


    /* Clear the VAL Register to load the start of the down counter from the LOAD register */
       SYSTIC->STK_VAL &= 0b11111111<<24;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <SYSTIC_delay_ms_IT+0x6c>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SYSTIC_delay_ms_IT+0x6c>)
 80015b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80015ba:	6093      	str	r3, [r2, #8]

    /* Enable Exception For Busy Waiting */
	( SYSTIC->STK_CTRL ) |= ( 1 << 1 )  ;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <SYSTIC_delay_ms_IT+0x6c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <SYSTIC_delay_ms_IT+0x6c>)
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	6013      	str	r3, [r2, #0]



     /* Enable SYSTIC */
     SET_BIT(SYSTIC->STK_CTRL,STK_CTRL_ENABLE);
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SYSTIC_delay_ms_IT+0x6c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <SYSTIC_delay_ms_IT+0x6c>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6013      	str	r3, [r2, #0]

      
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <Print>:
uint8_t Alarm[5][7]={0};



void Print(uint8_t* Copy_pu8String)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	USART_voidTransmitStringSynch(USART_2 , Copy_pu8String);
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 fd40 	bl	8002074 <USART_voidTransmitStringSynch>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <Print_Time_Date>:
void Print_Time_Date(uint8_t* Copy_pu8String)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	SendChar(Copy_pu8String[4]);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f8b0 	bl	8001770 <SendChar>
	SendChar(Copy_pu8String[5]);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3305      	adds	r3, #5
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f8aa 	bl	8001770 <SendChar>
	Print(":");
 800161c:	4842      	ldr	r0, [pc, #264]	; (8001728 <Print_Time_Date+0x12c>)
 800161e:	f7ff ffe1 	bl	80015e4 <Print>
	SendChar(Copy_pu8String[2]);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3302      	adds	r3, #2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f8a1 	bl	8001770 <SendChar>
	SendChar(Copy_pu8String[3]);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3303      	adds	r3, #3
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f89b 	bl	8001770 <SendChar>
	Print(":");
 800163a:	483b      	ldr	r0, [pc, #236]	; (8001728 <Print_Time_Date+0x12c>)
 800163c:	f7ff ffd2 	bl	80015e4 <Print>
	SendChar(Copy_pu8String[0]);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f893 	bl	8001770 <SendChar>
	SendChar(Copy_pu8String[1]);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3301      	adds	r3, #1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f88d 	bl	8001770 <SendChar>
	Print("  ");
 8001656:	4835      	ldr	r0, [pc, #212]	; (800172c <Print_Time_Date+0x130>)
 8001658:	f7ff ffc4 	bl	80015e4 <Print>

	switch(Copy_pu8String[7])
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3307      	adds	r3, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3b31      	subs	r3, #49	; 0x31
 8001664:	2b06      	cmp	r3, #6
 8001666:	d82d      	bhi.n	80016c4 <Print_Time_Date+0xc8>
 8001668:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <Print_Time_Date+0x74>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	0800168d 	.word	0x0800168d
 8001674:	08001695 	.word	0x08001695
 8001678:	0800169d 	.word	0x0800169d
 800167c:	080016a5 	.word	0x080016a5
 8001680:	080016ad 	.word	0x080016ad
 8001684:	080016b5 	.word	0x080016b5
 8001688:	080016bd 	.word	0x080016bd
	{
	case '1' :
		Print("Monday  ");
 800168c:	4828      	ldr	r0, [pc, #160]	; (8001730 <Print_Time_Date+0x134>)
 800168e:	f7ff ffa9 	bl	80015e4 <Print>
		break;
 8001692:	e017      	b.n	80016c4 <Print_Time_Date+0xc8>
	case '2':
		Print("Tuesday  ");
 8001694:	4827      	ldr	r0, [pc, #156]	; (8001734 <Print_Time_Date+0x138>)
 8001696:	f7ff ffa5 	bl	80015e4 <Print>
		break;
 800169a:	e013      	b.n	80016c4 <Print_Time_Date+0xc8>
	case '3':
		Print("Wednesday  ");
 800169c:	4826      	ldr	r0, [pc, #152]	; (8001738 <Print_Time_Date+0x13c>)
 800169e:	f7ff ffa1 	bl	80015e4 <Print>
		break;
 80016a2:	e00f      	b.n	80016c4 <Print_Time_Date+0xc8>
	case '4':
		Print("Thursday  ");
 80016a4:	4825      	ldr	r0, [pc, #148]	; (800173c <Print_Time_Date+0x140>)
 80016a6:	f7ff ff9d 	bl	80015e4 <Print>
		break;
 80016aa:	e00b      	b.n	80016c4 <Print_Time_Date+0xc8>
	case '5':
		Print("Friday  ");
 80016ac:	4824      	ldr	r0, [pc, #144]	; (8001740 <Print_Time_Date+0x144>)
 80016ae:	f7ff ff99 	bl	80015e4 <Print>
		break;
 80016b2:	e007      	b.n	80016c4 <Print_Time_Date+0xc8>
	case '6':
		Print("Saturday  ");
 80016b4:	4823      	ldr	r0, [pc, #140]	; (8001744 <Print_Time_Date+0x148>)
 80016b6:	f7ff ff95 	bl	80015e4 <Print>
		break;
 80016ba:	e003      	b.n	80016c4 <Print_Time_Date+0xc8>
	case '7':
		Print("Sunday  ");
 80016bc:	4822      	ldr	r0, [pc, #136]	; (8001748 <Print_Time_Date+0x14c>)
 80016be:	f7ff ff91 	bl	80015e4 <Print>
		break;
 80016c2:	bf00      	nop
	}

	SendChar(Copy_pu8String[8]);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3308      	adds	r3, #8
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f850 	bl	8001770 <SendChar>
	SendChar(Copy_pu8String[9]);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3309      	adds	r3, #9
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f84a 	bl	8001770 <SendChar>
	Print("/");
 80016dc:	481b      	ldr	r0, [pc, #108]	; (800174c <Print_Time_Date+0x150>)
 80016de:	f7ff ff81 	bl	80015e4 <Print>
	SendChar(Copy_pu8String[10]);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	330a      	adds	r3, #10
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f841 	bl	8001770 <SendChar>
	SendChar(Copy_pu8String[11]);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	330b      	adds	r3, #11
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f83b 	bl	8001770 <SendChar>
	Print("/");
 80016fa:	4814      	ldr	r0, [pc, #80]	; (800174c <Print_Time_Date+0x150>)
 80016fc:	f7ff ff72 	bl	80015e4 <Print>
	SendChar(Copy_pu8String[12]);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	330c      	adds	r3, #12
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f832 	bl	8001770 <SendChar>
	SendChar(Copy_pu8String[13]);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	330d      	adds	r3, #13
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f82c 	bl	8001770 <SendChar>
	Print("  ");
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <Print_Time_Date+0x130>)
 800171a:	f7ff ff63 	bl	80015e4 <Print>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	080024c0 	.word	0x080024c0
 800172c:	080024c4 	.word	0x080024c4
 8001730:	080024c8 	.word	0x080024c8
 8001734:	080024d4 	.word	0x080024d4
 8001738:	080024e0 	.word	0x080024e0
 800173c:	080024ec 	.word	0x080024ec
 8001740:	080024f8 	.word	0x080024f8
 8001744:	08002504 	.word	0x08002504
 8001748:	08002510 	.word	0x08002510
 800174c:	0800251c 	.word	0x0800251c

08001750 <Input>:
void Input(uint8_t* Copy_pu8String , uint8_t Copy_u8size)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
	USART_u8ReceiveBufferSynch(USART_2 , Copy_pu8String  , Copy_u8size );
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	461a      	mov	r2, r3
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	2001      	movs	r0, #1
 8001764:	f000 fca6 	bl	80020b4 <USART_u8ReceiveBufferSynch>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <SendChar>:


void SendChar(uint8_t Copy_u8DataChar)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	USART_voidTransmitCharSynch(USART_2, Copy_u8DataChar);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4619      	mov	r1, r3
 800177e:	2001      	movs	r0, #1
 8001780:	f000 fc4c 	bl	800201c <USART_voidTransmitCharSynch>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <SRV_SetTimeNDate>:




void SRV_SetTimeNDate(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0

	uint8_t Local_u8TimeNDate[17];

	Print ( (uint8_t*)"\r\n Set Time and Date for the first time: ");
 8001792:	482f      	ldr	r0, [pc, #188]	; (8001850 <SRV_SetTimeNDate+0xc4>)
 8001794:	f7ff ff26 	bl	80015e4 <Print>
	Print ( (uint8_t*)"\r\n [1mHH:MM:SS DAY DD/MM/YY Format(0 for 12h, 1 for 24h)\r\n");
 8001798:	482e      	ldr	r0, [pc, #184]	; (8001854 <SRV_SetTimeNDate+0xc8>)
 800179a:	f7ff ff23 	bl	80015e4 <Print>
	//Hours
	ReadCurrentDnTFromUser(Local_u8TimeNDate);
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 f9a9 	bl	8001af8 <ReadCurrentDnTFromUser>

	RTC_DS1307_Config.SECONDS   = StringToHex(Local_u8TimeNDate[5], Local_u8TimeNDate[4]);
 80017a6:	7a7b      	ldrb	r3, [r7, #9]
 80017a8:	7a3a      	ldrb	r2, [r7, #8]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 f923 	bl	80019f8 <StringToHex>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b28      	ldr	r3, [pc, #160]	; (8001858 <SRV_SetTimeNDate+0xcc>)
 80017b8:	709a      	strb	r2, [r3, #2]
	RTC_DS1307_Config.MINUTES   = StringToHex(Local_u8TimeNDate[3], Local_u8TimeNDate[2]);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	79ba      	ldrb	r2, [r7, #6]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f919 	bl	80019f8 <StringToHex>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <SRV_SetTimeNDate+0xcc>)
 80017cc:	70da      	strb	r2, [r3, #3]
	RTC_DS1307_Config.HOURS     = StringToHex(Local_u8TimeNDate[1], Local_u8TimeNDate[0]);
 80017ce:	797b      	ldrb	r3, [r7, #5]
 80017d0:	793a      	ldrb	r2, [r7, #4]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 f90f 	bl	80019f8 <StringToHex>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <SRV_SetTimeNDate+0xcc>)
 80017e0:	711a      	strb	r2, [r3, #4]
	RTC_DS1307_Config.WEEK_DAY  = DayOfWeekToNumber(&Local_u8TimeNDate[6]);
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	3306      	adds	r3, #6
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f920 	bl	8001a2c <DayOfWeekToNumber>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <SRV_SetTimeNDate+0xcc>)
 80017f2:	721a      	strb	r2, [r3, #8]
	RTC_DS1307_Config.DAY		= StringToHex(Local_u8TimeNDate[10], Local_u8TimeNDate[9]);
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	7b7a      	ldrb	r2, [r7, #13]
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f8fc 	bl	80019f8 <StringToHex>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <SRV_SetTimeNDate+0xcc>)
 8001806:	715a      	strb	r2, [r3, #5]
	RTC_DS1307_Config.MONTH  	= StringToHex(Local_u8TimeNDate[12], Local_u8TimeNDate[11]);
 8001808:	7c3b      	ldrb	r3, [r7, #16]
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f8f2 	bl	80019f8 <StringToHex>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <SRV_SetTimeNDate+0xcc>)
 800181a:	719a      	strb	r2, [r3, #6]
	RTC_DS1307_Config.YEAR  	= StringToHex(Local_u8TimeNDate[14], Local_u8TimeNDate[13]);
 800181c:	7cbb      	ldrb	r3, [r7, #18]
 800181e:	7c7a      	ldrb	r2, [r7, #17]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f8e8 	bl	80019f8 <StringToHex>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <SRV_SetTimeNDate+0xcc>)
 800182e:	71da      	strb	r2, [r3, #7]

	RTC_DS1307_Config.TIME_FORMAT = Local_u8TimeNDate[15];
 8001830:	7cfa      	ldrb	r2, [r7, #19]
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <SRV_SetTimeNDate+0xcc>)
 8001834:	701a      	strb	r2, [r3, #0]

	RTC_DS1307_Config.AM_PM_NOTATION = Local_u8TimeNDate[16];
 8001836:	7d3a      	ldrb	r2, [r7, #20]
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <SRV_SetTimeNDate+0xcc>)
 800183a:	705a      	strb	r2, [r3, #1]

	RTC_SetTimeDate_(&I2C1_SysConfig,&RTC_DS1307_Config , 0);
 800183c:	2200      	movs	r2, #0
 800183e:	4906      	ldr	r1, [pc, #24]	; (8001858 <SRV_SetTimeNDate+0xcc>)
 8001840:	4806      	ldr	r0, [pc, #24]	; (800185c <SRV_SetTimeNDate+0xd0>)
 8001842:	f7fe ffdd 	bl	8000800 <RTC_SetTimeDate_>

}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	08002520 	.word	0x08002520
 8001854:	0800254c 	.word	0x0800254c
 8001858:	20000114 	.word	0x20000114
 800185c:	20000108 	.word	0x20000108

08001860 <SRV_ShowTimeNDate>:

void SRV_ShowTimeNDate(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	static uint8_t local_u8TimeNDate[RECEIVED_RTC_DATA_NUMBER]={0};
	static uint8_t Local_u8StringBridge[14]={0};
	uint8_t Local_u8Iterator;
	RTC_ReadTimeDate(&I2C1_SysConfig, &RTC_DS1307_Config, local_u8TimeNDate);
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <SRV_ShowTimeNDate+0x5c>)
 8001868:	4915      	ldr	r1, [pc, #84]	; (80018c0 <SRV_ShowTimeNDate+0x60>)
 800186a:	4816      	ldr	r0, [pc, #88]	; (80018c4 <SRV_ShowTimeNDate+0x64>)
 800186c:	f7ff f840 	bl	80008f0 <RTC_ReadTimeDate>

	local_u8TimeNDate[2] &=~ (0x60);
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <SRV_ShowTimeNDate+0x5c>)
 8001872:	789b      	ldrb	r3, [r3, #2]
 8001874:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <SRV_ShowTimeNDate+0x5c>)
 800187c:	709a      	strb	r2, [r3, #2]

	for(Local_u8Iterator=0;Local_u8Iterator <= RECEIVED_RTC_DATA_NUMBER;Local_u8Iterator++)
 800187e:	2300      	movs	r3, #0
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	e00d      	b.n	80018a0 <SRV_ShowTimeNDate+0x40>
	{
		//local_u8TimeNDate[Local_u8Iterator] = BCDToDecimal(local_u8TimeNDate[Local_u8Iterator]);
		HexToString(local_u8TimeNDate[Local_u8Iterator],&Local_u8StringBridge[Local_u8Iterator*2] );
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <SRV_ShowTimeNDate+0x5c>)
 8001888:	5cd2      	ldrb	r2, [r2, r3]
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	490e      	ldr	r1, [pc, #56]	; (80018c8 <SRV_ShowTimeNDate+0x68>)
 8001890:	440b      	add	r3, r1
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f000 fa13 	bl	8001cc0 <HexToString>
	for(Local_u8Iterator=0;Local_u8Iterator <= RECEIVED_RTC_DATA_NUMBER;Local_u8Iterator++)
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	3301      	adds	r3, #1
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	2b07      	cmp	r3, #7
 80018a4:	d9ee      	bls.n	8001884 <SRV_ShowTimeNDate+0x24>
	}
	Print (  (uint8_t*)"\r\n Time and Date:  ");
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <SRV_ShowTimeNDate+0x6c>)
 80018a8:	f7ff fe9c 	bl	80015e4 <Print>
	//Send( Local_u8StringBridge ,14);
	Print_Time_Date(Local_u8StringBridge);
 80018ac:	4806      	ldr	r0, [pc, #24]	; (80018c8 <SRV_ShowTimeNDate+0x68>)
 80018ae:	f7ff fea5 	bl	80015fc <Print_Time_Date>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000014c 	.word	0x2000014c
 80018c0:	20000114 	.word	0x20000114
 80018c4:	20000108 	.word	0x20000108
 80018c8:	20000154 	.word	0x20000154
 80018cc:	08002588 	.word	0x08002588

080018d0 <SRV_SetAlarm>:

void SRV_SetAlarm(uint8_t copy_u8AlarmNumber)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8Station[17];

	Print ( (uint8_t*)"\r\n Set Time and Date: ");
 80018da:	4844      	ldr	r0, [pc, #272]	; (80019ec <SRV_SetAlarm+0x11c>)
 80018dc:	f7ff fe82 	bl	80015e4 <Print>
	Print ( (uint8_t*)"\r\n [1mHH:MM:SS DAY DD/MM/YY Format(0 for 12h, 1 for 24h)\r\n");
 80018e0:	4843      	ldr	r0, [pc, #268]	; (80019f0 <SRV_SetAlarm+0x120>)
 80018e2:	f7ff fe7f 	bl	80015e4 <Print>

	ReadCurrentDnTFromUser(Local_u8Station);
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f904 	bl	8001af8 <ReadCurrentDnTFromUser>

	Alarm[copy_u8AlarmNumber][0]   = StringToHex(Local_u8Station[1], Local_u8Station[0]);
 80018f0:	7b7b      	ldrb	r3, [r7, #13]
 80018f2:	7b3a      	ldrb	r2, [r7, #12]
 80018f4:	79fc      	ldrb	r4, [r7, #7]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f87d 	bl	80019f8 <StringToHex>
 80018fe:	4603      	mov	r3, r0
 8001900:	4619      	mov	r1, r3
 8001902:	4a3c      	ldr	r2, [pc, #240]	; (80019f4 <SRV_SetAlarm+0x124>)
 8001904:	4623      	mov	r3, r4
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	1b1b      	subs	r3, r3, r4
 800190a:	4413      	add	r3, r2
 800190c:	460a      	mov	r2, r1
 800190e:	701a      	strb	r2, [r3, #0]
	Alarm[copy_u8AlarmNumber][1]   = StringToHex(Local_u8Station[3], Local_u8Station[2]);
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	7bba      	ldrb	r2, [r7, #14]
 8001914:	79fc      	ldrb	r4, [r7, #7]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f86d 	bl	80019f8 <StringToHex>
 800191e:	4603      	mov	r3, r0
 8001920:	4619      	mov	r1, r3
 8001922:	4a34      	ldr	r2, [pc, #208]	; (80019f4 <SRV_SetAlarm+0x124>)
 8001924:	4623      	mov	r3, r4
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	1b1b      	subs	r3, r3, r4
 800192a:	4413      	add	r3, r2
 800192c:	3301      	adds	r3, #1
 800192e:	460a      	mov	r2, r1
 8001930:	701a      	strb	r2, [r3, #0]
	Alarm[copy_u8AlarmNumber][2]   = StringToHex(Local_u8Station[5], Local_u8Station[4]);
 8001932:	7c7b      	ldrb	r3, [r7, #17]
 8001934:	7c3a      	ldrb	r2, [r7, #16]
 8001936:	79fc      	ldrb	r4, [r7, #7]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f85c 	bl	80019f8 <StringToHex>
 8001940:	4603      	mov	r3, r0
 8001942:	4619      	mov	r1, r3
 8001944:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <SRV_SetAlarm+0x124>)
 8001946:	4623      	mov	r3, r4
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	1b1b      	subs	r3, r3, r4
 800194c:	4413      	add	r3, r2
 800194e:	3302      	adds	r3, #2
 8001950:	460a      	mov	r2, r1
 8001952:	701a      	strb	r2, [r3, #0]
	Alarm[copy_u8AlarmNumber][3]   = DayOfWeekToNumber(&Local_u8Station[6]);
 8001954:	79fc      	ldrb	r4, [r7, #7]
 8001956:	f107 030c 	add.w	r3, r7, #12
 800195a:	3306      	adds	r3, #6
 800195c:	4618      	mov	r0, r3
 800195e:	f000 f865 	bl	8001a2c <DayOfWeekToNumber>
 8001962:	4603      	mov	r3, r0
 8001964:	4619      	mov	r1, r3
 8001966:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <SRV_SetAlarm+0x124>)
 8001968:	4623      	mov	r3, r4
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	1b1b      	subs	r3, r3, r4
 800196e:	4413      	add	r3, r2
 8001970:	3303      	adds	r3, #3
 8001972:	460a      	mov	r2, r1
 8001974:	701a      	strb	r2, [r3, #0]
	Alarm[copy_u8AlarmNumber][4]   = StringToHex(Local_u8Station[10], Local_u8Station[9]);
 8001976:	7dbb      	ldrb	r3, [r7, #22]
 8001978:	7d7a      	ldrb	r2, [r7, #21]
 800197a:	79fc      	ldrb	r4, [r7, #7]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f83a 	bl	80019f8 <StringToHex>
 8001984:	4603      	mov	r3, r0
 8001986:	4619      	mov	r1, r3
 8001988:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <SRV_SetAlarm+0x124>)
 800198a:	4623      	mov	r3, r4
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	1b1b      	subs	r3, r3, r4
 8001990:	4413      	add	r3, r2
 8001992:	3304      	adds	r3, #4
 8001994:	460a      	mov	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
	Alarm[copy_u8AlarmNumber][5]   = StringToHex(Local_u8Station[12], Local_u8Station[11]);
 8001998:	7e3b      	ldrb	r3, [r7, #24]
 800199a:	7dfa      	ldrb	r2, [r7, #23]
 800199c:	79fc      	ldrb	r4, [r7, #7]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f829 	bl	80019f8 <StringToHex>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4619      	mov	r1, r3
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <SRV_SetAlarm+0x124>)
 80019ac:	4623      	mov	r3, r4
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	1b1b      	subs	r3, r3, r4
 80019b2:	4413      	add	r3, r2
 80019b4:	3305      	adds	r3, #5
 80019b6:	460a      	mov	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
	Alarm[copy_u8AlarmNumber][6]   = StringToHex(Local_u8Station[14], Local_u8Station[13]);
 80019ba:	7ebb      	ldrb	r3, [r7, #26]
 80019bc:	7e7a      	ldrb	r2, [r7, #25]
 80019be:	79fc      	ldrb	r4, [r7, #7]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f818 	bl	80019f8 <StringToHex>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4619      	mov	r1, r3
 80019cc:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <SRV_SetAlarm+0x124>)
 80019ce:	4623      	mov	r3, r4
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	1b1b      	subs	r3, r3, r4
 80019d4:	4413      	add	r3, r2
 80019d6:	3306      	adds	r3, #6
 80019d8:	460a      	mov	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]

	SYSTIC_delay_ms_IT(1000);
 80019dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019e0:	f7ff fdc8 	bl	8001574 <SYSTIC_delay_ms_IT>
}
 80019e4:	bf00      	nop
 80019e6:	3724      	adds	r7, #36	; 0x24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd90      	pop	{r4, r7, pc}
 80019ec:	0800259c 	.word	0x0800259c
 80019f0:	0800254c 	.word	0x0800254c
 80019f4:	20000128 	.word	0x20000128

080019f8 <StringToHex>:

static uint8_t StringToHex(uint8_t Arg1,uint8_t Arg2)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8Hex;
	Local_u8Hex = ((Arg1 - 48) | ((Arg2 - 48) << 4));
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	3b30      	subs	r3, #48	; 0x30
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	b25a      	sxtb	r2, r3
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	3b30      	subs	r3, #48	; 0x30
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	73fb      	strb	r3, [r7, #15]
	return Local_u8Hex;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DayOfWeekToNumber>:

static uint8_t DayOfWeekToNumber(uint8_t* copy_u8Day)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8DayNumber=0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]

	if((copy_u8Day[1] == 'O') || (copy_u8Day[1]=='o')){
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b4f      	cmp	r3, #79	; 0x4f
 8001a40:	d004      	beq.n	8001a4c <DayOfWeekToNumber+0x20>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3301      	adds	r3, #1
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b6f      	cmp	r3, #111	; 0x6f
 8001a4a:	d102      	bne.n	8001a52 <DayOfWeekToNumber+0x26>
		//M'O'NDAY
		Local_u8DayNumber=MONDAY;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	e04a      	b.n	8001ae8 <DayOfWeekToNumber+0xbc>
	}
	else if((copy_u8Day[1] == 'U') || (copy_u8Day[1]=='u')){
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3301      	adds	r3, #1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b55      	cmp	r3, #85	; 0x55
 8001a5a:	d004      	beq.n	8001a66 <DayOfWeekToNumber+0x3a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b75      	cmp	r3, #117	; 0x75
 8001a64:	d10d      	bne.n	8001a82 <DayOfWeekToNumber+0x56>

		if((copy_u8Day[0] == 'T') || (copy_u8Day[0]=='t')){
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b54      	cmp	r3, #84	; 0x54
 8001a6c:	d003      	beq.n	8001a76 <DayOfWeekToNumber+0x4a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b74      	cmp	r3, #116	; 0x74
 8001a74:	d102      	bne.n	8001a7c <DayOfWeekToNumber+0x50>
			//T'U'SDAY
			Local_u8DayNumber=TUESDAY;
 8001a76:	2302      	movs	r3, #2
 8001a78:	73fb      	strb	r3, [r7, #15]
		if((copy_u8Day[0] == 'T') || (copy_u8Day[0]=='t')){
 8001a7a:	e035      	b.n	8001ae8 <DayOfWeekToNumber+0xbc>
		}else
		{//S'U'NDAY
			Local_u8DayNumber=SUNDAY;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	73fb      	strb	r3, [r7, #15]
		if((copy_u8Day[0] == 'T') || (copy_u8Day[0]=='t')){
 8001a80:	e032      	b.n	8001ae8 <DayOfWeekToNumber+0xbc>
		}
	}
	else if((copy_u8Day[1] == 'E') || (copy_u8Day[1]=='e')){
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3301      	adds	r3, #1
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b45      	cmp	r3, #69	; 0x45
 8001a8a:	d004      	beq.n	8001a96 <DayOfWeekToNumber+0x6a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b65      	cmp	r3, #101	; 0x65
 8001a94:	d102      	bne.n	8001a9c <DayOfWeekToNumber+0x70>
		//T'H'URSDAY
		Local_u8DayNumber=WEDNESDAY;
 8001a96:	2303      	movs	r3, #3
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	e025      	b.n	8001ae8 <DayOfWeekToNumber+0xbc>
	}
	else if((copy_u8Day[1] == 'H') || (copy_u8Day[1]=='h')){
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b48      	cmp	r3, #72	; 0x48
 8001aa4:	d004      	beq.n	8001ab0 <DayOfWeekToNumber+0x84>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b68      	cmp	r3, #104	; 0x68
 8001aae:	d102      	bne.n	8001ab6 <DayOfWeekToNumber+0x8a>
		//T'H'URSDAY
		Local_u8DayNumber=THURSDAY;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e018      	b.n	8001ae8 <DayOfWeekToNumber+0xbc>
	}
	else if((copy_u8Day[1] == 'R') || (copy_u8Day[1]=='r')){
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b52      	cmp	r3, #82	; 0x52
 8001abe:	d004      	beq.n	8001aca <DayOfWeekToNumber+0x9e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b72      	cmp	r3, #114	; 0x72
 8001ac8:	d102      	bne.n	8001ad0 <DayOfWeekToNumber+0xa4>
		//F'R'IDAY
		Local_u8DayNumber=FRIDAY;
 8001aca:	2305      	movs	r3, #5
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e00b      	b.n	8001ae8 <DayOfWeekToNumber+0xbc>
	}
	else if((copy_u8Day[1] == 'A') || (copy_u8Day[1]=='a')){
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b41      	cmp	r3, #65	; 0x41
 8001ad8:	d004      	beq.n	8001ae4 <DayOfWeekToNumber+0xb8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3301      	adds	r3, #1
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b61      	cmp	r3, #97	; 0x61
 8001ae2:	d101      	bne.n	8001ae8 <DayOfWeekToNumber+0xbc>
		//S'A'TURDAY
		Local_u8DayNumber=SATURDAY;
 8001ae4:	2306      	movs	r3, #6
 8001ae6:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8DayNumber;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <ReadCurrentDnTFromUser>:

static void ReadCurrentDnTFromUser(uint8_t* copy_u8array)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	Input( &copy_u8array[0] , 1);
 8001b00:	2101      	movs	r1, #1
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fe24 	bl	8001750 <Input>
	Input( &copy_u8array[1] , 1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fe1e 	bl	8001750 <Input>
	SendChar(':');
 8001b14:	203a      	movs	r0, #58	; 0x3a
 8001b16:	f7ff fe2b 	bl	8001770 <SendChar>
	//Min
	Input( &copy_u8array[2] ,1);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fe15 	bl	8001750 <Input>
	Input( &copy_u8array[3] , 1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3303      	adds	r3, #3
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fe0f 	bl	8001750 <Input>
	SendChar( ':');
 8001b32:	203a      	movs	r0, #58	; 0x3a
 8001b34:	f7ff fe1c 	bl	8001770 <SendChar>
	//sec
	Input( &copy_u8array[4] , 1);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fe06 	bl	8001750 <Input>
	Input( &copy_u8array[5] , 1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3305      	adds	r3, #5
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fe00 	bl	8001750 <Input>
	SendChar( ' ');
 8001b50:	2020      	movs	r0, #32
 8001b52:	f7ff fe0d 	bl	8001770 <SendChar>

	//Day
	Input( &copy_u8array[6] , 1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3306      	adds	r3, #6
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fdf7 	bl	8001750 <Input>
	Input( &copy_u8array[7] , 1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3307      	adds	r3, #7
 8001b66:	2101      	movs	r1, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fdf1 	bl	8001750 <Input>
	Input( &copy_u8array[8] , 1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3308      	adds	r3, #8
 8001b72:	2101      	movs	r1, #1
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fdeb 	bl	8001750 <Input>
	SendChar( ' ');
 8001b7a:	2020      	movs	r0, #32
 8001b7c:	f7ff fdf8 	bl	8001770 <SendChar>

	//Date
	Input( &copy_u8array[9] , 1);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3309      	adds	r3, #9
 8001b84:	2101      	movs	r1, #1
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fde2 	bl	8001750 <Input>
	Input( &copy_u8array[10] , 1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	330a      	adds	r3, #10
 8001b90:	2101      	movs	r1, #1
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fddc 	bl	8001750 <Input>
	SendChar( '/');
 8001b98:	202f      	movs	r0, #47	; 0x2f
 8001b9a:	f7ff fde9 	bl	8001770 <SendChar>
	//Month
	Input( &copy_u8array[11] , 1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	330b      	adds	r3, #11
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fdd3 	bl	8001750 <Input>
	Input( &copy_u8array[12] , 1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	330c      	adds	r3, #12
 8001bae:	2101      	movs	r1, #1
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fdcd 	bl	8001750 <Input>
	SendChar( '/');
 8001bb6:	202f      	movs	r0, #47	; 0x2f
 8001bb8:	f7ff fdda 	bl	8001770 <SendChar>
	//Year
	Input( &copy_u8array[13] , 1);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	330d      	adds	r3, #13
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fdc4 	bl	8001750 <Input>
	Input( &copy_u8array[14] , 1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	330e      	adds	r3, #14
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fdbe 	bl	8001750 <Input>
	SendChar( ' ');
 8001bd4:	2020      	movs	r0, #32
 8001bd6:	f7ff fdcb 	bl	8001770 <SendChar>
	Input( &copy_u8array[15] , 1);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	330f      	adds	r3, #15
 8001bde:	2101      	movs	r1, #1
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fdb5 	bl	8001750 <Input>

	if(copy_u8array[15] == '0')
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	330f      	adds	r3, #15
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b30      	cmp	r3, #48	; 0x30
 8001bee:	d108      	bne.n	8001c02 <ReadCurrentDnTFromUser+0x10a>
	{
		Print((uint8_t*)" AM or PM ?  ");
 8001bf0:	4806      	ldr	r0, [pc, #24]	; (8001c0c <ReadCurrentDnTFromUser+0x114>)
 8001bf2:	f7ff fcf7 	bl	80015e4 <Print>
		Input( &copy_u8array[16] , 1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3310      	adds	r3, #16
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fda7 	bl	8001750 <Input>
	}
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	080025b4 	.word	0x080025b4

08001c10 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
	uint8_t Local_u8Index1,Local_u8Index2;
	uint8_t Local_u8Validate=0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	737b      	strb	r3, [r7, #13]
	uint8_t Local_u8CurrentTD[7]={0};
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	2100      	movs	r1, #0
 8001c24:	460a      	mov	r2, r1
 8001c26:	801a      	strh	r2, [r3, #0]
 8001c28:	460a      	mov	r2, r1
 8001c2a:	709a      	strb	r2, [r3, #2]

	RTC_ReadTimeDate(&I2C1_SysConfig, &RTC_DS1307_Config, Local_u8CurrentTD);
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	461a      	mov	r2, r3
 8001c30:	491f      	ldr	r1, [pc, #124]	; (8001cb0 <SysTick_Handler+0xa0>)
 8001c32:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <SysTick_Handler+0xa4>)
 8001c34:	f7fe fe5c 	bl	80008f0 <RTC_ReadTimeDate>

	Local_u8CurrentTD[2] &=~ (0x60);
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	71bb      	strb	r3, [r7, #6]
	for(Local_u8Index1=0 ; Local_u8Index1<5 ; Local_u8Index1++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e027      	b.n	8001c98 <SysTick_Handler+0x88>
	{
		for(Local_u8Index2=0 ; Local_u8Index2<7 ; Local_u8Index2++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73bb      	strb	r3, [r7, #14]
 8001c4c:	e01e      	b.n	8001c8c <SysTick_Handler+0x7c>
		{
			if(Alarm[Local_u8Index1][Local_u8Index2] != Local_u8CurrentTD[Local_u8Index2])
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	7bb9      	ldrb	r1, [r7, #14]
 8001c52:	4819      	ldr	r0, [pc, #100]	; (8001cb8 <SysTick_Handler+0xa8>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	4403      	add	r3, r0
 8001c5c:	440b      	add	r3, r1
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	7bbb      	ldrb	r3, [r7, #14]
 8001c62:	3310      	adds	r3, #16
 8001c64:	443b      	add	r3, r7
 8001c66:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d002      	beq.n	8001c74 <SysTick_Handler+0x64>
			{
				Local_u8Validate=0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	737b      	strb	r3, [r7, #13]
				break;
 8001c72:	e00e      	b.n	8001c92 <SysTick_Handler+0x82>
			}
			else
			{
				Local_u8Validate++;
 8001c74:	7b7b      	ldrb	r3, [r7, #13]
 8001c76:	3301      	adds	r3, #1
 8001c78:	737b      	strb	r3, [r7, #13]
			}
			if(Local_u8Validate == 7)
 8001c7a:	7b7b      	ldrb	r3, [r7, #13]
 8001c7c:	2b07      	cmp	r3, #7
 8001c7e:	d102      	bne.n	8001c86 <SysTick_Handler+0x76>
			{
				Print( (uint8_t*)"\r\n ALARM NOTIFICATION   ");
 8001c80:	480e      	ldr	r0, [pc, #56]	; (8001cbc <SysTick_Handler+0xac>)
 8001c82:	f7ff fcaf 	bl	80015e4 <Print>
		for(Local_u8Index2=0 ; Local_u8Index2<7 ; Local_u8Index2++)
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	73bb      	strb	r3, [r7, #14]
 8001c8c:	7bbb      	ldrb	r3, [r7, #14]
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d9dd      	bls.n	8001c4e <SysTick_Handler+0x3e>
	for(Local_u8Index1=0 ; Local_u8Index1<5 ; Local_u8Index1++)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	3301      	adds	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d9d4      	bls.n	8001c48 <SysTick_Handler+0x38>
			}
		}
	}
	SYSTIC_delay_ms_IT(500);
 8001c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca2:	f7ff fc67 	bl	8001574 <SYSTIC_delay_ms_IT>

}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000114 	.word	0x20000114
 8001cb4:	20000108 	.word	0x20000108
 8001cb8:	20000128 	.word	0x20000128
 8001cbc:	080025c4 	.word	0x080025c4

08001cc0 <HexToString>:

static void HexToString(uint8_t copy_u8HexVal, uint8_t* copy_u8buffer)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]

	copy_u8buffer[0] = (copy_u8HexVal >> 4) + '0';
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	3330      	adds	r3, #48	; 0x30
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	701a      	strb	r2, [r3, #0]
	copy_u8buffer[1] = (copy_u8HexVal & 0x0F) + '0';
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	3230      	adds	r2, #48	; 0x30
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]

}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <USART_u8Init>:


static   USART_REG* USART_Index[6]={USART1,USART2,USART3,UART4,UART5,USART6};

uint8_t  USART_u8Init( USART_Cnfg_t * Copy_psCnfg )
{
 8001cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cfc:	b088      	sub	sp, #32
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
   uint8_t Local_u8ErrorState = OK ;
 8001d02:	2300      	movs	r3, #0
 8001d04:	77fb      	strb	r3, [r7, #31]

   if (Copy_psCnfg != NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8140 	beq.w	8001f8e <USART_u8Init+0x296>
   {

        /* Set Oversampling */
        CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_OVER8);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	4ba2      	ldr	r3, [pc, #648]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	4b9f      	ldr	r3, [pc, #636]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001d24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d2c:	60da      	str	r2, [r3, #12]
        USART_Index[Copy_psCnfg->USART_Num]->CR1 |= Copy_psCnfg->OverSampling << CR1_OVER8 ;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b9a      	ldr	r3, [pc, #616]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	78db      	ldrb	r3, [r3, #3]
 8001d40:	03db      	lsls	r3, r3, #15
 8001d42:	4619      	mov	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4b95      	ldr	r3, [pc, #596]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001d4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	60da      	str	r2, [r3, #12]

        /* Select the wordlength  */
        CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_WORDLENGTH);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b91      	ldr	r3, [pc, #580]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	4619      	mov	r1, r3
 8001d68:	4b8d      	ldr	r3, [pc, #564]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001d6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d72:	60da      	str	r2, [r3, #12]
        USART_Index[Copy_psCnfg->USART_Num]->CR1 |= Copy_psCnfg->Word << CR1_WORDLENGTH ;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	031b      	lsls	r3, r3, #12
 8001d88:	4619      	mov	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4b83      	ldr	r3, [pc, #524]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001d92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	60da      	str	r2, [r3, #12]


        /* Set parity status  */
        CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_PCE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b7f      	ldr	r3, [pc, #508]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001db0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db8:	60da      	str	r2, [r3, #12]
        USART_Index[Copy_psCnfg->USART_Num]->CR1 |= Copy_psCnfg->Parity << CR1_PCE ;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	029b      	lsls	r3, r3, #10
 8001dce:	4619      	mov	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001dd8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	60da      	str	r2, [r3, #12]



        /* Set RX TX state */

        switch (Copy_psCnfg->Mode)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d048      	beq.n	8001e7a <USART_u8Init+0x182>
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	dc67      	bgt.n	8001ebc <USART_u8Init+0x1c4>
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <USART_u8Init+0xfe>
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d021      	beq.n	8001e38 <USART_u8Init+0x140>
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
            break;
        
        default:
            break;
 8001df4:	e062      	b.n	8001ebc <USART_u8Init+0x1c4>
            CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001e0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e10:	f022 0208 	bic.w	r2, r2, #8
 8001e14:	60da      	str	r2, [r3, #12]
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b60      	ldr	r3, [pc, #384]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001e2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e30:	f042 0204 	orr.w	r2, r2, #4
 8001e34:	60da      	str	r2, [r3, #12]
            break;
 8001e36:	e042      	b.n	8001ebe <USART_u8Init+0x1c6>
            CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4b54      	ldr	r3, [pc, #336]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001e4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e52:	f022 0204 	bic.w	r2, r2, #4
 8001e56:	60da      	str	r2, [r3, #12]
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001e6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e72:	f042 0208 	orr.w	r2, r2, #8
 8001e76:	60da      	str	r2, [r3, #12]
            break;
 8001e78:	e021      	b.n	8001ebe <USART_u8Init+0x1c6>
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b47      	ldr	r3, [pc, #284]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4b44      	ldr	r3, [pc, #272]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001e90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e94:	f042 0204 	orr.w	r2, r2, #4
 8001e98:	60da      	str	r2, [r3, #12]
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001eb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001eb4:	f042 0208 	orr.w	r2, r2, #8
 8001eb8:	60da      	str	r2, [r3, #12]
            break;
 8001eba:	e000      	b.n	8001ebe <USART_u8Init+0x1c6>
            break;
 8001ebc:	bf00      	nop


        /* Baudrate configurations */

		uint8_t Local_u8OverSampling ;
		if (Copy_psCnfg->OverSampling == OVER8 )
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	78db      	ldrb	r3, [r3, #3]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <USART_u8Init+0x1d4>
		{
			Local_u8OverSampling=8;
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	77bb      	strb	r3, [r7, #30]
 8001eca:	e001      	b.n	8001ed0 <USART_u8Init+0x1d8>
		}
		else
		{
			Local_u8OverSampling=16;
 8001ecc:	2310      	movs	r3, #16
 8001ece:	77bb      	strb	r3, [r7, #30]
		}
		uint64_t Local_u64Mantissa = ( F_COLCK ) / ( (Local_u8OverSampling) * USART1_BAUD_RATE ) ;
 8001ed0:	7fbb      	ldrb	r3, [r7, #30]
 8001ed2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	4a32      	ldr	r2, [pc, #200]	; (8001fa4 <USART_u8Init+0x2ac>)
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	469a      	mov	sl, r3
 8001ee4:	4693      	mov	fp, r2
 8001ee6:	e9c7 ab04 	strd	sl, fp, [r7, #16]
		uint64_t Local_u64Fraction = ( ( ( F_COLCK * 100 ) / ( (Local_u8OverSampling) * USART1_BAUD_RATE )  ) % 100 ) * (Local_u8OverSampling) ;
 8001eea:	7fbb      	ldrb	r3, [r7, #30]
 8001eec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <USART_u8Init+0x2b0>)
 8001ef6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efa:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <USART_u8Init+0x2b4>)
 8001efc:	fba3 1302 	umull	r1, r3, r3, r2
 8001f00:	095b      	lsrs	r3, r3, #5
 8001f02:	2164      	movs	r1, #100	; 0x64
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	7fba      	ldrb	r2, [r7, #30]
 8001f0c:	fb02 f303 	mul.w	r3, r2, r3
 8001f10:	2200      	movs	r2, #0
 8001f12:	4698      	mov	r8, r3
 8001f14:	4691      	mov	r9, r2
 8001f16:	e9c7 8902 	strd	r8, r9, [r7, #8]

		if( Local_u64Fraction > USART_MAX_FRAC )
 8001f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f1e:	f240 51dd 	movw	r1, #1501	; 0x5dd
 8001f22:	428a      	cmp	r2, r1
 8001f24:	f173 0300 	sbcs.w	r3, r3, #0
 8001f28:	d30c      	bcc.n	8001f44 <USART_u8Init+0x24c>
		{
			Local_u64Mantissa += USART_MANTISSA ;
 8001f2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f2e:	1c54      	adds	r4, r2, #1
 8001f30:	f143 0500 	adc.w	r5, r3, #0
 8001f34:	e9c7 4504 	strd	r4, r5, [r7, #16]
			Local_u64Fraction  = USART_FRACTION ;
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		USART_Index[Copy_psCnfg->USART_Num] -> BRR = ( Local_u64Mantissa << USART_BAUD_RATE_ACCESS  ) | ( Local_u64Fraction / 100 ) ;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	011c      	lsls	r4, r3, #4
 8001f48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f4c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	f7fe f956 	bl	8000204 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001f64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f68:	4322      	orrs	r2, r4
 8001f6a:	609a      	str	r2, [r3, #8]
		


        
        /* Enable USART */
		SET_BIT ( USART_Index[Copy_psCnfg->USART_Num] -> CR1 , USART_CR1_UE );
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <USART_u8Init+0x2a8>)
 8001f82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	e001      	b.n	8001f92 <USART_u8Init+0x29a>


   }
   else
   {
        Local_u8ErrorState = NULL_PTR_ERR ;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	77fb      	strb	r3, [r7, #31]
   }
   
   

   return Local_u8ErrorState ;
 8001f92:	7ffb      	ldrb	r3, [r7, #31]
    
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200000d4 	.word	0x200000d4
 8001fa4:	00f42400 	.word	0x00f42400
 8001fa8:	5f5e1000 	.word	0x5f5e1000
 8001fac:	51eb851f 	.word	0x51eb851f

08001fb0 <USART_u8ReceiveCharSynch>:



uint8_t  USART_u8ReceiveCharSynch     ( USART_NUM_t Copy_USARTindex , uint8_t * Copy_pu8DataChar  )
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = OK ;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataChar != NULL )
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01e      	beq.n	8002004 <USART_u8ReceiveCharSynch+0x54>
	{
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <USART_u8ReceiveCharSynch+0x68>)
 8001fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4911      	ldr	r1, [pc, #68]	; (8002018 <USART_u8ReceiveCharSynch+0x68>)
 8001fd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fd8:	f022 0220 	bic.w	r2, r2, #32
 8001fdc:	601a      	str	r2, [r3, #0]
	    while ( USART_SR_RXNE_DOWN_MASK == GET_BIT ( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE ) )  ;
 8001fde:	bf00      	nop
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <USART_u8ReceiveCharSynch+0x68>)
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f6      	beq.n	8001fe0 <USART_u8ReceiveCharSynch+0x30>
	    *Copy_pu8DataChar = ( USART_Index[Copy_USARTindex] -> DR )  ;
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	4a08      	ldr	r2, [pc, #32]	; (8002018 <USART_u8ReceiveCharSynch+0x68>)
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	e001      	b.n	8002008 <USART_u8ReceiveCharSynch+0x58>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR ;
 8002004:	2302      	movs	r3, #2
 8002006:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	200000d4 	.word	0x200000d4

0800201c <USART_voidTransmitCharSynch>:




void  USART_voidTransmitCharSynch     ( USART_NUM_t Copy_USARTindex , uint8_t  Copy_u8DataChar  )
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	460a      	mov	r2, r1
 8002026:	71fb      	strb	r3, [r7, #7]
 8002028:	4613      	mov	r3, r2
 800202a:	71bb      	strb	r3, [r7, #6]
	
		USART_Index[Copy_USARTindex] -> DR = Copy_u8DataChar ;
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4a10      	ldr	r2, [pc, #64]	; (8002070 <USART_voidTransmitCharSynch+0x54>)
 8002030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002034:	79ba      	ldrb	r2, [r7, #6]
 8002036:	605a      	str	r2, [r3, #4]
		while ( USART_SR_TC_MASK == GET_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC ) )  ;
 8002038:	bf00      	nop
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <USART_voidTransmitCharSynch+0x54>)
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f6      	beq.n	800203a <USART_voidTransmitCharSynch+0x1e>
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC );
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <USART_voidTransmitCharSynch+0x54>)
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	4905      	ldr	r1, [pc, #20]	; (8002070 <USART_voidTransmitCharSynch+0x54>)
 800205a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800205e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002062:	601a      	str	r2, [r3, #0]
	
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	200000d4 	.word	0x200000d4

08002074 <USART_voidTransmitStringSynch>:




void     USART_voidTransmitStringSynch     ( USART_NUM_t Copy_USARTindex , uint8_t * Copy_pu8Data  )
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
	uint8_t LOCAL_u8LoopIterator = 0 ;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8Data[LOCAL_u8LoopIterator] != 0 )
 8002084:	e00b      	b.n	800209e <USART_voidTransmitStringSynch+0x2a>
	{
		USART_voidTransmitCharSynch(Copy_USARTindex , Copy_pu8Data[LOCAL_u8LoopIterator] );
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	781a      	ldrb	r2, [r3, #0]
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ffc2 	bl	800201c <USART_voidTransmitCharSynch>
		LOCAL_u8LoopIterator++ ;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	3301      	adds	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8Data[LOCAL_u8LoopIterator] != 0 )
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1ed      	bne.n	8002086 <USART_voidTransmitStringSynch+0x12>

	}
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <USART_u8ReceiveBufferSynch>:
	
}


void  USART_u8ReceiveBufferSynch     ( USART_NUM_t Copy_USARTindex , uint8_t * Copy_pu8Data , uint8_t Copy_u8Size  )
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	6039      	str	r1, [r7, #0]
 80020be:	71fb      	strb	r3, [r7, #7]
 80020c0:	4613      	mov	r3, r2
 80020c2:	71bb      	strb	r3, [r7, #6]
	uint8_t LOCAL_u8LoopIterator ;

	for(LOCAL_u8LoopIterator = 0 ; LOCAL_u8LoopIterator < Copy_u8Size  ; LOCAL_u8LoopIterator++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e00a      	b.n	80020e0 <USART_u8ReceiveBufferSynch+0x2c>
	{
		USART_u8ReceiveCharSynch(Copy_USARTindex , &Copy_pu8Data[LOCAL_u8LoopIterator]);
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	441a      	add	r2, r3
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff6b 	bl	8001fb0 <USART_u8ReceiveCharSynch>
	for(LOCAL_u8LoopIterator = 0 ; LOCAL_u8LoopIterator < Copy_u8Size  ; LOCAL_u8LoopIterator++)
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	3301      	adds	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d3f0      	bcc.n	80020ca <USART_u8ReceiveBufferSynch+0x16>
	}

}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <main>:
#include "APP.h"
#include "Service.h"


int main(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0



	APP_voidInit();
 80020f6:	f7fe fa03 	bl	8000500 <APP_voidInit>

	

	APP_voidLogin();
 80020fa:	f7fe fa9b 	bl	8000634 <APP_voidLogin>

	APP_FirstSetUp();
 80020fe:	f7fe fb79 	bl	80007f4 <APP_FirstSetUp>


	
	while (1)
	{
		APP_voidMenu();
 8002102:	f7fe fab5 	bl	8000670 <APP_voidMenu>
 8002106:	e7fc      	b.n	8002102 <main+0x10>

08002108 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800210a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800210c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002110:	480c      	ldr	r0, [pc, #48]	; (8002144 <LoopForever+0x6>)
  ldr r1, =_edata
 8002112:	490d      	ldr	r1, [pc, #52]	; (8002148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <LoopForever+0xe>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002118:	e002      	b.n	8002120 <LoopCopyDataInit>

0800211a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800211c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211e:	3304      	adds	r3, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002124:	d3f9      	bcc.n	800211a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002128:	4c0a      	ldr	r4, [pc, #40]	; (8002154 <LoopForever+0x16>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800212c:	e001      	b.n	8002132 <LoopFillZerobss>

0800212e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002130:	3204      	adds	r2, #4

08002132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002134:	d3fb      	bcc.n	800212e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002136:	f000 f811 	bl	800215c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800213a:	f7ff ffda 	bl	80020f2 <main>

0800213e <LoopForever>:

LoopForever:
  b LoopForever
 800213e:	e7fe      	b.n	800213e <LoopForever>
  ldr   r0, =_estack
 8002140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 800214c:	080025f0 	.word	0x080025f0
  ldr r2, =_sbss
 8002150:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002154:	20000164 	.word	0x20000164

08002158 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC_IRQHandler>
	...

0800215c <__libc_init_array>:
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	4d0d      	ldr	r5, [pc, #52]	; (8002194 <__libc_init_array+0x38>)
 8002160:	4c0d      	ldr	r4, [pc, #52]	; (8002198 <__libc_init_array+0x3c>)
 8002162:	1b64      	subs	r4, r4, r5
 8002164:	10a4      	asrs	r4, r4, #2
 8002166:	2600      	movs	r6, #0
 8002168:	42a6      	cmp	r6, r4
 800216a:	d109      	bne.n	8002180 <__libc_init_array+0x24>
 800216c:	4d0b      	ldr	r5, [pc, #44]	; (800219c <__libc_init_array+0x40>)
 800216e:	4c0c      	ldr	r4, [pc, #48]	; (80021a0 <__libc_init_array+0x44>)
 8002170:	f000 f818 	bl	80021a4 <_init>
 8002174:	1b64      	subs	r4, r4, r5
 8002176:	10a4      	asrs	r4, r4, #2
 8002178:	2600      	movs	r6, #0
 800217a:	42a6      	cmp	r6, r4
 800217c:	d105      	bne.n	800218a <__libc_init_array+0x2e>
 800217e:	bd70      	pop	{r4, r5, r6, pc}
 8002180:	f855 3b04 	ldr.w	r3, [r5], #4
 8002184:	4798      	blx	r3
 8002186:	3601      	adds	r6, #1
 8002188:	e7ee      	b.n	8002168 <__libc_init_array+0xc>
 800218a:	f855 3b04 	ldr.w	r3, [r5], #4
 800218e:	4798      	blx	r3
 8002190:	3601      	adds	r6, #1
 8002192:	e7f2      	b.n	800217a <__libc_init_array+0x1e>
 8002194:	080025e8 	.word	0x080025e8
 8002198:	080025e8 	.word	0x080025e8
 800219c:	080025e8 	.word	0x080025e8
 80021a0:	080025ec 	.word	0x080025ec

080021a4 <_init>:
 80021a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a6:	bf00      	nop
 80021a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021aa:	bc08      	pop	{r3}
 80021ac:	469e      	mov	lr, r3
 80021ae:	4770      	bx	lr

080021b0 <_fini>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	bf00      	nop
 80021b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b6:	bc08      	pop	{r3}
 80021b8:	469e      	mov	lr, r3
 80021ba:	4770      	bx	lr
