
Alarm_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08000db0  08000db0  00010db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e10  08000e10  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08000e10  08000e10  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e10  08000e10  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e10  08000e10  00010e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e14  08000e14  00010e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08000e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000038  08000e50  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08000e50  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002025  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000588  00000000  00000000  000220d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00022658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013a  00000000  00000000  00022810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000139a  00000000  00000000  0002294a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cd8  00000000  00000000  00023ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005960  00000000  00000000  000259bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005f8  00000000  00000000  0002b31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0002b914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000038 	.word	0x20000038
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d98 	.word	0x08000d98

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000003c 	.word	0x2000003c
 8000200:	08000d98 	.word	0x08000d98

08000204 <GPIO_u8PinInit>:
				OutputType,
				PullType,
				AltFunc
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* PinConfig)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState=OK;
 800020c:	2300      	movs	r3, #0
 800020e:	73fb      	strb	r3, [r7, #15]
	/*Check weather the pointer points to Null or Not*/
	if(PinConfig != NULL)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	f000 810a 	beq.w	800042c <GPIO_u8PinInit+0x228>
	{
		/* * * * * Select GPIO Mode: Input, Output, Analog, AltFunc * * * * */
		(GPIOx[PinConfig->Port]->GPIO_MODER) &=~(MODER_MASK<<(MODER_PIN_ACCESS* (PinConfig->PinNum)));
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	461a      	mov	r2, r3
 800021e:	4b88      	ldr	r3, [pc, #544]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	785b      	ldrb	r3, [r3, #1]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	4619      	mov	r1, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	4618      	mov	r0, r3
 800023c:	4b80      	ldr	r3, [pc, #512]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800023e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000242:	400a      	ands	r2, r1
 8000244:	601a      	str	r2, [r3, #0]
		(GPIOx[PinConfig->Port]->GPIO_MODER) |=((PinConfig->Mode)<<(MODER_PIN_ACCESS* (PinConfig->PinNum)));
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	461a      	mov	r2, r3
 800024c:	4b7c      	ldr	r3, [pc, #496]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800024e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	789b      	ldrb	r3, [r3, #2]
 8000258:	4619      	mov	r1, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	785b      	ldrb	r3, [r3, #1]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	fa01 f303 	lsl.w	r3, r1, r3
 8000264:	4619      	mov	r1, r3
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	4618      	mov	r0, r3
 800026c:	4b74      	ldr	r3, [pc, #464]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800026e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000272:	430a      	orrs	r2, r1
 8000274:	601a      	str	r2, [r3, #0]

		/* * * * * Select GPIO Pull State: PullUp ,PullDown ,NoPull * * * * */
		(GPIOx[PinConfig->Port]->GPIO_PUPDR) &=~(PUPDR_MASK<<(PUPDR_PIN_ACCESS* (PinConfig->PinNum)));
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	461a      	mov	r2, r3
 800027c:	4b70      	ldr	r3, [pc, #448]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800027e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000282:	68da      	ldr	r2, [r3, #12]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	785b      	ldrb	r3, [r3, #1]
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	2103      	movs	r1, #3
 800028c:	fa01 f303 	lsl.w	r3, r1, r3
 8000290:	43db      	mvns	r3, r3
 8000292:	4619      	mov	r1, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4618      	mov	r0, r3
 800029a:	4b69      	ldr	r3, [pc, #420]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800029c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002a0:	400a      	ands	r2, r1
 80002a2:	60da      	str	r2, [r3, #12]
		(GPIOx[PinConfig->Port]->GPIO_PUPDR) |=((PinConfig->PullType)<<(PUPDR_PIN_ACCESS* (PinConfig->PinNum)));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b65      	ldr	r3, [pc, #404]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80002ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002b0:	68da      	ldr	r2, [r3, #12]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	795b      	ldrb	r3, [r3, #5]
 80002b6:	4619      	mov	r1, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	785b      	ldrb	r3, [r3, #1]
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	4619      	mov	r1, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	4b5d      	ldr	r3, [pc, #372]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80002cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002d0:	430a      	orrs	r2, r1
 80002d2:	60da      	str	r2, [r3, #12]
		 * IF OUTPUT MODE: OutputType AND OutputSpeed (Setting)
		 *
		 * IF ALTERNATE FUNCTION: OutputType AND OutputSpeed AND ALTERNATIVE FUNCTION (Setting)
		 *
		 * */
		if( ( (PinConfig->Mode) ==OUTPUT) || ( (PinConfig->Mode) ==ALTERNATIVE_FUNCTION) )
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	789b      	ldrb	r3, [r3, #2]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d004      	beq.n	80002e6 <GPIO_u8PinInit+0xe2>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	789b      	ldrb	r3, [r3, #2]
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	f040 80a5 	bne.w	8000430 <GPIO_u8PinInit+0x22c>
		{
			/* * * * * Select the OutputType: PushPull ,Open Drain * * * * */
			(GPIOx[PinConfig->Port]->GPIO_OTYPE) &=~(OTYPER_MASK<<(PinConfig->PinNum));
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	461a      	mov	r2, r3
 80002ec:	4b54      	ldr	r3, [pc, #336]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80002ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	785b      	ldrb	r3, [r3, #1]
 80002f8:	4619      	mov	r1, r3
 80002fa:	2301      	movs	r3, #1
 80002fc:	408b      	lsls	r3, r1
 80002fe:	43db      	mvns	r3, r3
 8000300:	4619      	mov	r1, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	4b4d      	ldr	r3, [pc, #308]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800030a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800030e:	400a      	ands	r2, r1
 8000310:	605a      	str	r2, [r3, #4]
			(GPIOx[PinConfig->Port]->GPIO_OTYPE) |=((PinConfig->OutputType)<<(PinConfig->PinNum));
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b49      	ldr	r3, [pc, #292]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800031a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800031e:	685a      	ldr	r2, [r3, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	791b      	ldrb	r3, [r3, #4]
 8000324:	4619      	mov	r1, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	785b      	ldrb	r3, [r3, #1]
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	4619      	mov	r1, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	4b42      	ldr	r3, [pc, #264]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000338:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800033c:	430a      	orrs	r2, r1
 800033e:	605a      	str	r2, [r3, #4]

			/* * * * * Select the OutputSpeed:Low, Medium, Fast, High * * * * */
			(GPIOx[PinConfig->Port]->GPIO_OSPEEDER) &=~(OSPEEDR_MASK<<(OSPEEDR_PIN_ACCESS*(PinConfig->PinNum)));
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	461a      	mov	r2, r3
 8000346:	4b3e      	ldr	r3, [pc, #248]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800034c:	689a      	ldr	r2, [r3, #8]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	785b      	ldrb	r3, [r3, #1]
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	2103      	movs	r1, #3
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	43db      	mvns	r3, r3
 800035c:	4619      	mov	r1, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4618      	mov	r0, r3
 8000364:	4b36      	ldr	r3, [pc, #216]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000366:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800036a:	400a      	ands	r2, r1
 800036c:	609a      	str	r2, [r3, #8]
			(GPIOx[PinConfig->Port]->GPIO_OSPEEDER) |=((PinConfig->Speed)<<(OSPEEDR_PIN_ACCESS*(PinConfig->PinNum)));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	4b32      	ldr	r3, [pc, #200]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	78db      	ldrb	r3, [r3, #3]
 8000380:	4619      	mov	r1, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	785b      	ldrb	r3, [r3, #1]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	4619      	mov	r1, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	4b2a      	ldr	r3, [pc, #168]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000396:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800039a:	430a      	orrs	r2, r1
 800039c:	609a      	str	r2, [r3, #8]

			/* * * * * Select the Pin Alternate Function * * * * */
			if((PinConfig->Mode)==ALTERNATIVE_FUNCTION)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	789b      	ldrb	r3, [r3, #2]
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	d144      	bne.n	8000430 <GPIO_u8PinInit+0x22c>
			{
				/* * * * * ALTERNATIVE FUNCTION * * * * */
				uint8_t Local_u8RegNum = (PinConfig->PinNum) / AFR_PIN_SHIFTING;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	785b      	ldrb	r3, [r3, #1]
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	73bb      	strb	r3, [r7, #14]
				uint8_t Local_u8BitNum = (PinConfig->PinNum) % AFR_PIN_SHIFTING;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	785b      	ldrb	r3, [r3, #1]
 80003b2:	f003 0307 	and.w	r3, r3, #7
 80003b6:	737b      	strb	r3, [r7, #13]
				GPIOx[PinConfig->Port]->GPIO_AFR[Local_u8RegNum] &=~(AFR_MASK<<(AFR_PIN_ACCESS*(Local_u8BitNum)));
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	461a      	mov	r2, r3
 80003be:	4b20      	ldr	r3, [pc, #128]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80003c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003c4:	7bba      	ldrb	r2, [r7, #14]
 80003c6:	3208      	adds	r2, #8
 80003c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80003cc:	7b7b      	ldrb	r3, [r7, #13]
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	220f      	movs	r2, #15
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	43db      	mvns	r3, r3
 80003d8:	4618      	mov	r0, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	461a      	mov	r2, r3
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80003e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003e6:	7bba      	ldrb	r2, [r7, #14]
 80003e8:	4001      	ands	r1, r0
 80003ea:	3208      	adds	r2, #8
 80003ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				GPIOx[PinConfig->Port]->GPIO_AFR[Local_u8RegNum] |=((PinConfig->AltFunc)<<(AFR_PIN_ACCESS*(Local_u8BitNum)));
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80003f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003fc:	7bba      	ldrb	r2, [r7, #14]
 80003fe:	3208      	adds	r2, #8
 8000400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	799b      	ldrb	r3, [r3, #6]
 8000408:	461a      	mov	r2, r3
 800040a:	7b7b      	ldrb	r3, [r7, #13]
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	4618      	mov	r0, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800041c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000420:	7bba      	ldrb	r2, [r7, #14]
 8000422:	4301      	orrs	r1, r0
 8000424:	3208      	adds	r2, #8
 8000426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800042a:	e001      	b.n	8000430 <GPIO_u8PinInit+0x22c>

	}
	else
	{
		/*Null pointer*/
		Local_u8ErrorState=NULL_POINTER;
 800042c:	2302      	movs	r3, #2
 800042e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000430:	7bfb      	ldrb	r3, [r7, #15]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000000 	.word	0x20000000

08000444 <GPIO_u8SetPinValue>:
 * @param[in] Port ,PinNum ,PinVal
 * @retval Local_u8ErrorState
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 */
uint8_t GPIO_u8SetPinValue(Port_t	Port , Pin_t	PinNum , PinVal_t PinVal)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	460b      	mov	r3, r1
 8000450:	71bb      	strb	r3, [r7, #6]
 8000452:	4613      	mov	r3, r2
 8000454:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState=OK;
 8000456:	2300      	movs	r3, #0
 8000458:	73fb      	strb	r3, [r7, #15]
	if((Port <= PORTH) && (PinNum <= PIN15))
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b07      	cmp	r3, #7
 800045e:	d82e      	bhi.n	80004be <GPIO_u8SetPinValue+0x7a>
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	2b0f      	cmp	r3, #15
 8000464:	d82b      	bhi.n	80004be <GPIO_u8SetPinValue+0x7a>
	{
		if(PinVal==PIN_HIGH)
 8000466:	797b      	ldrb	r3, [r7, #5]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d110      	bne.n	800048e <GPIO_u8SetPinValue+0x4a>
		{
			/*Set PIN*/
			GPIOx[Port]->GPIO_ODR |= (0x01<<(PinNum));
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	4a18      	ldr	r2, [pc, #96]	; (80004d0 <GPIO_u8SetPinValue+0x8c>)
 8000470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	2101      	movs	r1, #1
 800047a:	fa01 f303 	lsl.w	r3, r1, r3
 800047e:	4618      	mov	r0, r3
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4913      	ldr	r1, [pc, #76]	; (80004d0 <GPIO_u8SetPinValue+0x8c>)
 8000484:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000488:	4302      	orrs	r2, r0
 800048a:	615a      	str	r2, [r3, #20]
		if(PinVal==PIN_HIGH)
 800048c:	e019      	b.n	80004c2 <GPIO_u8SetPinValue+0x7e>
			/*GPIOx[Port]->GPIO_BSRR = (0x01<<(16+PinNum));*/
		}
		else if(PinVal==PIN_LOW)
 800048e:	797b      	ldrb	r3, [r7, #5]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <GPIO_u8SetPinValue+0x74>
		{
			/*Clear PIN*/
			GPIOx[Port]->GPIO_ODR &= ~(0x01<<(PinNum));
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <GPIO_u8SetPinValue+0x8c>)
 8000498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	2101      	movs	r1, #1
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	43db      	mvns	r3, r3
 80004a8:	4618      	mov	r0, r3
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4908      	ldr	r1, [pc, #32]	; (80004d0 <GPIO_u8SetPinValue+0x8c>)
 80004ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004b2:	4002      	ands	r2, r0
 80004b4:	615a      	str	r2, [r3, #20]
		if(PinVal==PIN_HIGH)
 80004b6:	e004      	b.n	80004c2 <GPIO_u8SetPinValue+0x7e>
			/*GPIOx[Port]->GPIO_BSRR = (0x01<<(PinNum));*/
		}
		else
		{
			Local_u8ErrorState=NOK;
 80004b8:	2301      	movs	r3, #1
 80004ba:	73fb      	strb	r3, [r7, #15]
		if(PinVal==PIN_HIGH)
 80004bc:	e001      	b.n	80004c2 <GPIO_u8SetPinValue+0x7e>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
 80004be:	2301      	movs	r3, #1
 80004c0:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	20000000 	.word	0x20000000

080004d4 <RCC_AHB1EnableClock>:
	@Brief  the function enables AHB1 Clock 
	@param[in] Copy_Peripheral			@AHB1Periperals_t
	@retval void
 */
void RCC_AHB1EnableClock(AHB1Periperals_t     Copy_Peripheral)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	/*Enable the peripheraL*/
	RCC->RCC_AHB1ENR |= (ONE << Copy_Peripheral);
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <RCC_AHB1EnableClock+0x2c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	79fa      	ldrb	r2, [r7, #7]
 80004e4:	2101      	movs	r1, #1
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <RCC_AHB1EnableClock+0x2c>)
 80004ee:	430b      	orrs	r3, r1
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800

08000504 <RCC_APB1EnableClock>:
	@Brief  the function enables APB1 Clock 
	@param[in] Copy_Peripheral			@APB1Peripherals_t
	@retval void
 */
void RCC_APB1EnableClock(APB1Peripherals_t Copy_Peripheral)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	/*Enable the peripheraL*/
	RCC->RCC_APB1ENR |= (ONE << Copy_Peripheral);
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <RCC_APB1EnableClock+0x2c>)
 8000510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000512:	79fa      	ldrb	r2, [r7, #7]
 8000514:	2101      	movs	r1, #1
 8000516:	fa01 f202 	lsl.w	r2, r1, r2
 800051a:	4611      	mov	r1, r2
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <RCC_APB1EnableClock+0x2c>)
 800051e:	430b      	orrs	r3, r1
 8000520:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40023800 	.word	0x40023800

08000534 <USART_ReadFlag>:
 * @param:Copy_FlagVal			(@USART_FlagID_t)
 * @retval: Local_ErrorStatus	(@ErrorState_t)
 * 						USART error status
 * */
ErrorState_t USART_ReadFlag(USART_UsartNumber_t Copy_USARTNum,USART_FlagID_t Copy_FlagID, uint8_t* Copy_FlagVal)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	603a      	str	r2, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	460b      	mov	r3, r1
 8000542:	71bb      	strb	r3, [r7, #6]
	ErrorState_t Local_ErrorStatus = OK;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]

	if(Copy_FlagVal == NULL)
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d103      	bne.n	8000556 <USART_ReadFlag+0x22>
	{
		Local_ErrorStatus=NULL_POINTER;
 800054e:	2302      	movs	r3, #2
 8000550:	73fb      	strb	r3, [r7, #15]
		return Local_ErrorStatus;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	e01a      	b.n	800058c <USART_ReadFlag+0x58>
	}

	if((Copy_USARTNum >= USART_USART1) && (Copy_USARTNum <= USART_USART6)
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b05      	cmp	r3, #5
 800055a:	d814      	bhi.n	8000586 <USART_ReadFlag+0x52>
			&& (Copy_FlagID >= TRANSMIT_DATA_R_EMPTY_FLAG) && (Copy_FlagID <= READ_DATA_R_NOT_EMPTY_FLAG) )
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	2b06      	cmp	r3, #6
 8000560:	d911      	bls.n	8000586 <USART_ReadFlag+0x52>
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	2b05      	cmp	r3, #5
 8000566:	d80e      	bhi.n	8000586 <USART_ReadFlag+0x52>
	{
		*Copy_FlagVal = ( ((USARTx[Copy_USARTNum]->USART_SR) >> Copy_FlagID) & 0x01 ) ;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <USART_ReadFlag+0x64>)
 800056c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	79bb      	ldrb	r3, [r7, #6]
 8000574:	fa22 f303 	lsr.w	r3, r2, r3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	e001      	b.n	800058a <USART_ReadFlag+0x56>
	}
	else
	{
		Local_ErrorStatus=NOK;
 8000586:	2301      	movs	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorStatus;
 800058a:	7bfb      	ldrb	r3, [r7, #15]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	20000020 	.word	0x20000020

0800059c <USART_Init>:
 * 						a pointer to structure consists of the USART configurations
 * @retval: Local_ErrorStatus	(@ErrorState_t)
 * 						USART error status
 * */
ErrorState_t USART_Init(const USART_ConfigReg_t* Copy_ConfigReg)
{
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_ErrorStatus = OK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	75fb      	strb	r3, [r7, #23]
	uint8_t Local_u8Over=0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	75bb      	strb	r3, [r7, #22]
	uint32_t Local_u32USARTDIV=0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
	uint32_t Local_u32FractionPart=0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
	uint32_t Local_u32Mantissa=0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]


	if(Copy_ConfigReg == NULL)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d103      	bne.n	80005c6 <USART_Init+0x2a>
	{
		Local_ErrorStatus = NULL_POINTER;
 80005be:	2302      	movs	r3, #2
 80005c0:	75fb      	strb	r3, [r7, #23]
		return Local_ErrorStatus;
 80005c2:	7dfb      	ldrb	r3, [r7, #23]
 80005c4:	e16d      	b.n	80008a2 <USART_Init+0x306>
	}
		/*make sure Control register 1 is on the reset value*/
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR1 &=~ 0xFFFFFFFF;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7b1b      	ldrb	r3, [r3, #12]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b97      	ldr	r3, [pc, #604]	; (800082c <USART_Init+0x290>)
 80005ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7b1b      	ldrb	r3, [r3, #12]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b94      	ldr	r3, [pc, #592]	; (800082c <USART_Init+0x290>)
 80005dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
		/*make sure Control register 2 is on the reset value*/
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR2 &=~ 0xFFFFFFFF;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7b1b      	ldrb	r3, [r3, #12]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b90      	ldr	r3, [pc, #576]	; (800082c <USART_Init+0x290>)
 80005ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f0:	691b      	ldr	r3, [r3, #16]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7b1b      	ldrb	r3, [r3, #12]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b8c      	ldr	r3, [pc, #560]	; (800082c <USART_Init+0x290>)
 80005fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
		/*make sure Control register 3 is on the reset value*/
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR3 &=~ 0xFFFFFFFF;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	7b1b      	ldrb	r3, [r3, #12]
 8000606:	461a      	mov	r2, r3
 8000608:	4b88      	ldr	r3, [pc, #544]	; (800082c <USART_Init+0x290>)
 800060a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7b1b      	ldrb	r3, [r3, #12]
 8000614:	461a      	mov	r2, r3
 8000616:	4b85      	ldr	r3, [pc, #532]	; (800082c <USART_Init+0x290>)
 8000618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]

		/*2-Stopbit */
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR2 |= ((Copy_ConfigReg->USART_STOPBITS) << USART_STOP0);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	7b1b      	ldrb	r3, [r3, #12]
 8000624:	461a      	mov	r2, r3
 8000626:	4b81      	ldr	r3, [pc, #516]	; (800082c <USART_Init+0x290>)
 8000628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800062c:	691a      	ldr	r2, [r3, #16]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7a1b      	ldrb	r3, [r3, #8]
 8000632:	031b      	lsls	r3, r3, #12
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7b1b      	ldrb	r3, [r3, #12]
 800063a:	4618      	mov	r0, r3
 800063c:	4b7b      	ldr	r3, [pc, #492]	; (800082c <USART_Init+0x290>)
 800063e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000642:	430a      	orrs	r2, r1
 8000644:	611a      	str	r2, [r3, #16]
		/*3-Word length */
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR1 |= ((Copy_ConfigReg->USART_WORDLENGTH) << USART_M);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7b1b      	ldrb	r3, [r3, #12]
 800064a:	461a      	mov	r2, r3
 800064c:	4b77      	ldr	r3, [pc, #476]	; (800082c <USART_Init+0x290>)
 800064e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7a5b      	ldrb	r3, [r3, #9]
 8000658:	031b      	lsls	r3, r3, #12
 800065a:	4619      	mov	r1, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	7b1b      	ldrb	r3, [r3, #12]
 8000660:	4618      	mov	r0, r3
 8000662:	4b72      	ldr	r3, [pc, #456]	; (800082c <USART_Init+0x290>)
 8000664:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000668:	430a      	orrs	r2, r1
 800066a:	60da      	str	r2, [r3, #12]
		/*4-parity*/
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR1 |= ((Copy_ConfigReg->USART_PARITYBIT) << USART_PCE);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7b1b      	ldrb	r3, [r3, #12]
 8000670:	461a      	mov	r2, r3
 8000672:	4b6e      	ldr	r3, [pc, #440]	; (800082c <USART_Init+0x290>)
 8000674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000678:	68da      	ldr	r2, [r3, #12]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7a9b      	ldrb	r3, [r3, #10]
 800067e:	029b      	lsls	r3, r3, #10
 8000680:	4619      	mov	r1, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7b1b      	ldrb	r3, [r3, #12]
 8000686:	4618      	mov	r0, r3
 8000688:	4b68      	ldr	r3, [pc, #416]	; (800082c <USART_Init+0x290>)
 800068a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800068e:	430a      	orrs	r2, r1
 8000690:	60da      	str	r2, [r3, #12]
		/*5-HW flow control */
		if((Copy_ConfigReg->USART_HWFLOWCONTROL) == USART_HW_FLOW_CONTROL_ON)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7adb      	ldrb	r3, [r3, #11]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d11f      	bne.n	80006da <USART_Init+0x13e>
		{
			/*CTS enable*/
			USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR3 |= (CTS_EN_MASK<<USART_CTSE);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	7b1b      	ldrb	r3, [r3, #12]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b62      	ldr	r3, [pc, #392]	; (800082c <USART_Init+0x290>)
 80006a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	7b1b      	ldrb	r3, [r3, #12]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4b5f      	ldr	r3, [pc, #380]	; (800082c <USART_Init+0x290>)
 80006b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006b8:	615a      	str	r2, [r3, #20]
			/*RTS enable*/
			USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR3 |= (RTS_EN_MASK<<USART_RTSE);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7b1b      	ldrb	r3, [r3, #12]
 80006be:	461a      	mov	r2, r3
 80006c0:	4b5a      	ldr	r3, [pc, #360]	; (800082c <USART_Init+0x290>)
 80006c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7b1b      	ldrb	r3, [r3, #12]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4b57      	ldr	r3, [pc, #348]	; (800082c <USART_Init+0x290>)
 80006d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006d8:	615a      	str	r2, [r3, #20]
		}
		/*6- oversampling*/
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR1 |= ((Copy_ConfigReg->USART_OVERSAMPLINGMODE) << USART_OVER8);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	7b1b      	ldrb	r3, [r3, #12]
 80006de:	461a      	mov	r2, r3
 80006e0:	4b52      	ldr	r3, [pc, #328]	; (800082c <USART_Init+0x290>)
 80006e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006e6:	68da      	ldr	r2, [r3, #12]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7b5b      	ldrb	r3, [r3, #13]
 80006ec:	03db      	lsls	r3, r3, #15
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7b1b      	ldrb	r3, [r3, #12]
 80006f4:	4618      	mov	r0, r3
 80006f6:	4b4d      	ldr	r3, [pc, #308]	; (800082c <USART_Init+0x290>)
 80006f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80006fc:	430a      	orrs	r2, r1
 80006fe:	60da      	str	r2, [r3, #12]
		/*7-BaudRate */
		switch(Copy_ConfigReg->USART_OVERSAMPLINGMODE)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7b5b      	ldrb	r3, [r3, #13]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <USART_Init+0x172>
 8000708:	2b01      	cmp	r3, #1
 800070a:	d003      	beq.n	8000714 <USART_Init+0x178>
 800070c:	e005      	b.n	800071a <USART_Init+0x17e>
		{
		case USART_OVER16_ :
			Local_u8Over=2; break;
 800070e:	2302      	movs	r3, #2
 8000710:	75bb      	strb	r3, [r7, #22]
 8000712:	e002      	b.n	800071a <USART_Init+0x17e>
		case USART_OVER8_ :
			Local_u8Over=1; break;
 8000714:	2301      	movs	r3, #1
 8000716:	75bb      	strb	r3, [r7, #22]
 8000718:	bf00      	nop
		}
		Local_u32USARTDIV = (((SYS_FCK_HZ*100) / (8U * Local_u8Over * Copy_ConfigReg->USART_BAUDRATE)) );
 800071a:	7dbb      	ldrb	r3, [r7, #22]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	6852      	ldr	r2, [r2, #4]
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	4a42      	ldr	r2, [pc, #264]	; (8000830 <USART_Init+0x294>)
 8000728:	fbb2 f3f3 	udiv	r3, r2, r3
 800072c:	613b      	str	r3, [r7, #16]

		Local_u32Mantissa 	 = (uint32_t)( Local_u32USARTDIV / BAUDRATE_FAC_MASK ) ;
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	4a40      	ldr	r2, [pc, #256]	; (8000834 <USART_Init+0x298>)
 8000732:	fba2 2303 	umull	r2, r3, r2, r3
 8000736:	095b      	lsrs	r3, r3, #5
 8000738:	60bb      	str	r3, [r7, #8]
		Local_u32FractionPart = (Local_u32USARTDIV % BAUDRATE_FAC_MASK);
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	4a3d      	ldr	r2, [pc, #244]	; (8000834 <USART_Init+0x298>)
 800073e:	fba2 1203 	umull	r1, r2, r2, r3
 8000742:	0952      	lsrs	r2, r2, #5
 8000744:	2164      	movs	r1, #100	; 0x64
 8000746:	fb01 f202 	mul.w	r2, r1, r2
 800074a:	1a9b      	subs	r3, r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
		Local_u32FractionPart = Local_u32FractionPart * FRACTION_FAC_MASK ;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
		Local_u32FractionPart = Local_u32FractionPart + GET_ROUND_MASK;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800075a:	60fb      	str	r3, [r7, #12]
		Local_u32FractionPart = Local_u32FractionPart / BAUDRATE_FAC_MASK ;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4a35      	ldr	r2, [pc, #212]	; (8000834 <USART_Init+0x298>)
 8000760:	fba2 2303 	umull	r2, r3, r2, r3
 8000764:	095b      	lsrs	r3, r3, #5
 8000766:	60fb      	str	r3, [r7, #12]



		/*8- Synch/Asynch*/
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR2 |= ((Copy_ConfigReg->USART_SYNCHMODE) << USART_CLKEN);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7b1b      	ldrb	r3, [r3, #12]
 800076c:	461a      	mov	r2, r3
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <USART_Init+0x290>)
 8000770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000774:	691a      	ldr	r2, [r3, #16]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7b9b      	ldrb	r3, [r3, #14]
 800077a:	02db      	lsls	r3, r3, #11
 800077c:	4619      	mov	r1, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7b1b      	ldrb	r3, [r3, #12]
 8000782:	4618      	mov	r0, r3
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <USART_Init+0x290>)
 8000786:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800078a:	430a      	orrs	r2, r1
 800078c:	611a      	str	r2, [r3, #16]

		/*1-mode Rx, Tx or both */
		switch(Copy_ConfigReg->USART_MODE)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b02      	cmp	r3, #2
 8000794:	d028      	beq.n	80007e8 <USART_Init+0x24c>
 8000796:	2b02      	cmp	r3, #2
 8000798:	dc4e      	bgt.n	8000838 <USART_Init+0x29c>
 800079a:	2b00      	cmp	r3, #0
 800079c:	d002      	beq.n	80007a4 <USART_Init+0x208>
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d011      	beq.n	80007c6 <USART_Init+0x22a>
 80007a2:	e049      	b.n	8000838 <USART_Init+0x29c>
		{
		case USART_RX 	:
			/*Enable Receiver*/
			USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR1 |= ( TX_EN_MASK << USART_RE);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7b1b      	ldrb	r3, [r3, #12]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <USART_Init+0x290>)
 80007ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b0:	68da      	ldr	r2, [r3, #12]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	7b1b      	ldrb	r3, [r3, #12]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <USART_Init+0x290>)
 80007ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007be:	f042 0204 	orr.w	r2, r2, #4
 80007c2:	60da      	str	r2, [r3, #12]
			break;
 80007c4:	e03b      	b.n	800083e <USART_Init+0x2a2>
		case USART_TX 	:
			/*Enable transmitter*/
			USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR1 |= ( TX_EN_MASK << USART_TE);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	7b1b      	ldrb	r3, [r3, #12]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <USART_Init+0x290>)
 80007ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7b1b      	ldrb	r3, [r3, #12]
 80007d8:	4619      	mov	r1, r3
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <USART_Init+0x290>)
 80007dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007e0:	f042 0208 	orr.w	r2, r2, #8
 80007e4:	60da      	str	r2, [r3, #12]
			break;
 80007e6:	e02a      	b.n	800083e <USART_Init+0x2a2>
		case USART_RXTX :
			/*Enable Receiver*/
			USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR1 |= ( TX_EN_MASK << USART_RE);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	7b1b      	ldrb	r3, [r3, #12]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <USART_Init+0x290>)
 80007f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7b1b      	ldrb	r3, [r3, #12]
 80007fa:	4619      	mov	r1, r3
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <USART_Init+0x290>)
 80007fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000802:	f042 0204 	orr.w	r2, r2, #4
 8000806:	60da      	str	r2, [r3, #12]
			/*Enable transmitter*/
			USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR1 |= ( TX_EN_MASK << USART_TE);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7b1b      	ldrb	r3, [r3, #12]
 800080c:	461a      	mov	r2, r3
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <USART_Init+0x290>)
 8000810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000814:	68da      	ldr	r2, [r3, #12]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7b1b      	ldrb	r3, [r3, #12]
 800081a:	4619      	mov	r1, r3
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <USART_Init+0x290>)
 800081e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000822:	f042 0208 	orr.w	r2, r2, #8
 8000826:	60da      	str	r2, [r3, #12]
			break;
 8000828:	e009      	b.n	800083e <USART_Init+0x2a2>
 800082a:	bf00      	nop
 800082c:	20000020 	.word	0x20000020
 8000830:	5f5e1000 	.word	0x5f5e1000
 8000834:	51eb851f 	.word	0x51eb851f
		default: Local_ErrorStatus = NOK; break;
 8000838:	2301      	movs	r3, #1
 800083a:	75fb      	strb	r3, [r7, #23]
 800083c:	bf00      	nop
		}
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_BRR |= ( Local_u32FractionPart << USART_DIV_FRACTION);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7b1b      	ldrb	r3, [r3, #12]
 8000842:	461a      	mov	r2, r3
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <USART_Init+0x314>)
 8000846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084a:	6899      	ldr	r1, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7b1b      	ldrb	r3, [r3, #12]
 8000850:	461a      	mov	r2, r3
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <USART_Init+0x314>)
 8000854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	430a      	orrs	r2, r1
 800085c:	609a      	str	r2, [r3, #8]
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_BRR |= ( Local_u32Mantissa << USART_DIV_MANTISSA);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7b1b      	ldrb	r3, [r3, #12]
 8000862:	461a      	mov	r2, r3
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <USART_Init+0x314>)
 8000866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086a:	6899      	ldr	r1, [r3, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	011a      	lsls	r2, r3, #4
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7b1b      	ldrb	r3, [r3, #12]
 8000874:	4618      	mov	r0, r3
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <USART_Init+0x314>)
 8000878:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800087c:	430a      	orrs	r2, r1
 800087e:	609a      	str	r2, [r3, #8]
		/*9- USART enable*/
		USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_CR1 |= (USART_EN_MASK << USART_UE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7b1b      	ldrb	r3, [r3, #12]
 8000884:	461a      	mov	r2, r3
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <USART_Init+0x314>)
 8000888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800088c:	68da      	ldr	r2, [r3, #12]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7b1b      	ldrb	r3, [r3, #12]
 8000892:	4619      	mov	r1, r3
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <USART_Init+0x314>)
 8000896:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800089a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800089e:	60da      	str	r2, [r3, #12]


	return Local_ErrorStatus;
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000020 	.word	0x20000020

080008b4 <USART_TransmitData>:
 * @param: Copy_TransmitingData  (uint8_t)
 * @retval: Local_ErrorStatus	(@ErrorState_t)
 * 						USART error status
 * */
ErrorState_t USART_TransmitData(const USART_ConfigReg_t* Copy_ConfigReg , uint8_t Copy_TransmitingData)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]
	ErrorState_t Local_ErrorStatus = OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]

	/*wait for transmission register empty*/
	//while( ( ( (USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_SR) >> USART_TXE ) & GETVAL_MASK ) == 0 );

	/*Load data to be transmitted*/
	USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_DR = Copy_TransmitingData;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7b1b      	ldrb	r3, [r3, #12]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <USART_TransmitData+0x48>)
 80008cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d0:	78fa      	ldrb	r2, [r7, #3]
 80008d2:	605a      	str	r2, [r3, #4]

	/*wait for transmission completed*/
	while( ( ( (USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_SR) >> USART_TC ) & GETVAL_MASK ) == 0 );
 80008d4:	bf00      	nop
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7b1b      	ldrb	r3, [r3, #12]
 80008da:	461a      	mov	r2, r3
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <USART_TransmitData+0x48>)
 80008de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0f4      	beq.n	80008d6 <USART_TransmitData+0x22>

	return Local_ErrorStatus;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000020 	.word	0x20000020

08000900 <USART_TransmitString>:
void USART_TransmitString(const USART_ConfigReg_t* Copy_ConfigReg , uint8_t* Copy_TransmitingData)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	uint8_t Local_u8Counter=0;
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]

	while((Copy_TransmitingData[Local_u8Counter] != '\0'))
 800090e:	e00a      	b.n	8000926 <USART_TransmitString+0x26>
	{
		USART_TransmitData(Copy_ConfigReg, Copy_TransmitingData[Local_u8Counter]);
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ffca 	bl	80008b4 <USART_TransmitData>
		Local_u8Counter++;
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	3301      	adds	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
	while((Copy_TransmitingData[Local_u8Counter] != '\0'))
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	4413      	add	r3, r2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1ee      	bne.n	8000910 <USART_TransmitString+0x10>
	}

}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <USART_ReceiveData>:
 * @param: Copy_ReceivingData   (uint8_t*)
 * @retval: Local_ErrorStatus	(@ErrorState_t)
 * 						USART error status
 * */
ErrorState_t USART_ReceiveData(const USART_ConfigReg_t* Copy_ConfigReg, uint8_t* Copy_ReceivingData)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	ErrorState_t Local_ErrorStatus = OK;
 8000946:	2300      	movs	r3, #0
 8000948:	73fb      	strb	r3, [r7, #15]

	if(Copy_ReceivingData != NULL)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d017      	beq.n	8000980 <USART_ReceiveData+0x44>
	{
		/*wait for Receiving Complete*/
		while((((USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_SR) >> USART_RXNE ) & GETVAL_MASK ) != RAEDY_RXDR);
 8000950:	bf00      	nop
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7b1b      	ldrb	r3, [r3, #12]
 8000956:	461a      	mov	r2, r3
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <USART_ReceiveData+0x58>)
 800095a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	095b      	lsrs	r3, r3, #5
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	2b01      	cmp	r3, #1
 8000968:	d1f3      	bne.n	8000952 <USART_ReceiveData+0x16>

		*Copy_ReceivingData = (uint8_t)USARTx[Copy_ConfigReg->USART_USARTNUMBER]->USART_DR;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7b1b      	ldrb	r3, [r3, #12]
 800096e:	461a      	mov	r2, r3
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <USART_ReceiveData+0x58>)
 8000972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e001      	b.n	8000984 <USART_ReceiveData+0x48>
	}
	else
	{
		Local_ErrorStatus = NULL_POINTER;
 8000980:	2302      	movs	r3, #2
 8000982:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorStatus;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000020 	.word	0x20000020

08000998 <USART_ReceiveBuffer>:

void USART_ReceiveBuffer(const USART_ConfigReg_t* Copy_ConfigReg, uint8_t* Copy_ReceivingData ,uint8_t Copy_u8Size)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	4613      	mov	r3, r2
 80009a4:	71fb      	strb	r3, [r7, #7]
	uint8_t LOCAL_u8Iterator ;
	for(LOCAL_u8Iterator = 0 ; LOCAL_u8Iterator < Copy_u8Size ; LOCAL_u8Iterator++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	75fb      	strb	r3, [r7, #23]
 80009aa:	e009      	b.n	80009c0 <USART_ReceiveBuffer+0x28>
	{
		USART_ReceiveData(Copy_ConfigReg , &Copy_ReceivingData[LOCAL_u8Iterator] );
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	4619      	mov	r1, r3
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff ffc1 	bl	800093c <USART_ReceiveData>
	for(LOCAL_u8Iterator = 0 ; LOCAL_u8Iterator < Copy_u8Size ; LOCAL_u8Iterator++)
 80009ba:	7dfb      	ldrb	r3, [r7, #23]
 80009bc:	3301      	adds	r3, #1
 80009be:	75fb      	strb	r3, [r7, #23]
 80009c0:	7dfa      	ldrb	r2, [r7, #23]
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d3f1      	bcc.n	80009ac <USART_ReceiveBuffer+0x14>
	}
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <USART_IRQHandler>:

	return Local_ErrorStatus;
}

void USART_IRQHandler(USART_UsartNumber_t Copy_USARTNum)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]

	uint8_t Local_FlagVal=0;
 80009de:	2300      	movs	r3, #0
 80009e0:	73fb      	strb	r3, [r7, #15]

	/*Reading (Read data register not empty) flag*/
	USART_ReadFlag(Copy_USARTNum , READ_DATA_R_NOT_EMPTY_FLAG, &Local_FlagVal);
 80009e2:	f107 020f 	add.w	r2, r7, #15
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2105      	movs	r1, #5
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fda2 	bl	8000534 <USART_ReadFlag>
	if(Local_FlagVal == 1)
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d137      	bne.n	8000a66 <USART_IRQHandler+0x92>
	{

		/*Clear flag*/
		USARTx[Copy_USARTNum]->USART_SR &=~ (1<<USART_RXNE);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4a57      	ldr	r2, [pc, #348]	; (8000b58 <USART_IRQHandler+0x184>)
 80009fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4955      	ldr	r1, [pc, #340]	; (8000b58 <USART_IRQHandler+0x184>)
 8000a04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a08:	f022 0220 	bic.w	r2, r2, #32
 8000a0c:	601a      	str	r2, [r3, #0]
		/* (Read data register not empty) flag is set*/
		*GLOBAL_ReceivedData[Copy_USARTNum] = USARTx[Copy_USARTNum]->USART_DR ;
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4a51      	ldr	r2, [pc, #324]	; (8000b58 <USART_IRQHandler+0x184>)
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	6859      	ldr	r1, [r3, #4]
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4a50      	ldr	r2, [pc, #320]	; (8000b5c <USART_IRQHandler+0x188>)
 8000a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a20:	b28a      	uxth	r2, r1
 8000a22:	801a      	strh	r2, [r3, #0]

		/*Disable (Read data register not empty) interrupt*/
		USARTx[Copy_USARTNum]->USART_CR1 &=~ (1<<USART_RXNEIE);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4a4c      	ldr	r2, [pc, #304]	; (8000b58 <USART_IRQHandler+0x184>)
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4949      	ldr	r1, [pc, #292]	; (8000b58 <USART_IRQHandler+0x184>)
 8000a32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a36:	f022 0220 	bic.w	r2, r2, #32
 8000a3a:	60da      	str	r2, [r3, #12]

		/*if callback function is valid call it*/
		if(G_CallBackFunc[Copy_USARTNum][READ_DATA_R_NOT_EMPTY_FLAG] != NULL)
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	4948      	ldr	r1, [pc, #288]	; (8000b60 <USART_IRQHandler+0x18c>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	3314      	adds	r3, #20
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d009      	beq.n	8000a66 <USART_IRQHandler+0x92>
		{
			G_CallBackFunc[Copy_USARTNum][READ_DATA_R_NOT_EMPTY_FLAG]();
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	4942      	ldr	r1, [pc, #264]	; (8000b60 <USART_IRQHandler+0x18c>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	440b      	add	r3, r1
 8000a60:	3314      	adds	r3, #20
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4798      	blx	r3
		}

	}

	Local_FlagVal=0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	73fb      	strb	r3, [r7, #15]
	/*Reading Transmit data register empty Flag*/
	USART_ReadFlag(Copy_USARTNum , TRANSMIT_DATA_R_EMPTY_FLAG, &Local_FlagVal);
 8000a6a:	f107 020f 	add.w	r2, r7, #15
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2107      	movs	r1, #7
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fd5e 	bl	8000534 <USART_ReadFlag>
	if(Local_FlagVal == 1)
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d12f      	bne.n	8000ade <USART_IRQHandler+0x10a>
	{
		/* (Transmit data register empty) flag is set*/
		USARTx[Copy_USARTNum]->USART_DR |= ( TRANSMITTED_DATA_MASK & GLOBAL_TransmittedData[Copy_USARTNum]);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4a35      	ldr	r2, [pc, #212]	; (8000b58 <USART_IRQHandler+0x184>)
 8000a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4936      	ldr	r1, [pc, #216]	; (8000b64 <USART_IRQHandler+0x190>)
 8000a8c:	5ccb      	ldrb	r3, [r1, r3]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4931      	ldr	r1, [pc, #196]	; (8000b58 <USART_IRQHandler+0x184>)
 8000a94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a98:	4302      	orrs	r2, r0
 8000a9a:	605a      	str	r2, [r3, #4]
		/*Disable (Transmit data register empty) interrupt*/
		USARTx[Copy_USARTNum]->USART_CR1 &=~ (1<<USART_TXEIE);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4a2e      	ldr	r2, [pc, #184]	; (8000b58 <USART_IRQHandler+0x184>)
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	492b      	ldr	r1, [pc, #172]	; (8000b58 <USART_IRQHandler+0x184>)
 8000aaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ab2:	60da      	str	r2, [r3, #12]
		/*if callback function is valid call it*/
		if(G_CallBackFunc[Copy_USARTNum][TRANSMIT_DATA_R_EMPTY_FLAG] != NULL)
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	492a      	ldr	r1, [pc, #168]	; (8000b60 <USART_IRQHandler+0x18c>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	440b      	add	r3, r1
 8000ac2:	331c      	adds	r3, #28
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d009      	beq.n	8000ade <USART_IRQHandler+0x10a>
		{
			G_CallBackFunc[Copy_USARTNum][TRANSMIT_DATA_R_EMPTY_FLAG]();
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	4924      	ldr	r1, [pc, #144]	; (8000b60 <USART_IRQHandler+0x18c>)
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	440b      	add	r3, r1
 8000ad8:	331c      	adds	r3, #28
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4798      	blx	r3
		}
	}

	Local_FlagVal=0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	73fb      	strb	r3, [r7, #15]
	/*Reading Transmission Complete Flag*/
	USART_ReadFlag(Copy_USARTNum , TRANSMISSION_COMPLETE_FLAG, &Local_FlagVal);
 8000ae2:	f107 020f 	add.w	r2, r7, #15
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2106      	movs	r1, #6
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd22 	bl	8000534 <USART_ReadFlag>
	if(Local_FlagVal == 1)
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d12c      	bne.n	8000b50 <USART_IRQHandler+0x17c>
	{
		/*Clear flag*/
		USARTx[Copy_USARTNum]->USART_SR &=~ (1<<USART_TC);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <USART_IRQHandler+0x184>)
 8000afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	4915      	ldr	r1, [pc, #84]	; (8000b58 <USART_IRQHandler+0x184>)
 8000b04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b0c:	601a      	str	r2, [r3, #0]
		/* (Transmission Complete Flag) flag is set*/
		/*Disable (Transmission Complete) interrupt*/
		USARTx[Copy_USARTNum]->USART_CR1 &=~ (1<<USART_TCIE);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <USART_IRQHandler+0x184>)
 8000b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	490f      	ldr	r1, [pc, #60]	; (8000b58 <USART_IRQHandler+0x184>)
 8000b1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b24:	60da      	str	r2, [r3, #12]
		/*if callback function is valid call it*/
		if(G_CallBackFunc[Copy_USARTNum][TRANSMISSION_COMPLETE_FLAG] != NULL)
 8000b26:	79fa      	ldrb	r2, [r7, #7]
 8000b28:	490d      	ldr	r1, [pc, #52]	; (8000b60 <USART_IRQHandler+0x18c>)
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	440b      	add	r3, r1
 8000b34:	3318      	adds	r3, #24
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d009      	beq.n	8000b50 <USART_IRQHandler+0x17c>
		{
			G_CallBackFunc[Copy_USARTNum][TRANSMISSION_COMPLETE_FLAG]();
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <USART_IRQHandler+0x18c>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3318      	adds	r3, #24
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4798      	blx	r3
		}

	}


}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000020 	.word	0x20000020
 8000b5c:	20000144 	.word	0x20000144
 8000b60:	20000054 	.word	0x20000054
 8000b64:	2000015c 	.word	0x2000015c

08000b68 <USART1_IRQHandler>:
/********************************************************************************
 ************************** ### HANDLER SECTION ### *****************************
 ********************************************************************************/
/*USART 1 HANDLER*/
void USART1_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	USART_IRQHandler(USART_USART1);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff ff31 	bl	80009d4 <USART_IRQHandler>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <USART2_IRQHandler>:

/*USART 2 HANDLER*/
void USART2_IRQHandler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
	USART_IRQHandler(USART_USART2);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff ff2a 	bl	80009d4 <USART_IRQHandler>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <USART3_IRQHandler>:

/*USART 3 HANDLER*/
void USART3_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	USART_IRQHandler(USART_USART3);
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff ff23 	bl	80009d4 <USART_IRQHandler>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <UART4_IRQHandler>:

/*USART 4 HANDLER*/
void UART4_IRQHandler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
	USART_IRQHandler(USART_USART4);
 8000b96:	2003      	movs	r0, #3
 8000b98:	f7ff ff1c 	bl	80009d4 <USART_IRQHandler>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <UART5_IRQHandler>:

/*USART 5 HANDLER*/
void UART5_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	USART_IRQHandler(USART_USART5);
 8000ba4:	2004      	movs	r0, #4
 8000ba6:	f7ff ff15 	bl	80009d4 <USART_IRQHandler>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}

08000bae <USART6_IRQHandler>:

/*USART 6 HANDLER*/
void USART6_IRQHandler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
	USART_IRQHandler(USART_USART6);
 8000bb2:	2005      	movs	r0, #5
 8000bb4:	f7ff ff0e 	bl	80009d4 <USART_IRQHandler>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <setup>:
#include "GPIO_interface.h"
#include "SYSTICK_interface.h"
#include "USART_interface.h"

void setup(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0

	RCC_AHB1EnableClock(GPIOAEN);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f7ff fc86 	bl	80004d4 <RCC_AHB1EnableClock>
	RCC_APB1EnableClock(USART2EN);
 8000bc8:	2011      	movs	r0, #17
 8000bca:	f7ff fc9b 	bl	8000504 <RCC_APB1EnableClock>



	PinConfig_t PINA5 = {
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	f8c3 2003 	str.w	r2, [r3, #3]
 8000bda:	2305      	movs	r3, #5
 8000bdc:	747b      	strb	r3, [r7, #17]
 8000bde:	2301      	movs	r3, #1
 8000be0:	74bb      	strb	r3, [r7, #18]
			.OutputType = PUSH_PULL,

	};


	PinConfig_t USART_TX_PIN = {
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <setup+0x74>)
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bec:	6018      	str	r0, [r3, #0]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	8019      	strh	r1, [r3, #0]
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	0c0a      	lsrs	r2, r1, #16
 8000bf6:	701a      	strb	r2, [r3, #0]
			.AltFunc=AF7, .Mode=ALTERNATIVE_FUNCTION, .OutputType=PUSH_PULL,
			.PinNum=PIN2, .Port=PORTA, .PullType=NOPULL, .Speed=LOW_SPEED
	};

	PinConfig_t USART_RX_PIN = {
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <setup+0x78>)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c00:	6018      	str	r0, [r3, #0]
 8000c02:	3304      	adds	r3, #4
 8000c04:	8019      	strh	r1, [r3, #0]
 8000c06:	3302      	adds	r3, #2
 8000c08:	0c0a      	lsrs	r2, r1, #16
 8000c0a:	701a      	strb	r2, [r3, #0]





	GPIO_u8PinInit(&USART_TX_PIN);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff faf7 	bl	8000204 <GPIO_u8PinInit>
	GPIO_u8PinInit(&USART_RX_PIN);
 8000c16:	463b      	mov	r3, r7
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff faf3 	bl	8000204 <GPIO_u8PinInit>


	GPIO_u8PinInit(&PINA5);
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff faee 	bl	8000204 <GPIO_u8PinInit>

}
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	08000db0 	.word	0x08000db0
 8000c34:	08000db8 	.word	0x08000db8

08000c38 <main>:

int main(void)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
	setup();
 8000c3e:	f7ff ffbd 	bl	8000bbc <setup>



	USART_ConfigReg_t UART2 =
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <main+0xb4>)
 8000c44:	f107 0408 	add.w	r4, r7, #8
 8000c48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.USART_USARTNUMBER = USART_USART2 ,
			.USART_OVERSAMPLINGMODE = USART_OVER8_ ,
			.USART_SYNCHMODE = USART_ASYNCH
	};

	USART_Init(&UART2);
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fca2 	bl	800059c <USART_Init>

	uint8_t RX_Data = '1' ;
 8000c58:	2331      	movs	r3, #49	; 0x31
 8000c5a:	71fb      	strb	r3, [r7, #7]

	uint8_t password[5] = "1234";
 8000c5c:	4a24      	ldr	r2, [pc, #144]	; (8000cf0 <main+0xb8>)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c64:	6018      	str	r0, [r3, #0]
 8000c66:	3304      	adds	r3, #4
 8000c68:	7019      	strb	r1, [r3, #0]



	while(1)
	{
		USART_ReceiveData(&UART2, &RX_Data);
 8000c6a:	1dfa      	adds	r2, r7, #7
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fe62 	bl	800093c <USART_ReceiveData>
		USART_TransmitData(&UART2, RX_Data);
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fe17 	bl	80008b4 <USART_TransmitData>

		USART_TransmitString(&UART2 , "\n the current password : ");
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	491a      	ldr	r1, [pc, #104]	; (8000cf4 <main+0xbc>)
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe37 	bl	8000900 <USART_TransmitString>
		USART_TransmitString(&UART2 , password);
 8000c92:	463a      	mov	r2, r7
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe30 	bl	8000900 <USART_TransmitString>

		USART_TransmitString(&UART2 , "\n Enter new password :  ");
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	4914      	ldr	r1, [pc, #80]	; (8000cf8 <main+0xc0>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fe2a 	bl	8000900 <USART_TransmitString>
		USART_ReceiveBuffer(&UART2,password ,4 );
 8000cac:	4639      	mov	r1, r7
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fe6f 	bl	8000998 <USART_ReceiveBuffer>

		USART_TransmitString(&UART2 , password);
 8000cba:	463a      	mov	r2, r7
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fe1c 	bl	8000900 <USART_TransmitString>

		if(RX_Data == '1')
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b31      	cmp	r3, #49	; 0x31
 8000ccc:	d105      	bne.n	8000cda <main+0xa2>
		{
			GPIO_u8SetPinValue(PORTA, PIN5, PIN_HIGH);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff fbb6 	bl	8000444 <GPIO_u8SetPinValue>
 8000cd8:	e7c7      	b.n	8000c6a <main+0x32>
		}

		else if (RX_Data == '2')
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b32      	cmp	r3, #50	; 0x32
 8000cde:	d1c4      	bne.n	8000c6a <main+0x32>
		{
			GPIO_u8SetPinValue(PORTA, PIN5, PIN_LOW);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fbad 	bl	8000444 <GPIO_u8SetPinValue>
		USART_ReceiveData(&UART2, &RX_Data);
 8000cea:	e7be      	b.n	8000c6a <main+0x32>
 8000cec:	08000df8 	.word	0x08000df8
 8000cf0:	08000e08 	.word	0x08000e08
 8000cf4:	08000dc0 	.word	0x08000dc0
 8000cf8:	08000ddc 	.word	0x08000ddc

08000cfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	; (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	; (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d2a:	f000 f811 	bl	8000d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2e:	f7ff ff83 	bl	8000c38 <main>

08000d32 <LoopForever>:

LoopForever:
  b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   r0, =_estack
 8000d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000d40:	08000e18 	.word	0x08000e18
  ldr r2, =_sbss
 8000d44:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000d48:	20000164 	.word	0x20000164

08000d4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <__libc_init_array>:
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	4d0d      	ldr	r5, [pc, #52]	; (8000d88 <__libc_init_array+0x38>)
 8000d54:	4c0d      	ldr	r4, [pc, #52]	; (8000d8c <__libc_init_array+0x3c>)
 8000d56:	1b64      	subs	r4, r4, r5
 8000d58:	10a4      	asrs	r4, r4, #2
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	42a6      	cmp	r6, r4
 8000d5e:	d109      	bne.n	8000d74 <__libc_init_array+0x24>
 8000d60:	4d0b      	ldr	r5, [pc, #44]	; (8000d90 <__libc_init_array+0x40>)
 8000d62:	4c0c      	ldr	r4, [pc, #48]	; (8000d94 <__libc_init_array+0x44>)
 8000d64:	f000 f818 	bl	8000d98 <_init>
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	10a4      	asrs	r4, r4, #2
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	42a6      	cmp	r6, r4
 8000d70:	d105      	bne.n	8000d7e <__libc_init_array+0x2e>
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
 8000d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d78:	4798      	blx	r3
 8000d7a:	3601      	adds	r6, #1
 8000d7c:	e7ee      	b.n	8000d5c <__libc_init_array+0xc>
 8000d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d82:	4798      	blx	r3
 8000d84:	3601      	adds	r6, #1
 8000d86:	e7f2      	b.n	8000d6e <__libc_init_array+0x1e>
 8000d88:	08000e10 	.word	0x08000e10
 8000d8c:	08000e10 	.word	0x08000e10
 8000d90:	08000e10 	.word	0x08000e10
 8000d94:	08000e14 	.word	0x08000e14

08000d98 <_init>:
 8000d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9a:	bf00      	nop
 8000d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9e:	bc08      	pop	{r3}
 8000da0:	469e      	mov	lr, r3
 8000da2:	4770      	bx	lr

08000da4 <_fini>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	bf00      	nop
 8000da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000daa:	bc08      	pop	{r3}
 8000dac:	469e      	mov	lr, r3
 8000dae:	4770      	bx	lr
