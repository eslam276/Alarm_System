
Alarm_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e50  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08002014  08002014  00012014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800236c  0800236c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800236c  0800236c  0001236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002374  08002374  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002374  08002374  00012374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002378  08002378  00012378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800237c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200000ec  08002468  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002468  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000036e0  00000000  00000000  0002015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000cfa  00000000  00000000  0002383f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000378  00000000  00000000  00024540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000277  00000000  00000000  000248b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002578  00000000  00000000  00024b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000427c  00000000  00000000  000270a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a045  00000000  00000000  0002b323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c78  00000000  00000000  00035368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00035fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000ec 	.word	0x200000ec
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001ffc 	.word	0x08001ffc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000f0 	.word	0x200000f0
 8000200:	08001ffc 	.word	0x08001ffc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <APP_voidInit>:




void APP_voidInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08c      	sub	sp, #48	; 0x30
 8000504:	af00      	add	r7, sp, #0

	 RCC_AHB1EnableClk(AHB1_GPIOA);
 8000506:	2000      	movs	r0, #0
 8000508:	f001 f80c 	bl	8001524 <RCC_AHB1EnableClk>
	 RCC_AHB1EnableClk(AHB1_GPIOB);
 800050c:	2001      	movs	r0, #1
 800050e:	f001 f809 	bl	8001524 <RCC_AHB1EnableClk>

	 RCC_APB1Enable(APB1_USART2);
 8000512:	2011      	movs	r0, #17
 8000514:	f001 f81e 	bl	8001554 <RCC_APB1Enable>
	 RCC_APB1Enable(APB1_I2C1);
 8000518:	2015      	movs	r0, #21
 800051a:	f001 f81b 	bl	8001554 <RCC_APB1Enable>


	 GPIO_PIN_CFG_t PINA5 =
 800051e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	f8c3 2003 	str.w	r2, [r3, #3]
 800052a:	2305      	movs	r3, #5
 800052c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000530:	2301      	movs	r3, #1
 8000532:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 };




	 GPIO_PIN_CFG_t USART_TX_PIN = {
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	f8c3 2003 	str.w	r2, [r3, #3]
 8000542:	2302      	movs	r3, #2
 8000544:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000548:	2302      	movs	r3, #2
 800054a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800054e:	2307      	movs	r3, #7
 8000550:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			.AltFunc=AF7, .Mode=ALTERNATIVE_FUNCTION, .OutputType=PUSH_PULL,
			.PinNum=PIN2, .Port=PORTA
	};

	 GPIO_PIN_CFG_t USART_RX_PIN = {
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	f8c3 2003 	str.w	r2, [r3, #3]
 8000560:	2303      	movs	r3, #3
 8000562:	767b      	strb	r3, [r7, #25]
 8000564:	2302      	movs	r3, #2
 8000566:	76bb      	strb	r3, [r7, #26]
 8000568:	2307      	movs	r3, #7
 800056a:	77bb      	strb	r3, [r7, #30]
			.AltFunc=AF7, .Mode=ALTERNATIVE_FUNCTION, .OutputType=PUSH_PULL,
			.PinNum=PIN3, .Port=PORTA
	};


	GPIO_PIN_CFG_t GPIO_SDA =
 800056c:	4a2d      	ldr	r2, [pc, #180]	; (8000624 <APP_voidInit+0x124>)
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000576:	6018      	str	r0, [r3, #0]
 8000578:	3304      	adds	r3, #4
 800057a:	8019      	strh	r1, [r3, #0]
 800057c:	3302      	adds	r3, #2
 800057e:	0c0a      	lsrs	r2, r1, #16
 8000580:	701a      	strb	r2, [r3, #0]
	{
			.Port = PORTB, .PinNum = PIN7, .Mode  = ALTERNATIVE_FUNCTION, .OutputType = OPEN_DRAIN,
			.AltFunc  = AF4, .PullType = PULL_UP, .Speed  = HIGH_
	};
	GPIO_PIN_CFG_t GPIO_SCL=
 8000582:	4a29      	ldr	r2, [pc, #164]	; (8000628 <APP_voidInit+0x128>)
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800058c:	6018      	str	r0, [r3, #0]
 800058e:	3304      	adds	r3, #4
 8000590:	8019      	strh	r1, [r3, #0]
 8000592:	3302      	adds	r3, #2
 8000594:	0c0a      	lsrs	r2, r1, #16
 8000596:	701a      	strb	r2, [r3, #0]
			.Port     = PORTB,	.PinNum        = PIN6,	.Mode          = ALTERNATIVE_FUNCTION,
			.OutputType = OPEN_DRAIN, .AltFunc  = AF4, .PullType = PULL_UP, .Speed   = HIGH_
	};


	I2C1_SysConfig.I2C_NUMBER 				  = I2C_1					;
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <APP_voidInit+0x12c>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	I2C1_SysConfig.I2C_ACKNOWLEDGE 		      = I2C_ACK					;
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <APP_voidInit+0x12c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	705a      	strb	r2, [r3, #1]
	I2C1_SysConfig.I2C_SPEED_MODE 			  = SM_MODE					;
 80005a4:	4b21      	ldr	r3, [pc, #132]	; (800062c <APP_voidInit+0x12c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	709a      	strb	r2, [r3, #2]
	I2C1_SysConfig.I2C_STRETCHING 			  = NO_STRETCH				;
 80005aa:	4b20      	ldr	r3, [pc, #128]	; (800062c <APP_voidInit+0x12c>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	70da      	strb	r2, [r3, #3]
	I2C1_SysConfig.I2C_SCL_FREQ 			  = 100						;
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <APP_voidInit+0x12c>)
 80005b2:	2264      	movs	r2, #100	; 0x64
 80005b4:	80da      	strh	r2, [r3, #6]
	I2C1_SysConfig.I2C_FREQ 				  = 16						;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <APP_voidInit+0x12c>)
 80005b8:	2210      	movs	r2, #16
 80005ba:	721a      	strb	r2, [r3, #8]
	I2C1_SysConfig.I2C_PEC 				      = NO_PEC					;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <APP_voidInit+0x12c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	711a      	strb	r2, [r3, #4]
	I2C1_SysConfig.I2C_ADD_MODE 			  = _7_BIT_SLAVE_ADD		;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <APP_voidInit+0x12c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	715a      	strb	r2, [r3, #5]
	I2C1_SysConfig.I2C_OWN_ADD 			      = 0						;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <APP_voidInit+0x12c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	725a      	strb	r2, [r3, #9]

	

		USART_Cnfg_t UART2 =
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <APP_voidInit+0x130>)
 80005d0:	463b      	mov	r3, r7
 80005d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d6:	6018      	str	r0, [r3, #0]
 80005d8:	3304      	adds	r3, #4
 80005da:	8019      	strh	r1, [r3, #0]





	 GPIO_u8PinInit(&PINA5);
 80005dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f9e3 	bl	80009ac <GPIO_u8PinInit>

	 GPIO_u8PinInit(&USART_TX_PIN);
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f9de 	bl	80009ac <GPIO_u8PinInit>
	 GPIO_u8PinInit(&USART_RX_PIN);
 80005f0:	f107 0318 	add.w	r3, r7, #24
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f9d9 	bl	80009ac <GPIO_u8PinInit>

	 GPIO_u8PinInit(&GPIO_SDA);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f9d4 	bl	80009ac <GPIO_u8PinInit>
	 GPIO_u8PinInit(&GPIO_SCL);
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f9cf 	bl	80009ac <GPIO_u8PinInit>


	 USART_u8Init(&UART2);
 800060e:	463b      	mov	r3, r7
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fa7b 	bl	8001b0c <USART_u8Init>
	 I2C_Init(&I2C1_SysConfig);
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <APP_voidInit+0x12c>)
 8000618:	f000 faf6 	bl	8000c08 <I2C_Init>




}
 800061c:	bf00      	nop
 800061e:	3730      	adds	r7, #48	; 0x30
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	08002014 	.word	0x08002014
 8000628:	0800201c 	.word	0x0800201c
 800062c:	20000108 	.word	0x20000108
 8000630:	08002024 	.word	0x08002024

08000634 <APP_voidLogin>:




void APP_voidLogin(void)
{ 
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	uint8_t Local_u8Check = LOGIN_IsValid() ;
 800063a:	f000 feb1 	bl	80013a0 <LOGIN_IsValid>
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]

	if (Local_u8Check == VALID)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d103      	bne.n	8000650 <APP_voidLogin+0x1c>
	{
		Print("\r\n\r\n Welcome Eslam .................");
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <APP_voidLogin+0x34>)
 800064a:	f000 ffd3 	bl	80015f4 <Print>
		
	}
	
	
	
}
 800064e:	e006      	b.n	800065e <APP_voidLogin+0x2a>
	else if (Local_u8Check == INVALID)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d103      	bne.n	800065e <APP_voidLogin+0x2a>
		Print("\r\n\r\n The System is closed :(  ");
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <APP_voidLogin+0x38>)
 8000658:	f000 ffcc 	bl	80015f4 <Print>
		while (1)
 800065c:	e7fe      	b.n	800065c <APP_voidLogin+0x28>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	0800202c 	.word	0x0800202c
 800066c:	08002054 	.word	0x08002054

08000670 <APP_voidMenu>:


void APP_voidMenu(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	
	uint8_t Local_u8Number ;

	
	Print("\r\n\r\n Menu : ");
 8000676:	4826      	ldr	r0, [pc, #152]	; (8000710 <APP_voidMenu+0xa0>)
 8000678:	f000 ffbc 	bl	80015f4 <Print>
	Print("\r\n\r\n 1) Display time and date ");
 800067c:	4825      	ldr	r0, [pc, #148]	; (8000714 <APP_voidMenu+0xa4>)
 800067e:	f000 ffb9 	bl	80015f4 <Print>
	Print("\r\n 2) Set time and date ");
 8000682:	4825      	ldr	r0, [pc, #148]	; (8000718 <APP_voidMenu+0xa8>)
 8000684:	f000 ffb6 	bl	80015f4 <Print>
	Print("\r\n 3) Set Alarm ");
 8000688:	4824      	ldr	r0, [pc, #144]	; (800071c <APP_voidMenu+0xac>)
 800068a:	f000 ffb3 	bl	80015f4 <Print>
	Print("\r\n 4) Display all Alarms ");
 800068e:	4824      	ldr	r0, [pc, #144]	; (8000720 <APP_voidMenu+0xb0>)
 8000690:	f000 ffb0 	bl	80015f4 <Print>
	Print("\r\n 5) Exit \r\n");
 8000694:	4823      	ldr	r0, [pc, #140]	; (8000724 <APP_voidMenu+0xb4>)
 8000696:	f000 ffad 	bl	80015f4 <Print>

	Input(&Local_u8Number , 1);
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	2101      	movs	r1, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ffb4 	bl	800160c <Input>

	while (Local_u8Number < '1' || Local_u8Number > '5')
 80006a4:	e007      	b.n	80006b6 <APP_voidMenu+0x46>
	{
		Print("\r\n Please enter a valid number ... ");
 80006a6:	4820      	ldr	r0, [pc, #128]	; (8000728 <APP_voidMenu+0xb8>)
 80006a8:	f000 ffa4 	bl	80015f4 <Print>
		Input(&Local_u8Number , 1);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 ffab 	bl	800160c <Input>
	while (Local_u8Number < '1' || Local_u8Number > '5')
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b30      	cmp	r3, #48	; 0x30
 80006ba:	d9f4      	bls.n	80006a6 <APP_voidMenu+0x36>
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b35      	cmp	r3, #53	; 0x35
 80006c0:	d8f1      	bhi.n	80006a6 <APP_voidMenu+0x36>
	}

	switch (Local_u8Number)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	3b31      	subs	r3, #49	; 0x31
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d81c      	bhi.n	8000704 <APP_voidMenu+0x94>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <APP_voidMenu+0x60>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e5 	.word	0x080006e5
 80006d4:	080006eb 	.word	0x080006eb
 80006d8:	080006f7 	.word	0x080006f7
 80006dc:	080006fd 	.word	0x080006fd
 80006e0:	08000703 	.word	0x08000703
	{
		case '1' :
			SRV_ShowTimeNDate();
 80006e4:	f001 f85a 	bl	800179c <SRV_ShowTimeNDate>
			break;
 80006e8:	e00d      	b.n	8000706 <APP_voidMenu+0x96>

		case '2' :
			SRV_SetTimeNDate();
 80006ea:	f000 ffed 	bl	80016c8 <SRV_SetTimeNDate>
			Print("\r\nTime and Date is set successfully. ;)");
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <APP_voidMenu+0xbc>)
 80006f0:	f000 ff80 	bl	80015f4 <Print>
			break;
 80006f4:	e007      	b.n	8000706 <APP_voidMenu+0x96>

		case '3' :
			Set_Alarm();
 80006f6:	f000 f81b 	bl	8000730 <Set_Alarm>
			break;
 80006fa:	e004      	b.n	8000706 <APP_voidMenu+0x96>

		case '4' :
			Display_Alarms();
 80006fc:	f000 f852 	bl	80007a4 <Display_Alarms>
			break;
 8000700:	e001      	b.n	8000706 <APP_voidMenu+0x96>

		case '5' :
			while (1)
 8000702:	e7fe      	b.n	8000702 <APP_voidMenu+0x92>
			}
			
			break;
		
		default:
			break;
 8000704:	bf00      	nop
	}
	


}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	08002074 	.word	0x08002074
 8000714:	08002084 	.word	0x08002084
 8000718:	080020a4 	.word	0x080020a4
 800071c:	080020c0 	.word	0x080020c0
 8000720:	080020d4 	.word	0x080020d4
 8000724:	080020f0 	.word	0x080020f0
 8000728:	08002100 	.word	0x08002100
 800072c:	08002124 	.word	0x08002124

08000730 <Set_Alarm>:

}


 void Set_Alarm(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	uint8_t Local_u8AlarmNumber ; 


	Print("\r\n\r\n please Enter the alarm number from 1 to 5 : ");
 8000736:	4817      	ldr	r0, [pc, #92]	; (8000794 <Set_Alarm+0x64>)
 8000738:	f000 ff5c 	bl	80015f4 <Print>
	Input(&Local_u8AlarmNumber,1);
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	2101      	movs	r1, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f000 ff63 	bl	800160c <Input>

	while (Local_u8AlarmNumber < '1' || Local_u8AlarmNumber > '5')
 8000746:	e007      	b.n	8000758 <Set_Alarm+0x28>
	{
		Print("\r\n Please enter a valid number ... ");
 8000748:	4813      	ldr	r0, [pc, #76]	; (8000798 <Set_Alarm+0x68>)
 800074a:	f000 ff53 	bl	80015f4 <Print>
		Input(&Local_u8AlarmNumber , 1);
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	2101      	movs	r1, #1
 8000752:	4618      	mov	r0, r3
 8000754:	f000 ff5a 	bl	800160c <Input>
	while (Local_u8AlarmNumber < '1' || Local_u8AlarmNumber > '5')
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b30      	cmp	r3, #48	; 0x30
 800075c:	d9f4      	bls.n	8000748 <Set_Alarm+0x18>
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b35      	cmp	r3, #53	; 0x35
 8000762:	d8f1      	bhi.n	8000748 <Set_Alarm+0x18>
	}


	Local_u8AlarmNumber  = Local_u8AlarmNumber - 48 ;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	3b30      	subs	r3, #48	; 0x30
 8000768:	b2db      	uxtb	r3, r3
 800076a:	71fb      	strb	r3, [r7, #7]

	Print("\r\n\r\n please Enter the alarm Name : ");
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <Set_Alarm+0x6c>)
 800076e:	f000 ff41 	bl	80015f4 <Print>
	InputString( &Global_u8Alarms[Local_u8AlarmNumber - 1] , ALARM_NAME_LEGTH);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	4613      	mov	r3, r2
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <Set_Alarm+0x70>)
 8000780:	4413      	add	r3, r2
 8000782:	211e      	movs	r1, #30
 8000784:	4618      	mov	r0, r3
 8000786:	f000 ff5f 	bl	8001648 <InputString>

	

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	08002188 	.word	0x08002188
 8000798:	08002100 	.word	0x08002100
 800079c:	080021bc 	.word	0x080021bc
 80007a0:	20000000 	.word	0x20000000

080007a4 <Display_Alarms>:


 void Display_Alarms(void)
 {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
	uint8_t LOCAL_u8LoopIterator ;

	Print("\r\n");
 80007aa:	4813      	ldr	r0, [pc, #76]	; (80007f8 <Display_Alarms+0x54>)
 80007ac:	f000 ff22 	bl	80015f4 <Print>

	for(LOCAL_u8LoopIterator = 0 ; LOCAL_u8LoopIterator < NUM_OF_ALARMS  ; LOCAL_u8LoopIterator++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	e018      	b.n	80007e8 <Display_Alarms+0x44>
	{
		Print("\r\n");
 80007b6:	4810      	ldr	r0, [pc, #64]	; (80007f8 <Display_Alarms+0x54>)
 80007b8:	f000 ff1c 	bl	80015f4 <Print>
		SendChar(LOCAL_u8LoopIterator + 1 + 48 );
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	3331      	adds	r3, #49	; 0x31
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 ff32 	bl	800162c <SendChar>
		Print(") ");
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <Display_Alarms+0x58>)
 80007ca:	f000 ff13 	bl	80015f4 <Print>
		Print(&Global_u8Alarms[LOCAL_u8LoopIterator]);
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	1a9b      	subs	r3, r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4a09      	ldr	r2, [pc, #36]	; (8000800 <Display_Alarms+0x5c>)
 80007da:	4413      	add	r3, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 ff09 	bl	80015f4 <Print>
	for(LOCAL_u8LoopIterator = 0 ; LOCAL_u8LoopIterator < NUM_OF_ALARMS  ; LOCAL_u8LoopIterator++)
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	3301      	adds	r3, #1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d9e3      	bls.n	80007b6 <Display_Alarms+0x12>
	}
	
 }
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	080021e0 	.word	0x080021e0
 80007fc:	080021e4 	.word	0x080021e4
 8000800:	20000000 	.word	0x20000000

08000804 <APP_FirstSetUp>:



void APP_FirstSetUp(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	SRV_SetTimeNDate();
 8000808:	f000 ff5e 	bl	80016c8 <SRV_SetTimeNDate>

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <RTC_SetTimeDate_>:

#include "DS1307_prv.h"
#include "DS1307_interface.h"

void RTC_SetTimeDate_(I2C_config_t* I2C_Config, RTC_Config_t* TimeAndDate ,RTC_Format_t Format)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	4613      	mov	r3, r2
 800081c:	71fb      	strb	r3, [r7, #7]
	static uint8_t Local_u8DateTime[8] = {0};
	uint8_t Local_u8Iterator;
	Local_u8DateTime[0] = 0x00;
 800081e:	4b37      	ldr	r3, [pc, #220]	; (80008fc <RTC_SetTimeDate_+0xec>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]


	/*Seconds*/
	Local_u8DateTime[1] = (TimeAndDate->SECONDS);
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	789a      	ldrb	r2, [r3, #2]
 8000828:	4b34      	ldr	r3, [pc, #208]	; (80008fc <RTC_SetTimeDate_+0xec>)
 800082a:	705a      	strb	r2, [r3, #1]
	/* it is important to enable the oscillator (CH bit=0) during initial configuration.*/
	Local_u8DateTime[1] &=~ (1 << 7);
 800082c:	4b33      	ldr	r3, [pc, #204]	; (80008fc <RTC_SetTimeDate_+0xec>)
 800082e:	785b      	ldrb	r3, [r3, #1]
 8000830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b31      	ldr	r3, [pc, #196]	; (80008fc <RTC_SetTimeDate_+0xec>)
 8000838:	705a      	strb	r2, [r3, #1]
	/*Minutes*/
	Local_u8DateTime[2] = (TimeAndDate->MINUTES);
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	78da      	ldrb	r2, [r3, #3]
 800083e:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <RTC_SetTimeDate_+0xec>)
 8000840:	709a      	strb	r2, [r3, #2]

	/*24 time format*/
	if(TimeAndDate->TIME_FORMAT == '1')
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b31      	cmp	r3, #49	; 0x31
 8000848:	d10b      	bne.n	8000862 <RTC_SetTimeDate_+0x52>
	{
		Local_u8DateTime[3] = (TimeAndDate->HOURS);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	791a      	ldrb	r2, [r3, #4]
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <RTC_SetTimeDate_+0xec>)
 8000850:	70da      	strb	r2, [r3, #3]
		Local_u8DateTime[3] &=~ (1 << 6);
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <RTC_SetTimeDate_+0xec>)
 8000854:	78db      	ldrb	r3, [r3, #3]
 8000856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <RTC_SetTimeDate_+0xec>)
 800085e:	70da      	strb	r2, [r3, #3]
 8000860:	e01a      	b.n	8000898 <RTC_SetTimeDate_+0x88>
	}
	else
	{
		if(TimeAndDate->AM_PM_NOTATION == '0')
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	785b      	ldrb	r3, [r3, #1]
 8000866:	2b30      	cmp	r3, #48	; 0x30
 8000868:	d104      	bne.n	8000874 <RTC_SetTimeDate_+0x64>
		{
			Local_u8DateTime[3] = (TimeAndDate->HOURS);
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	791a      	ldrb	r2, [r3, #4]
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <RTC_SetTimeDate_+0xec>)
 8000870:	70da      	strb	r2, [r3, #3]
 8000872:	e00a      	b.n	800088a <RTC_SetTimeDate_+0x7a>
		}
		else
		{
			Local_u8DateTime[3] = (TimeAndDate->HOURS);
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	791a      	ldrb	r2, [r3, #4]
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <RTC_SetTimeDate_+0xec>)
 800087a:	70da      	strb	r2, [r3, #3]
			Local_u8DateTime[3] |= (1 << 5);
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <RTC_SetTimeDate_+0xec>)
 800087e:	78db      	ldrb	r3, [r3, #3]
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <RTC_SetTimeDate_+0xec>)
 8000888:	70da      	strb	r2, [r3, #3]
		}
		Local_u8DateTime[3] |= (1 << 6);
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <RTC_SetTimeDate_+0xec>)
 800088c:	78db      	ldrb	r3, [r3, #3]
 800088e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <RTC_SetTimeDate_+0xec>)
 8000896:	70da      	strb	r2, [r3, #3]

	}

	Local_u8DateTime[4] = (TimeAndDate->WEEK_DAY);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	7a1a      	ldrb	r2, [r3, #8]
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <RTC_SetTimeDate_+0xec>)
 800089e:	711a      	strb	r2, [r3, #4]

	Local_u8DateTime[5] = (TimeAndDate->DAY);
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	795a      	ldrb	r2, [r3, #5]
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <RTC_SetTimeDate_+0xec>)
 80008a6:	715a      	strb	r2, [r3, #5]

	Local_u8DateTime[6] = (TimeAndDate->MONTH);
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	799a      	ldrb	r2, [r3, #6]
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <RTC_SetTimeDate_+0xec>)
 80008ae:	719a      	strb	r2, [r3, #6]

	Local_u8DateTime[7] = (TimeAndDate->YEAR);
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	79da      	ldrb	r2, [r3, #7]
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <RTC_SetTimeDate_+0xec>)
 80008b6:	71da      	strb	r2, [r3, #7]

	if(Format == DECIMAL_FORMAT)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d113      	bne.n	80008e6 <RTC_SetTimeDate_+0xd6>
	{
		for(Local_u8Iterator=0 ; Local_u8Iterator<8 ;Local_u8Iterator++)
 80008be:	2300      	movs	r3, #0
 80008c0:	75fb      	strb	r3, [r7, #23]
 80008c2:	e00d      	b.n	80008e0 <RTC_SetTimeDate_+0xd0>
		{
			Local_u8DateTime[Local_u8Iterator] = DecimalToBCD(Local_u8DateTime[Local_u8Iterator]);
 80008c4:	7dfb      	ldrb	r3, [r7, #23]
 80008c6:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <RTC_SetTimeDate_+0xec>)
 80008c8:	5cd3      	ldrb	r3, [r2, r3]
 80008ca:	7dfc      	ldrb	r4, [r7, #23]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f849 	bl	8000964 <DecimalToBCD>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <RTC_SetTimeDate_+0xec>)
 80008d8:	551a      	strb	r2, [r3, r4]
		for(Local_u8Iterator=0 ; Local_u8Iterator<8 ;Local_u8Iterator++)
 80008da:	7dfb      	ldrb	r3, [r7, #23]
 80008dc:	3301      	adds	r3, #1
 80008de:	75fb      	strb	r3, [r7, #23]
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	2b07      	cmp	r3, #7
 80008e4:	d9ee      	bls.n	80008c4 <RTC_SetTimeDate_+0xb4>
		}
	}

	I2C_MasterTransmitData(I2C_Config, WRITE_DS1307_RTC_ADDRESS, Local_u8DateTime, 7);
 80008e6:	2307      	movs	r3, #7
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <RTC_SetTimeDate_+0xec>)
 80008ea:	21d0      	movs	r1, #208	; 0xd0
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f000 fb57 	bl	8000fa0 <I2C_MasterTransmitData>
}
 80008f2:	bf00      	nop
 80008f4:	371c      	adds	r7, #28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000120 	.word	0x20000120

08000900 <RTC_ReadTimeDate>:
	I2C_MasterTransmitData(I2C_Config, WRITE_DS1307_RTC_ADDRESS, Local_u8DateTime, 8);
}


void RTC_ReadTimeDate(I2C_config_t* I2C_Config, RTC_Config_t* TimeAndDate ,uint8_t* DT)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
	//static uint8_t Local_u8ReceivedBCDDateTime[7] = {0};

	uint8_t Local_u8Counter=0;
 800090c:	2300      	movs	r3, #0
 800090e:	75fb      	strb	r3, [r7, #23]

	I2C_MasterRequestWrite(I2C_Config, WRITE_DS1307_RTC_ADDRESS);
 8000910:	21d0      	movs	r1, #208	; 0xd0
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f000 fbe4 	bl	80010e0 <I2C_MasterRequestWrite>

	I2C_SendDataPacket(I2C_Config, 0x00);
 8000918:	2100      	movs	r1, #0
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f000 fc34 	bl	8001188 <I2C_SendDataPacket>

	I2C_MasterRequestRead(I2C_Config, READ_DS1307_RTC_ADDRESS);
 8000920:	21d1      	movs	r1, #209	; 0xd1
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f000 fc4c 	bl	80011c0 <I2C_MasterRequestRead>

	for(Local_u8Counter = 0 ; Local_u8Counter < 7 ; Local_u8Counter++ )
 8000928:	2300      	movs	r3, #0
 800092a:	75fb      	strb	r3, [r7, #23]
 800092c:	e00f      	b.n	800094e <RTC_ReadTimeDate+0x4e>
	{
		if(Local_u8Counter == 6)
 800092e:	7dfb      	ldrb	r3, [r7, #23]
 8000930:	2b06      	cmp	r3, #6
 8000932:	d102      	bne.n	800093a <RTC_ReadTimeDate+0x3a>
		{
			I2C_DisableAck(I2C_Config);
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f000 fc95 	bl	8001264 <I2C_DisableAck>
		}
		I2C_MasterReceiveData(I2C_Config, &DT[Local_u8Counter]);
 800093a:	7dfb      	ldrb	r3, [r7, #23]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	4619      	mov	r1, r3
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f000 fbaa 	bl	800109c <I2C_MasterReceiveData>
	for(Local_u8Counter = 0 ; Local_u8Counter < 7 ; Local_u8Counter++ )
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	3301      	adds	r3, #1
 800094c:	75fb      	strb	r3, [r7, #23]
 800094e:	7dfb      	ldrb	r3, [r7, #23]
 8000950:	2b06      	cmp	r3, #6
 8000952:	d9ec      	bls.n	800092e <RTC_ReadTimeDate+0x2e>
	}

	I2C_SendStopCondition(I2C_Config);
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f000 fafd 	bl	8000f54 <I2C_SendStopCondition>

}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <DecimalToBCD>:

// Function to convert a decimal value to BCD
uint8_t DecimalToBCD(uint8_t decimal) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	return (((decimal / 10) << 4) | (decimal % 10));
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <DecimalToBCD+0x44>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	08db      	lsrs	r3, r3, #3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	b258      	sxtb	r0, r3
 800097e:	79fa      	ldrb	r2, [r7, #7]
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <DecimalToBCD+0x44>)
 8000982:	fba3 1302 	umull	r1, r3, r3, r2
 8000986:	08d9      	lsrs	r1, r3, #3
 8000988:	460b      	mov	r3, r1
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	440b      	add	r3, r1
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	b25b      	sxtb	r3, r3
 8000996:	4303      	orrs	r3, r0
 8000998:	b25b      	sxtb	r3, r3
 800099a:	b2db      	uxtb	r3, r3
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	cccccccd 	.word	0xcccccccd

080009ac <GPIO_u8PinInit>:
 */
/*===============================================================================================================*/


uint8_t GPIO_u8PinInit (const GPIO_PIN_CFG_t* PinCFG )
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
    uint8_t Local_u8ErrorState = OK ;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

    if (PinCFG != NULL)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 8116 	beq.w	8000bec <GPIO_u8PinInit+0x240>
    {

        /* You should check All Variables */
       if ((PinCFG->Port <= PORTH) && (PinCFG->PinNum <= PIN15))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	f200 810e 	bhi.w	8000be6 <GPIO_u8PinInit+0x23a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	785b      	ldrb	r3, [r3, #1]
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	f200 8109 	bhi.w	8000be6 <GPIO_u8PinInit+0x23a>
       {
            /* Selsect GPIO mode : Input , Output , Analog , Alternate Function */
            (GPIOPort[PinCFG->Port]->MODER) &= ~(MODER_MASK << ((PinCFG->PinNum) * MODER_PIN_ACCESS)); /* Clear the mode bits*/
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b8a      	ldr	r3, [pc, #552]	; (8000c04 <GPIO_u8PinInit+0x258>)
 80009dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	2103      	movs	r1, #3
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	4619      	mov	r1, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	4b82      	ldr	r3, [pc, #520]	; (8000c04 <GPIO_u8PinInit+0x258>)
 80009fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009fe:	400a      	ands	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]
            (GPIOPort[PinCFG->Port]->MODER) |=  ( (PinCFG->Mode) << (PinCFG->PinNum) * MODER_PIN_ACCESS );
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b7e      	ldr	r3, [pc, #504]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	789b      	ldrb	r3, [r3, #2]
 8000a14:	4619      	mov	r1, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	785b      	ldrb	r3, [r3, #1]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	4b76      	ldr	r3, [pc, #472]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000a2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	601a      	str	r2, [r3, #0]

            /* Select GPIO pull state : Pullup , pulldown , no pull */
            (GPIOPort[PinCFG->Port]->PUPDR) &= ~(PUPDR_MASK << ((PinCFG->PinNum) * PUPDR_PIN_ACCESS));
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b72      	ldr	r3, [pc, #456]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2103      	movs	r1, #3
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	4619      	mov	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	4b6b      	ldr	r3, [pc, #428]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000a58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a5c:	400a      	ands	r2, r1
 8000a5e:	60da      	str	r2, [r3, #12]
            (GPIOPort[PinCFG->Port]->PUPDR) |=  ( (PinCFG->PullType) << (PinCFG->PinNum) * PUPDR_PIN_ACCESS );
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b67      	ldr	r3, [pc, #412]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6c:	68da      	ldr	r2, [r3, #12]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	795b      	ldrb	r3, [r3, #5]
 8000a72:	4619      	mov	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	785b      	ldrb	r3, [r3, #1]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	4b5f      	ldr	r3, [pc, #380]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000a88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	60da      	str	r2, [r3, #12]


            /* Select output type and output speed in case of general purpose output or alternate function */
            if ((PinCFG->Mode == OUTPUT) || (PinCFG->Mode == ALTERNATIVE_FUNCTION))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	789b      	ldrb	r3, [r3, #2]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d004      	beq.n	8000aa2 <GPIO_u8PinInit+0xf6>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	789b      	ldrb	r3, [r3, #2]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	f040 80a8 	bne.w	8000bf2 <GPIO_u8PinInit+0x246>
            {
                /* select output type : Push pull , op(en drain  */
                 (GPIOPort[PinCFG->Port]->OTYPER) &= ~( OTYPER_MASK << (PinCFG->PinNum));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b56      	ldr	r3, [pc, #344]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aae:	6859      	ldr	r1, [r3, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	4093      	lsls	r3, r2
 8000aba:	43da      	mvns	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	4b50      	ldr	r3, [pc, #320]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000ac4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ac8:	400a      	ands	r2, r1
 8000aca:	605a      	str	r2, [r3, #4]
                 (GPIOPort[PinCFG->Port]->OTYPER) |=  ( (PinCFG->OutputType)  << (PinCFG->PinNum) );
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	785b      	ldrb	r3, [r3, #1]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	4619      	mov	r1, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	4b44      	ldr	r3, [pc, #272]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000af2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000af6:	430a      	orrs	r2, r1
 8000af8:	605a      	str	r2, [r3, #4]

                /* Select output speed : Low Meduim High Fast */
                  (GPIOPort[PinCFG->Port]->OSPEEDER) &= ~(OSPEEDER_MASK << ((PinCFG->PinNum) * OSPEEDER_PIN_ACCESS)); 
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b40      	ldr	r3, [pc, #256]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	785b      	ldrb	r3, [r3, #1]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2103      	movs	r1, #3
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	4b39      	ldr	r3, [pc, #228]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000b20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b24:	400a      	ands	r2, r1
 8000b26:	609a      	str	r2, [r3, #8]
                  (GPIOPort[PinCFG->Port]->OSPEEDER) |=  ((PinCFG->Speed) << ((PinCFG->PinNum) * OSPEEDER_PIN_ACCESS));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	78db      	ldrb	r3, [r3, #3]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	785b      	ldrb	r3, [r3, #1]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	4619      	mov	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000b50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	609a      	str	r2, [r3, #8]
            
                /* Select the pin alternative function */
                if ((PinCFG->Mode == ALTERNATIVE_FUNCTION))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d148      	bne.n	8000bf2 <GPIO_u8PinInit+0x246>
                {
                    uint8_t Local_u8RegNum = (PinCFG->PinNum) / AFR_PIN_SHIFTING ;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	785b      	ldrb	r3, [r3, #1]
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	73bb      	strb	r3, [r7, #14]
                    uint8_t Local_u8BitNum = (PinCFG->PinNum) % AFR_PIN_SHIFTING ;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	785b      	ldrb	r3, [r3, #1]
 8000b6c:	f003 0307 	and.w	r3, r3, #7
 8000b70:	737b      	strb	r3, [r7, #13]

                    (GPIOPort[PinCFG->Port]->AFR[Local_u8RegNum]) &= ~(AFR_MASK << (Local_u8BitNum * AFR_PIN_ACCESS) );
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7e:	7bba      	ldrb	r2, [r7, #14]
 8000b80:	3208      	adds	r2, #8
 8000b82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b86:	7b7b      	ldrb	r3, [r7, #13]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba0:	7bba      	ldrb	r2, [r7, #14]
 8000ba2:	4001      	ands	r1, r0
 8000ba4:	3208      	adds	r2, #8
 8000ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    (GPIOPort[PinCFG->Port]->AFR[Local_u8RegNum]) |=  (( PinCFG->AltFunc) << (Local_u8BitNum * AFR_PIN_ACCESS) );
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb6:	7bba      	ldrb	r2, [r7, #14]
 8000bb8:	3208      	adds	r2, #8
 8000bba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	799b      	ldrb	r3, [r3, #6]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	7b7b      	ldrb	r3, [r7, #13]
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <GPIO_u8PinInit+0x258>)
 8000bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bda:	7bba      	ldrb	r2, [r7, #14]
 8000bdc:	4301      	orrs	r1, r0
 8000bde:	3208      	adds	r2, #8
 8000be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if ((PinCFG->Mode == OUTPUT) || (PinCFG->Mode == ALTERNATIVE_FUNCTION))
 8000be4:	e005      	b.n	8000bf2 <GPIO_u8PinInit+0x246>


       }
       else
       {
            Local_u8ErrorState = NOK ;
 8000be6:	2301      	movs	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e003      	b.n	8000bf4 <GPIO_u8PinInit+0x248>
       
       
    }
    else
    {
        Local_u8ErrorState = NULL_PTR_ERR ;
 8000bec:	2302      	movs	r3, #2
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	e000      	b.n	8000bf4 <GPIO_u8PinInit+0x248>
            if ((PinCFG->Mode == OUTPUT) || (PinCFG->Mode == ALTERNATIVE_FUNCTION))
 8000bf2:	bf00      	nop
    




    return Local_u8ErrorState ;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000098 	.word	0x20000098

08000c08 <I2C_Init>:

I2C_Reg_t* I2C[3] = {I2C1 ,I2C2 ,I2C3 };


ErrorState_t I2C_Init(I2C_config_t* Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_ErrState = I2C_OK;
 8000c10:	2307      	movs	r3, #7
 8000c12:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 8167 	beq.w	8000eea <I2C_Init+0x2e2>
	{
		uint32_t CCR_VALUE;

		/*ENABLE PERIPHERAL*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (SET_BIT_MASK << CR1_PE);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4ba8      	ldr	r3, [pc, #672]	; (8000ec4 <I2C_Init+0x2bc>)
 8000c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4ba4      	ldr	r3, [pc, #656]	; (8000ec4 <I2C_Init+0x2bc>)
 8000c32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c36:	f022 0201 	bic.w	r2, r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]

		/*RESET I2C*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (1 << CR1_SWRST);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4ba0      	ldr	r3, [pc, #640]	; (8000ec4 <I2C_Init+0x2bc>)
 8000c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4b9c      	ldr	r3, [pc, #624]	; (8000ec4 <I2C_Init+0x2bc>)
 8000c52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c5a:	601a      	str	r2, [r3, #0]
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (1 << CR1_SWRST);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b98      	ldr	r3, [pc, #608]	; (8000ec4 <I2C_Init+0x2bc>)
 8000c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4b94      	ldr	r3, [pc, #592]	; (8000ec4 <I2C_Init+0x2bc>)
 8000c72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c7a:	601a      	str	r2, [r3, #0]

		/*I2C APB peripheral clk*/
		I2C[Init->I2C_NUMBER]->I2C_CR2 &=~ (0x3F << CR2_FREQ_0);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b90      	ldr	r3, [pc, #576]	; (8000ec4 <I2C_Init+0x2bc>)
 8000c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4b8c      	ldr	r3, [pc, #560]	; (8000ec4 <I2C_Init+0x2bc>)
 8000c92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c96:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000c9a:	605a      	str	r2, [r3, #4]
		I2C[Init->I2C_NUMBER]->I2C_CR2 |= (Init->I2C_FREQ << CR2_FREQ_0);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b88      	ldr	r3, [pc, #544]	; (8000ec4 <I2C_Init+0x2bc>)
 8000ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7a1b      	ldrb	r3, [r3, #8]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	4b83      	ldr	r3, [pc, #524]	; (8000ec4 <I2C_Init+0x2bc>)
 8000cb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	605a      	str	r2, [r3, #4]

		/*Rise Time*/
		I2C[Init->I2C_NUMBER]->I2C_TRISE &=~ 0x13;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b7f      	ldr	r3, [pc, #508]	; (8000ec4 <I2C_Init+0x2bc>)
 8000cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ccc:	6a1a      	ldr	r2, [r3, #32]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4b7b      	ldr	r3, [pc, #492]	; (8000ec4 <I2C_Init+0x2bc>)
 8000cd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cda:	f022 0213 	bic.w	r2, r2, #19
 8000cde:	621a      	str	r2, [r3, #32]
		I2C[Init->I2C_NUMBER]->I2C_TRISE |= 0x11;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b77      	ldr	r3, [pc, #476]	; (8000ec4 <I2C_Init+0x2bc>)
 8000ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cec:	6a1a      	ldr	r2, [r3, #32]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4b73      	ldr	r3, [pc, #460]	; (8000ec4 <I2C_Init+0x2bc>)
 8000cf6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cfa:	f042 0211 	orr.w	r2, r2, #17
 8000cfe:	621a      	str	r2, [r3, #32]

		/*calculate Rise Time*/
		/*STANDARD MODE*/
		I2C[Init->I2C_NUMBER]->I2C_CCR &=~ ( SET_BIT_MASK << 15 );
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b6f      	ldr	r3, [pc, #444]	; (8000ec4 <I2C_Init+0x2bc>)
 8000d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0c:	69da      	ldr	r2, [r3, #28]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4619      	mov	r1, r3
 8000d14:	4b6b      	ldr	r3, [pc, #428]	; (8000ec4 <I2C_Init+0x2bc>)
 8000d16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d1e:	61da      	str	r2, [r3, #28]
		I2C[Init->I2C_NUMBER]->I2C_CCR |= ( Init->I2C_SPEED_MODE << 15 );
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b67      	ldr	r3, [pc, #412]	; (8000ec4 <I2C_Init+0x2bc>)
 8000d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2c:	69da      	ldr	r2, [r3, #28]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	789b      	ldrb	r3, [r3, #2]
 8000d32:	03db      	lsls	r3, r3, #15
 8000d34:	4619      	mov	r1, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <I2C_Init+0x2bc>)
 8000d3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	61da      	str	r2, [r3, #28]

		/*Calculate CCR Register Value*/
		CCR_VALUE = ((Init->I2C_FREQ) * (1000));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7a1b      	ldrb	r3, [r3, #8]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d50:	fb02 f303 	mul.w	r3, r2, r3
 8000d54:	60bb      	str	r3, [r7, #8]
		CCR_VALUE /= (Init->I2C_SCL_FREQ);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	88db      	ldrh	r3, [r3, #6]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
		CCR_VALUE /= 2;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	085b      	lsrs	r3, r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
		/*Set Clock*/
		I2C[Init->I2C_NUMBER]->I2C_CCR |= CCR_VALUE ;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b54      	ldr	r3, [pc, #336]	; (8000ec4 <I2C_Init+0x2bc>)
 8000d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d76:	69d9      	ldr	r1, [r3, #28]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b51      	ldr	r3, [pc, #324]	; (8000ec4 <I2C_Init+0x2bc>)
 8000d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	61da      	str	r2, [r3, #28]

		/*clock Sretching*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (1 << CR1_NOSTRETCH);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b4c      	ldr	r3, [pc, #304]	; (8000ec4 <I2C_Init+0x2bc>)
 8000d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <I2C_Init+0x2bc>)
 8000da0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000da8:	601a      	str	r2, [r3, #0]
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (Init->I2C_STRETCHING << CR1_NOSTRETCH);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b44      	ldr	r3, [pc, #272]	; (8000ec4 <I2C_Init+0x2bc>)
 8000db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	78db      	ldrb	r3, [r3, #3]
 8000dbc:	01db      	lsls	r3, r3, #7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <I2C_Init+0x2bc>)
 8000dc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]

		/*packet error cheching PEC*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (1 << CR1_PEC);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <I2C_Init+0x2bc>)
 8000dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <I2C_Init+0x2bc>)
 8000de6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dee:	601a      	str	r2, [r3, #0]
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (Init->I2C_PEC << CR1_PEC);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <I2C_Init+0x2bc>)
 8000df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	791b      	ldrb	r3, [r3, #4]
 8000e02:	031b      	lsls	r3, r3, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <I2C_Init+0x2bc>)
 8000e0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]

		/**/
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (1 << CR1_ENGC);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <I2C_Init+0x2bc>)
 8000e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <I2C_Init+0x2bc>)
 8000e2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e34:	601a      	str	r2, [r3, #0]

		/*Address mode*/
		I2C[Init->I2C_NUMBER]->I2C_OAR1 &=~ (1 << OAR1_ADDMODE);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <I2C_Init+0x2bc>)
 8000e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <I2C_Init+0x2bc>)
 8000e4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e54:	609a      	str	r2, [r3, #8]
		I2C[Init->I2C_NUMBER]->I2C_OAR1 |= (Init->I2C_ADD_MODE << OAR1_ADDMODE);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <I2C_Init+0x2bc>)
 8000e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	795b      	ldrb	r3, [r3, #5]
 8000e68:	03db      	lsls	r3, r3, #15
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <I2C_Init+0x2bc>)
 8000e74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	609a      	str	r2, [r3, #8]

		/*Own address*/
		I2C[Init->I2C_NUMBER]->I2C_OAR1 &=~ (0x07F << OAR1_ADD1);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <I2C_Init+0x2bc>)
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <I2C_Init+0x2bc>)
 8000e92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e96:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 8000e9a:	609a      	str	r2, [r3, #8]
		I2C[Init->I2C_NUMBER]->I2C_OAR1 |= (Init->I2C_OWN_ADD << OAR1_ADD1);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <I2C_Init+0x2bc>)
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7a5b      	ldrb	r3, [r3, #9]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <I2C_Init+0x2bc>)
 8000eba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	e001      	b.n	8000ec8 <I2C_Init+0x2c0>
 8000ec4:	200000b8 	.word	0x200000b8

		/*ENABLE PERIPHERAL*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (SET_BIT_MASK << CR1_PE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <I2C_Init+0x2f4>)
 8000ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <I2C_Init+0x2f4>)
 8000ede:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ee2:	f042 0201 	orr.w	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	e001      	b.n	8000eee <I2C_Init+0x2e6>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8000eea:	230b      	movs	r3, #11
 8000eec:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]


}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	200000b8 	.word	0x200000b8

08000f00 <I2C_SendStartCondition>:

/**/
ErrorState_t I2C_SendStartCondition(I2C_config_t* Init)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

	ErrorState_t Local_ErrState = I2C_OK;
 8000f08:	2307      	movs	r3, #7
 8000f0a:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d016      	beq.n	8000f40 <I2C_SendStartCondition+0x40>
	{
		/*START CONDITION*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (SET_BIT_MASK << CR1_START);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <I2C_SendStartCondition+0x50>)
 8000f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <I2C_SendStartCondition+0x50>)
 8000f28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f30:	601a      	str	r2, [r3, #0]
		/*wait for SB=1 , then write address to DR*/
		Local_ErrState = WaitForR1Flag(Init, SR1_SB);
 8000f32:	2100      	movs	r1, #0
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 fa05 	bl	8001344 <WaitForR1Flag>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e001      	b.n	8000f44 <I2C_SendStartCondition+0x44>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8000f40:	230b      	movs	r3, #11
 8000f42:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200000b8 	.word	0x200000b8

08000f54 <I2C_SendStopCondition>:

/**/
ErrorState_t I2C_SendStopCondition(I2C_config_t* Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

	ErrorState_t Local_ErrState = I2C_OK;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d010      	beq.n	8000f88 <I2C_SendStopCondition+0x34>
	{
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (SET_BIT_MASK << CR1_STOP);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <I2C_SendStopCondition+0x48>)
 8000f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <I2C_SendStopCondition+0x48>)
 8000f7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e001      	b.n	8000f8c <I2C_SendStopCondition+0x38>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8000f88:	230b      	movs	r3, #11
 8000f8a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200000b8 	.word	0x200000b8

08000fa0 <I2C_MasterTransmitData>:

	WaitForR1Flag(Init, SR1_BTF);
}

ErrorState_t I2C_MasterTransmitData(I2C_config_t* Init ,uint8_t Address,uint8_t* u8Data ,uint8_t u8size)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	461a      	mov	r2, r3
 8000fac:	460b      	mov	r3, r1
 8000fae:	72fb      	strb	r3, [r7, #11]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	72bb      	strb	r3, [r7, #10]
	ErrorState_t Local_ErrState = I2C_OK;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	75fb      	strb	r3, [r7, #23]
	uint16_t Local_FlagVal=0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	82bb      	strh	r3, [r7, #20]
	uint8_t u8Counter=0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	75bb      	strb	r3, [r7, #22]

	if(Init != NULL)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d060      	beq.n	8001088 <I2C_MasterTransmitData+0xe8>
	{

		WaitForBusyFlag(Init);
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 f992 	bl	80012f0 <WaitForBusyFlag>

		//I2C_EnableAck(Init);

		/*START CONDITION*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (1 << CR1_START);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <I2C_MasterTransmitData+0xf8>)
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <I2C_MasterTransmitData+0xf8>)
 8000fe2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fea:	601a      	str	r2, [r3, #0]
		/*wait for SB=1 , then write address to DR*/
		WaitForR1Flag(Init, SR1_SB);
 8000fec:	2100      	movs	r1, #0
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 f9a8 	bl	8001344 <WaitForR1Flag>

		/*write address to DR*/
		I2C[Init->I2C_NUMBER]->I2C_DR = Address;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <I2C_MasterTransmitData+0xf8>)
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	7afa      	ldrb	r2, [r7, #11]
 8001002:	611a      	str	r2, [r3, #16]
		/*wait ADDR=1*/
		WaitForR1Flag(Init, SR1_ADDR);
 8001004:	2101      	movs	r1, #1
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 f99c 	bl	8001344 <WaitForR1Flag>
		/*Clear ADDR by reading SR1 and SR2*/
		Local_FlagVal = I2C[Init->I2C_NUMBER]->I2C_SR1;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <I2C_MasterTransmitData+0xf8>)
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	82bb      	strh	r3, [r7, #20]
		Local_FlagVal = I2C[Init->I2C_NUMBER]->I2C_SR2;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <I2C_MasterTransmitData+0xf8>)
 8001024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	82bb      	strh	r3, [r7, #20]

		for(u8Counter=0;u8Counter<u8size;u8Counter++)
 800102c:	2300      	movs	r3, #0
 800102e:	75bb      	strb	r3, [r7, #22]
 8001030:	e011      	b.n	8001056 <I2C_MasterTransmitData+0xb6>
		{
			WaitForR1Flag(Init, SR1_TxE);
 8001032:	2107      	movs	r1, #7
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f000 f985 	bl	8001344 <WaitForR1Flag>
			/*TXE=1, Write data*/
			I2C[Init->I2C_NUMBER]->I2C_DR = u8Data[u8Counter];
 800103a:	7dbb      	ldrb	r3, [r7, #22]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <I2C_MasterTransmitData+0xf8>)
 800104a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800104e:	611a      	str	r2, [r3, #16]
		for(u8Counter=0;u8Counter<u8size;u8Counter++)
 8001050:	7dbb      	ldrb	r3, [r7, #22]
 8001052:	3301      	adds	r3, #1
 8001054:	75bb      	strb	r3, [r7, #22]
 8001056:	7dba      	ldrb	r2, [r7, #22]
 8001058:	7abb      	ldrb	r3, [r7, #10]
 800105a:	429a      	cmp	r2, r3
 800105c:	d3e9      	bcc.n	8001032 <I2C_MasterTransmitData+0x92>

		}

		WaitForR1Flag(Init, SR1_BTF);
 800105e:	2102      	movs	r1, #2
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f96f 	bl	8001344 <WaitForR1Flag>
		//while( ((I2C[Init->I2C_NUMBER]->I2C_SR1 >> SR1_BTF) & GET_BIT_MASK) != I2C_READY_FLAG )
		/*Stop Condition*/
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (1 << CR1_STOP);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <I2C_MasterTransmitData+0xf8>)
 800106e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <I2C_MasterTransmitData+0xf8>)
 800107c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e001      	b.n	800108c <I2C_MasterTransmitData+0xec>

	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8001088:	230b      	movs	r3, #11
 800108a:	75fb      	strb	r3, [r7, #23]
	}


	return Local_ErrState;
 800108c:	7dfb      	ldrb	r3, [r7, #23]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000b8 	.word	0x200000b8

0800109c <I2C_MasterReceiveData>:

ErrorState_t I2C_MasterReceiveData(I2C_config_t* Init ,uint8_t* u8Data )
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	ErrorState_t Local_ErrState = I2C_OK;
 80010a6:	2307      	movs	r3, #7
 80010a8:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00e      	beq.n	80010ce <I2C_MasterReceiveData+0x32>
	{
		WaitForR1Flag(Init, SR1_RxNE);
 80010b0:	2106      	movs	r1, #6
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f946 	bl	8001344 <WaitForR1Flag>

		*u8Data = (uint8_t)I2C[Init->I2C_NUMBER]->I2C_DR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <I2C_MasterReceiveData+0x40>)
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	e001      	b.n	80010d2 <I2C_MasterReceiveData+0x36>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 80010ce:	230b      	movs	r3, #11
 80010d0:	73fb      	strb	r3, [r7, #15]
	}


	return Local_ErrState;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200000b8 	.word	0x200000b8

080010e0 <I2C_MasterRequestWrite>:


/*********************************************************************************************/
/*SendAddressPacketMTransmitter*/
ErrorState_t I2C_MasterRequestWrite(I2C_config_t* Init, uint8_t u8Address)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
	ErrorState_t Local_ErrState = I2C_OK;
 80010ec:	2307      	movs	r3, #7
 80010ee:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d03f      	beq.n	8001176 <I2C_MasterRequestWrite+0x96>
	{
		Local_ErrState = WaitForBusyFlag(Init);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f8fa 	bl	80012f0 <WaitForBusyFlag>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
		if(Local_ErrState ==  I2C_TIMEOUT)
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b0a      	cmp	r3, #10
 8001104:	d124      	bne.n	8001150 <I2C_MasterRequestWrite+0x70>
		{
			I2C[Init->I2C_NUMBER]->I2C_CR1 |= (1 << CR1_SWRST);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <I2C_MasterRequestWrite+0xa4>)
 800110e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <I2C_MasterRequestWrite+0xa4>)
 800111c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001124:	601a      	str	r2, [r3, #0]
			I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (1 << CR1_SWRST);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <I2C_MasterRequestWrite+0xa4>)
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <I2C_MasterRequestWrite+0xa4>)
 800113c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001144:	601a      	str	r2, [r3, #0]

			Local_ErrState = I2C_Init(Init);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fd5e 	bl	8000c08 <I2C_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
		}

		//I2C_EnableAck(Init);

		/*START CONDITION*/
		I2C_SendStartCondition(Init);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fed5 	bl	8000f00 <I2C_SendStartCondition>

		/*write address to DR*/
		I2C[Init->I2C_NUMBER]->I2C_DR = (uint32_t)u8Address;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <I2C_MasterRequestWrite+0xa4>)
 800115e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001162:	78fa      	ldrb	r2, [r7, #3]
 8001164:	611a      	str	r2, [r3, #16]

		/*wait ADDR=1*/
		WaitForR1Flag(Init, SR1_ADDR);
 8001166:	2101      	movs	r1, #1
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f8eb 	bl	8001344 <WaitForR1Flag>

		/*Clear ADDR by reading SR1 and SR2*/
		ClearFlag(Init);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f89e 	bl	80012b0 <ClearFlag>
 8001174:	e001      	b.n	800117a <I2C_MasterRequestWrite+0x9a>

	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8001176:	230b      	movs	r3, #11
 8001178:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000b8 	.word	0x200000b8

08001188 <I2C_SendDataPacket>:

void I2C_SendDataPacket(I2C_config_t* Init ,uint8_t u8Data )
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	WaitForR1Flag(Init, SR1_TxE);
 8001194:	2107      	movs	r1, #7
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f8d4 	bl	8001344 <WaitForR1Flag>
	/*TXE=1, Write data*/
	I2C[Init->I2C_NUMBER]->I2C_DR = u8Data;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <I2C_SendDataPacket+0x34>)
 80011a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a8:	78fa      	ldrb	r2, [r7, #3]
 80011aa:	611a      	str	r2, [r3, #16]

	WaitForR1Flag(Init, SR1_BTF);
 80011ac:	2102      	movs	r1, #2
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f8c8 	bl	8001344 <WaitForR1Flag>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200000b8 	.word	0x200000b8

080011c0 <I2C_MasterRequestRead>:


/*I2C_SendAddressPacketMReceiver*/
ErrorState_t I2C_MasterRequestRead(I2C_config_t* Init, uint8_t u8Address)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
	ErrorState_t Local_ErrState = I2C_OK;
 80011cc:	2307      	movs	r3, #7
 80011ce:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d017      	beq.n	8001206 <I2C_MasterRequestRead+0x46>
	{
		I2C_EnableAck(Init);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f81e 	bl	8001218 <I2C_EnableAck>

		/*START CONDITION*/
		I2C_SendStartCondition(Init);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff fe8f 	bl	8000f00 <I2C_SendStartCondition>

		/*write address to DR*/
		I2C[Init->I2C_NUMBER]->I2C_DR = u8Address;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <I2C_MasterRequestRead+0x54>)
 80011ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ee:	78fa      	ldrb	r2, [r7, #3]
 80011f0:	611a      	str	r2, [r3, #16]



		/*wait ADDR=1*/
		Local_ErrState = WaitForR1Flag(Init, SR1_ADDR);
 80011f2:	2101      	movs	r1, #1
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f8a5 	bl	8001344 <WaitForR1Flag>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]

		/*Clear ADDR by reading SR1 and SR2*/
		ClearFlag(Init);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f856 	bl	80012b0 <ClearFlag>
 8001204:	e001      	b.n	800120a <I2C_MasterRequestRead+0x4a>

	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8001206:	230b      	movs	r3, #11
 8001208:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200000b8 	.word	0x200000b8

08001218 <I2C_EnableAck>:
/********************************************************************************
 ****************** ### PRIVATE FUNCTION SECTION ### ***************************
 ********************************************************************************/

ErrorState_t I2C_EnableAck(I2C_config_t* Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

	ErrorState_t Local_ErrState = I2C_OK;
 8001220:	2307      	movs	r3, #7
 8001222:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d010      	beq.n	800124c <I2C_EnableAck+0x34>
	{
		I2C[Init->I2C_NUMBER]->I2C_CR1 |= (SET_BIT_MASK << 10);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <I2C_EnableAck+0x48>)
 8001232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <I2C_EnableAck+0x48>)
 8001240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e001      	b.n	8001250 <I2C_EnableAck+0x38>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 800124c:	230b      	movs	r3, #11
 800124e:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200000b8 	.word	0x200000b8

08001264 <I2C_DisableAck>:

ErrorState_t I2C_DisableAck(I2C_config_t* Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

	ErrorState_t Local_ErrState = I2C_OK;
 800126c:	2307      	movs	r3, #7
 800126e:	73fb      	strb	r3, [r7, #15]

	if(Init != NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d010      	beq.n	8001298 <I2C_DisableAck+0x34>
	{
		I2C[Init->I2C_NUMBER]->I2C_CR1 &=~ (SET_BIT_MASK << 10);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <I2C_DisableAck+0x48>)
 800127e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <I2C_DisableAck+0x48>)
 800128c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e001      	b.n	800129c <I2C_DisableAck+0x38>
	}
	else
	{
		Local_ErrState = I2C_NULL_POINTER;
 8001298:	230b      	movs	r3, #11
 800129a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrState;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200000b8 	.word	0x200000b8

080012b0 <ClearFlag>:

uint16_t ClearFlag(I2C_config_t* Init)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	uint16_t Local_FlagVal = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	81fb      	strh	r3, [r7, #14]

	Local_FlagVal = I2C[Init->I2C_NUMBER]->I2C_SR1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <ClearFlag+0x3c>)
 80012c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	81fb      	strh	r3, [r7, #14]
	Local_FlagVal = I2C[Init->I2C_NUMBER]->I2C_SR2;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <ClearFlag+0x3c>)
 80012d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	81fb      	strh	r3, [r7, #14]

	return Local_FlagVal;
 80012dc:	89fb      	ldrh	r3, [r7, #14]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200000b8 	.word	0x200000b8

080012f0 <WaitForBusyFlag>:

ErrorState_t WaitForBusyFlag(I2C_config_t* Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	ErrorState_t Local_ErrState = I2C_OK;
 80012f8:	2307      	movs	r3, #7
 80012fa:	72fb      	strb	r3, [r7, #11]

	uint32_t Loacl_u32TimeOut=0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
	while( ((I2C[Init->I2C_NUMBER]->I2C_SR2 >> SR2_BUSY) & GET_BIT_MASK) == 1 )
 8001300:	e008      	b.n	8001314 <WaitForBusyFlag+0x24>
	{
		Loacl_u32TimeOut++;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3301      	adds	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
		if(Loacl_u32TimeOut > IIC_MAX_TIMEOUT)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4a0c      	ldr	r2, [pc, #48]	; (800133c <WaitForBusyFlag+0x4c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d901      	bls.n	8001314 <WaitForBusyFlag+0x24>
		{
			return I2C_TIMEOUT;
 8001310:	230a      	movs	r3, #10
 8001312:	e00c      	b.n	800132e <WaitForBusyFlag+0x3e>
	while( ((I2C[Init->I2C_NUMBER]->I2C_SR2 >> SR2_BUSY) & GET_BIT_MASK) == 1 )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <WaitForBusyFlag+0x50>)
 800131c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	085b      	lsrs	r3, r3, #1
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b01      	cmp	r3, #1
 800132a:	d0ea      	beq.n	8001302 <WaitForBusyFlag+0x12>
		}
	}
	return Local_ErrState;
 800132c:	7afb      	ldrb	r3, [r7, #11]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	0007a120 	.word	0x0007a120
 8001340:	200000b8 	.word	0x200000b8

08001344 <WaitForR1Flag>:

ErrorState_t WaitForR1Flag(I2C_config_t* Init ,I2C_SR1_t copy_FlagID)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
	ErrorState_t Local_ErrState = I2C_OK;
 8001350:	2307      	movs	r3, #7
 8001352:	72fb      	strb	r3, [r7, #11]

	uint32_t Loacl_u32TimeOut=0;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
	while( ((I2C[Init->I2C_NUMBER]->I2C_SR1 >> copy_FlagID)&GET_BIT_MASK) != I2C_READY_FLAG )
 8001358:	e008      	b.n	800136c <WaitForR1Flag+0x28>
	{
		Loacl_u32TimeOut++;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
		if(Loacl_u32TimeOut > IIC_MAX_TIMEOUT)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <WaitForR1Flag+0x54>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d901      	bls.n	800136c <WaitForR1Flag+0x28>
		{
			return I2C_TIMEOUT;
 8001368:	230a      	movs	r3, #10
 800136a:	e00e      	b.n	800138a <WaitForR1Flag+0x46>
	while( ((I2C[Init->I2C_NUMBER]->I2C_SR1 >> copy_FlagID)&GET_BIT_MASK) != I2C_READY_FLAG )
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <WaitForR1Flag+0x58>)
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b01      	cmp	r3, #1
 8001386:	d1e8      	bne.n	800135a <WaitForR1Flag+0x16>
		}
	}
	return Local_ErrState;
 8001388:	7afb      	ldrb	r3, [r7, #11]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	0007a120 	.word	0x0007a120
 800139c:	200000b8 	.word	0x200000b8

080013a0 <LOGIN_IsValid>:




LOGIN_t LOGIN_IsValid(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0

    LOGIN_t LOCAL_Check = INVALID ;
 80013a6:	2300      	movs	r3, #0
 80013a8:	75fb      	strb	r3, [r7, #23]


    uint8_t LOCAL_u8Id[ID_LENGTH] = "1234" ;
 80013aa:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <LOGIN_IsValid+0x150>)
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b4:	6018      	str	r0, [r3, #0]
 80013b6:	3304      	adds	r3, #4
 80013b8:	7019      	strb	r1, [r3, #0]
    uint8_t LOCAL_u8Password[PASSWORD_LENGTH] = "4321" ;
 80013ba:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <LOGIN_IsValid+0x154>)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c2:	6018      	str	r0, [r3, #0]
 80013c4:	3304      	adds	r3, #4
 80013c6:	7019      	strb	r1, [r3, #0]
   


    uint8_t ID = 1 ;
 80013c8:	2301      	movs	r3, #1
 80013ca:	75bb      	strb	r3, [r7, #22]
    uint8_t Password = 1 ;
 80013cc:	2301      	movs	r3, #1
 80013ce:	757b      	strb	r3, [r7, #21]

   



    Print("\r\n Welcome to the alarm system .....\r\n");
 80013d0:	4849      	ldr	r0, [pc, #292]	; (80014f8 <LOGIN_IsValid+0x158>)
 80013d2:	f000 f90f 	bl	80015f4 <Print>
    

    for(LoginIterator=0 ; LoginIterator < TRIALS_NUM ; LoginIterator++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	753b      	strb	r3, [r7, #20]
 80013da:	e073      	b.n	80014c4 <LOGIN_IsValid+0x124>
    {

        ID = 1 ;
 80013dc:	2301      	movs	r3, #1
 80013de:	75bb      	strb	r3, [r7, #22]
    	Password = 1 ;
 80013e0:	2301      	movs	r3, #1
 80013e2:	757b      	strb	r3, [r7, #21]

        uint8_t i  ;



        Print("\r\n Enter ID : ");
 80013e4:	4845      	ldr	r0, [pc, #276]	; (80014fc <LOGIN_IsValid+0x15c>)
 80013e6:	f000 f905 	bl	80015f4 <Print>

        Input(LOCAL_u8Id ,4);
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2104      	movs	r1, #4
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f90b 	bl	800160c <Input>

        

        

        for ( i = 0; i < ID_LENGTH ; i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	74fb      	strb	r3, [r7, #19]
 80013fa:	e00e      	b.n	800141a <LOGIN_IsValid+0x7a>
        {
            if(LOGIN_u8CheckId[i]!=LOCAL_u8Id[i])
 80013fc:	7cfb      	ldrb	r3, [r7, #19]
 80013fe:	4a40      	ldr	r2, [pc, #256]	; (8001500 <LOGIN_IsValid+0x160>)
 8001400:	5cd2      	ldrb	r2, [r2, r3]
 8001402:	7cfb      	ldrb	r3, [r7, #19]
 8001404:	3318      	adds	r3, #24
 8001406:	443b      	add	r3, r7
 8001408:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <LOGIN_IsValid+0x74>
            {

                ID = 0 ;
 8001410:	2300      	movs	r3, #0
 8001412:	75bb      	strb	r3, [r7, #22]
        for ( i = 0; i < ID_LENGTH ; i++)
 8001414:	7cfb      	ldrb	r3, [r7, #19]
 8001416:	3301      	adds	r3, #1
 8001418:	74fb      	strb	r3, [r7, #19]
 800141a:	7cfb      	ldrb	r3, [r7, #19]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d9ed      	bls.n	80013fc <LOGIN_IsValid+0x5c>





        Print("\r\n Enter Password : ");
 8001420:	4838      	ldr	r0, [pc, #224]	; (8001504 <LOGIN_IsValid+0x164>)
 8001422:	f000 f8e7 	bl	80015f4 <Print>

        Input(LOCAL_u8Password ,4);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2104      	movs	r1, #4
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f8ee 	bl	800160c <Input>
        Print("\r\n");
 8001430:	4835      	ldr	r0, [pc, #212]	; (8001508 <LOGIN_IsValid+0x168>)
 8001432:	f000 f8df 	bl	80015f4 <Print>

       

        for ( i = 0; i < PASSWORD_LENGTH ; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	74fb      	strb	r3, [r7, #19]
 800143a:	e00e      	b.n	800145a <LOGIN_IsValid+0xba>
        {
            if(LOGIN_u8CheckPassword[i]!=LOCAL_u8Password[i])
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	4a33      	ldr	r2, [pc, #204]	; (800150c <LOGIN_IsValid+0x16c>)
 8001440:	5cd2      	ldrb	r2, [r2, r3]
 8001442:	7cfb      	ldrb	r3, [r7, #19]
 8001444:	3318      	adds	r3, #24
 8001446:	443b      	add	r3, r7
 8001448:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <LOGIN_IsValid+0xb4>
            {

                Password = 0 ;
 8001450:	2300      	movs	r3, #0
 8001452:	757b      	strb	r3, [r7, #21]
        for ( i = 0; i < PASSWORD_LENGTH ; i++)
 8001454:	7cfb      	ldrb	r3, [r7, #19]
 8001456:	3301      	adds	r3, #1
 8001458:	74fb      	strb	r3, [r7, #19]
 800145a:	7cfb      	ldrb	r3, [r7, #19]
 800145c:	2b04      	cmp	r3, #4
 800145e:	d9ed      	bls.n	800143c <LOGIN_IsValid+0x9c>
            }
        }



        if (ID == 1 && Password == 1 )
 8001460:	7dbb      	ldrb	r3, [r7, #22]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d105      	bne.n	8001472 <LOGIN_IsValid+0xd2>
 8001466:	7d7b      	ldrb	r3, [r7, #21]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d102      	bne.n	8001472 <LOGIN_IsValid+0xd2>
        {


          LOCAL_Check = VALID ;
 800146c:	2301      	movs	r3, #1
 800146e:	75fb      	strb	r3, [r7, #23]

         /* Print("\r\n Welcome Eslam ...");  */ 
         
             
            break;
 8001470:	e02b      	b.n	80014ca <LOGIN_IsValid+0x12a>

        }


         else if (ID==0 && Password ==1)
 8001472:	7dbb      	ldrb	r3, [r7, #22]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d106      	bne.n	8001486 <LOGIN_IsValid+0xe6>
 8001478:	7d7b      	ldrb	r3, [r7, #21]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d103      	bne.n	8001486 <LOGIN_IsValid+0xe6>
        {

           

            Print("\r\n Invalid Id ");
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <LOGIN_IsValid+0x170>)
 8001480:	f000 f8b8 	bl	80015f4 <Print>
 8001484:	e015      	b.n	80014b2 <LOGIN_IsValid+0x112>


        }


        else if (ID==1 && Password ==0)
 8001486:	7dbb      	ldrb	r3, [r7, #22]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d106      	bne.n	800149a <LOGIN_IsValid+0xfa>
 800148c:	7d7b      	ldrb	r3, [r7, #21]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <LOGIN_IsValid+0xfa>
        {

           

            Print("\r\n Invalid Password");
 8001492:	4820      	ldr	r0, [pc, #128]	; (8001514 <LOGIN_IsValid+0x174>)
 8001494:	f000 f8ae 	bl	80015f4 <Print>
 8001498:	e00b      	b.n	80014b2 <LOGIN_IsValid+0x112>




        }
        else if (ID==0 && Password ==0)
 800149a:	7dbb      	ldrb	r3, [r7, #22]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d108      	bne.n	80014b2 <LOGIN_IsValid+0x112>
 80014a0:	7d7b      	ldrb	r3, [r7, #21]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d105      	bne.n	80014b2 <LOGIN_IsValid+0x112>
        {

            

           Print("\r\n Invalid Id");
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <LOGIN_IsValid+0x178>)
 80014a8:	f000 f8a4 	bl	80015f4 <Print>

         
            Print("\r\n Invalid Password");
 80014ac:	4819      	ldr	r0, [pc, #100]	; (8001514 <LOGIN_IsValid+0x174>)
 80014ae:	f000 f8a1 	bl	80015f4 <Print>


        }


        if(LoginIterator < TRIALS_NUM -1 )
 80014b2:	7d3b      	ldrb	r3, [r7, #20]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d802      	bhi.n	80014be <LOGIN_IsValid+0x11e>

        {
        			

                  
            Print("\r\n\r\n Try Again....\r\n");
 80014b8:	4818      	ldr	r0, [pc, #96]	; (800151c <LOGIN_IsValid+0x17c>)
 80014ba:	f000 f89b 	bl	80015f4 <Print>
    for(LoginIterator=0 ; LoginIterator < TRIALS_NUM ; LoginIterator++)
 80014be:	7d3b      	ldrb	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	753b      	strb	r3, [r7, #20]
 80014c4:	7d3b      	ldrb	r3, [r7, #20]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d988      	bls.n	80013dc <LOGIN_IsValid+0x3c>

    }



    if (ID == 1 && Password == 1 )
 80014ca:	7dbb      	ldrb	r3, [r7, #22]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d105      	bne.n	80014dc <LOGIN_IsValid+0x13c>
 80014d0:	7d7b      	ldrb	r3, [r7, #21]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d102      	bne.n	80014dc <LOGIN_IsValid+0x13c>
    {
        LOCAL_Check = VALID ;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
 80014da:	e004      	b.n	80014e6 <LOGIN_IsValid+0x146>
    }

    else
    {
    	
        Print("\r\n\r\n Invalid Login ");
 80014dc:	4810      	ldr	r0, [pc, #64]	; (8001520 <LOGIN_IsValid+0x180>)
 80014de:	f000 f889 	bl	80015f4 <Print>



       LOCAL_Check = INVALID ;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]





    return  LOCAL_Check ;
 80014e6:	7dfb      	ldrb	r3, [r7, #23]

}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	0800229c 	.word	0x0800229c
 80014f4:	080022a4 	.word	0x080022a4
 80014f8:	080021e8 	.word	0x080021e8
 80014fc:	08002210 	.word	0x08002210
 8001500:	200000c4 	.word	0x200000c4
 8001504:	08002220 	.word	0x08002220
 8001508:	08002238 	.word	0x08002238
 800150c:	200000cc 	.word	0x200000cc
 8001510:	0800223c 	.word	0x0800223c
 8001514:	0800224c 	.word	0x0800224c
 8001518:	08002260 	.word	0x08002260
 800151c:	08002270 	.word	0x08002270
 8001520:	08002288 	.word	0x08002288

08001524 <RCC_AHB1EnableClk>:
void RCC_APB2ResetClk(RCC_APB2ENR_t Copy_enPeripheral)
{
	RCC->APB2RSTR |= (1 << Copy_enPeripheral);
}
void RCC_AHB1EnableClk(RCC_AHB1ENR_t Copy_enPeripheral)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
     RCC->AHB1ENR |= (1 << Copy_enPeripheral);
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <RCC_AHB1EnableClk+0x2c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	79fa      	ldrb	r2, [r7, #7]
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f202 	lsl.w	r2, r1, r2
 800153a:	4611      	mov	r1, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <RCC_AHB1EnableClk+0x2c>)
 800153e:	430b      	orrs	r3, r1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <RCC_APB1Enable>:
void RCC_AHB3DisableClk(RCC_AHB3ENR_t Copy_enPeripheral)
{
	RCC->AHB3ENR &= ~(1 << Copy_enPeripheral);
}
void RCC_APB1Enable(RCC_APB1ENR_t Copy_enPeripheral)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
	RCC->APB1ENR |= (1 << Copy_enPeripheral);
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <RCC_APB1Enable+0x2c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f202 	lsl.w	r2, r1, r2
 800156a:	4611      	mov	r1, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <RCC_APB1Enable+0x2c>)
 800156e:	430b      	orrs	r3, r1
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800

08001584 <SYSTIC_delay_ms_IT>:

}


void SYSTIC_delay_ms_IT(uint32_t time)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

    

    uint32_t LOCAL_u32Value = (time *1000 *  AHB_CLOCK / 8 );
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	60fb      	str	r3, [r7, #12]

    /* check if the value > the Register  available bits  */
    if(LOCAL_u32Value > 0xffffff)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a0:	d302      	bcc.n	80015a8 <SYSTIC_delay_ms_IT+0x24>
    {
    	LOCAL_u32Value = 0xffffff ;
 80015a2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80015a6:	60fb      	str	r3, [r7, #12]
    }

    /* Set the SYSTIC CLOCK to the Processor clock source / 8  */
    CLR_BIT(SYSTIC->STK_CTRL,STK_CTRL_CLKSOURCE);
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <SYSTIC_delay_ms_IT+0x6c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <SYSTIC_delay_ms_IT+0x6c>)
 80015ae:	f023 0304 	bic.w	r3, r3, #4
 80015b2:	6013      	str	r3, [r2, #0]

     /* set the value in the SysTick reload value register */
    SYSTIC->STK_LOAD |= LOCAL_u32Value ;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <SYSTIC_delay_ms_IT+0x6c>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	490d      	ldr	r1, [pc, #52]	; (80015f0 <SYSTIC_delay_ms_IT+0x6c>)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]


    /* Clear the VAL Register to load the start of the down counter from the LOAD register */
       SYSTIC->STK_VAL &= 0b11111111<<24;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <SYSTIC_delay_ms_IT+0x6c>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <SYSTIC_delay_ms_IT+0x6c>)
 80015c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80015ca:	6093      	str	r3, [r2, #8]

    /* Enable Exception For Busy Waiting */
	( SYSTIC->STK_CTRL ) |= ( 1 << 1 )  ;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <SYSTIC_delay_ms_IT+0x6c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <SYSTIC_delay_ms_IT+0x6c>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	6013      	str	r3, [r2, #0]



     /* Enable SYSTIC */
     SET_BIT(SYSTIC->STK_CTRL,STK_CTRL_ENABLE);
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SYSTIC_delay_ms_IT+0x6c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <SYSTIC_delay_ms_IT+0x6c>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6013      	str	r3, [r2, #0]

      
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <Print>:
uint8_t Alarm[5][7]={0};



void Print(uint8_t* Copy_pu8String)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    USART_voidTransmitStringSynch(USART_2 , Copy_pu8String);
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fc42 	bl	8001e88 <USART_voidTransmitStringSynch>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <Input>:

void Input(uint8_t* Copy_pu8String , uint8_t Copy_u8size)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
    USART_u8ReceiveBufferSynch(USART_2 , Copy_pu8String  , Copy_u8size );
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	461a      	mov	r2, r3
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	2001      	movs	r0, #1
 8001620:	f000 fc74 	bl	8001f0c <USART_u8ReceiveBufferSynch>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <SendChar>:


void SendChar(uint8_t Copy_u8DataChar)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
    USART_voidTransmitCharSynch(USART_2, Copy_u8DataChar);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4619      	mov	r1, r3
 800163a:	2001      	movs	r0, #1
 800163c:	f000 fbf8 	bl	8001e30 <USART_voidTransmitCharSynch>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <InputString>:



void InputString(uint8_t* Copy_pu8String , uint8_t Copy_u8MaxSize)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
	uint8_t LOCAL_u8LoopIterator = 0 ;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]

	USART_u8ReceiveCharSynch(USART_2 , &Copy_pu8String[LOCAL_u8LoopIterator]);
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4619      	mov	r1, r3
 8001660:	2001      	movs	r0, #1
 8001662:	f000 fbaf 	bl	8001dc4 <USART_u8ReceiveCharSynch>


	while(Copy_pu8String[LOCAL_u8LoopIterator] != '\r' )
 8001666:	e00e      	b.n	8001686 <InputString+0x3e>
	{

		
		LOCAL_u8LoopIterator++;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	3301      	adds	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]

		if (LOCAL_u8LoopIterator == Copy_u8MaxSize - 1 )
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	3b01      	subs	r3, #1
 8001674:	429a      	cmp	r2, r3
 8001676:	d00d      	beq.n	8001694 <InputString+0x4c>
		{
			break; 
		}

		USART_u8ReceiveCharSynch(USART_2 , &Copy_pu8String[LOCAL_u8LoopIterator]);
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	4619      	mov	r1, r3
 8001680:	2001      	movs	r0, #1
 8001682:	f000 fb9f 	bl	8001dc4 <USART_u8ReceiveCharSynch>
	while(Copy_pu8String[LOCAL_u8LoopIterator] != '\r' )
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b0d      	cmp	r3, #13
 8001690:	d1ea      	bne.n	8001668 <InputString+0x20>
 8001692:	e000      	b.n	8001696 <InputString+0x4e>
			break; 
 8001694:	bf00      	nop

		
	}
	
	Copy_pu8String[LOCAL_u8LoopIterator] = 0 ;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <Send>:




void Send(uint8_t* Copy_pu8Buffer ,  uint8_t Copy_u8size )
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
	 USART_voidTransmitBufferSynch( USART_2 ,  Copy_pu8Buffer  ,  Copy_u8size );
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	461a      	mov	r2, r3
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	2001      	movs	r0, #1
 80016bc:	f000 fc04 	bl	8001ec8 <USART_voidTransmitBufferSynch>

}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <SRV_SetTimeNDate>:




void SRV_SetTimeNDate(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0

	uint8_t Local_u8TimeNDate[17];

	Print ( (uint8_t*)"\r\nSet Time and Date for the first time: ");
 80016ce:	482f      	ldr	r0, [pc, #188]	; (800178c <SRV_SetTimeNDate+0xc4>)
 80016d0:	f7ff ff90 	bl	80015f4 <Print>
	Print ( (uint8_t*)"\n\033[1mHH:MM:SS DAY DD/MM/YY Format(0 for 12h, 1 for 24h)\r");
 80016d4:	482e      	ldr	r0, [pc, #184]	; (8001790 <SRV_SetTimeNDate+0xc8>)
 80016d6:	f7ff ff8d 	bl	80015f4 <Print>
	//Hours
	ReadCurrentDnTFromUser(Local_u8TimeNDate);
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f915 	bl	800190c <ReadCurrentDnTFromUser>

	RTC_DS1307_Config.SECONDS   = StringToHex(Local_u8TimeNDate[5], Local_u8TimeNDate[4]);
 80016e2:	7a7b      	ldrb	r3, [r7, #9]
 80016e4:	7a3a      	ldrb	r2, [r7, #8]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f88f 	bl	800180c <StringToHex>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b28      	ldr	r3, [pc, #160]	; (8001794 <SRV_SetTimeNDate+0xcc>)
 80016f4:	709a      	strb	r2, [r3, #2]
	RTC_DS1307_Config.MINUTES   = StringToHex(Local_u8TimeNDate[3], Local_u8TimeNDate[2]);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	79ba      	ldrb	r2, [r7, #6]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f885 	bl	800180c <StringToHex>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <SRV_SetTimeNDate+0xcc>)
 8001708:	70da      	strb	r2, [r3, #3]
	RTC_DS1307_Config.HOURS     = StringToHex(Local_u8TimeNDate[1], Local_u8TimeNDate[0]);
 800170a:	797b      	ldrb	r3, [r7, #5]
 800170c:	793a      	ldrb	r2, [r7, #4]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f87b 	bl	800180c <StringToHex>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <SRV_SetTimeNDate+0xcc>)
 800171c:	711a      	strb	r2, [r3, #4]
	RTC_DS1307_Config.WEEK_DAY  = DayOfWeekToNumber(&Local_u8TimeNDate[6]);
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	3306      	adds	r3, #6
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f88c 	bl	8001840 <DayOfWeekToNumber>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <SRV_SetTimeNDate+0xcc>)
 800172e:	721a      	strb	r2, [r3, #8]
	RTC_DS1307_Config.DAY		= StringToHex(Local_u8TimeNDate[10], Local_u8TimeNDate[9]);
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	7b7a      	ldrb	r2, [r7, #13]
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f868 	bl	800180c <StringToHex>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <SRV_SetTimeNDate+0xcc>)
 8001742:	715a      	strb	r2, [r3, #5]
	RTC_DS1307_Config.MONTH  	= StringToHex(Local_u8TimeNDate[12], Local_u8TimeNDate[11]);
 8001744:	7c3b      	ldrb	r3, [r7, #16]
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f85e 	bl	800180c <StringToHex>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <SRV_SetTimeNDate+0xcc>)
 8001756:	719a      	strb	r2, [r3, #6]
	RTC_DS1307_Config.YEAR  	= StringToHex(Local_u8TimeNDate[14], Local_u8TimeNDate[13]);
 8001758:	7cbb      	ldrb	r3, [r7, #18]
 800175a:	7c7a      	ldrb	r2, [r7, #17]
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f854 	bl	800180c <StringToHex>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <SRV_SetTimeNDate+0xcc>)
 800176a:	71da      	strb	r2, [r3, #7]

	RTC_DS1307_Config.TIME_FORMAT = Local_u8TimeNDate[15];
 800176c:	7cfa      	ldrb	r2, [r7, #19]
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <SRV_SetTimeNDate+0xcc>)
 8001770:	701a      	strb	r2, [r3, #0]

	RTC_DS1307_Config.AM_PM_NOTATION = Local_u8TimeNDate[16];
 8001772:	7d3a      	ldrb	r2, [r7, #20]
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <SRV_SetTimeNDate+0xcc>)
 8001776:	705a      	strb	r2, [r3, #1]

	RTC_SetTimeDate_(&I2C1_SysConfig,&RTC_DS1307_Config , 0);
 8001778:	2200      	movs	r2, #0
 800177a:	4906      	ldr	r1, [pc, #24]	; (8001794 <SRV_SetTimeNDate+0xcc>)
 800177c:	4806      	ldr	r0, [pc, #24]	; (8001798 <SRV_SetTimeNDate+0xd0>)
 800177e:	f7ff f847 	bl	8000810 <RTC_SetTimeDate_>

}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	080022ac 	.word	0x080022ac
 8001790:	080022d8 	.word	0x080022d8
 8001794:	20000114 	.word	0x20000114
 8001798:	20000108 	.word	0x20000108

0800179c <SRV_ShowTimeNDate>:

void SRV_ShowTimeNDate(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
	static uint8_t local_u8TimeNDate[RECEIVED_RTC_DATA_NUMBER]={0};
	static uint8_t Local_u8StringBridge[14]={0};
	uint8_t Local_u8Iterator;
	RTC_ReadTimeDate(&I2C1_SysConfig, &RTC_DS1307_Config, local_u8TimeNDate);
 80017a2:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <SRV_ShowTimeNDate+0x5c>)
 80017a4:	4915      	ldr	r1, [pc, #84]	; (80017fc <SRV_ShowTimeNDate+0x60>)
 80017a6:	4816      	ldr	r0, [pc, #88]	; (8001800 <SRV_ShowTimeNDate+0x64>)
 80017a8:	f7ff f8aa 	bl	8000900 <RTC_ReadTimeDate>

	local_u8TimeNDate[2] &=~ (0x60);
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <SRV_ShowTimeNDate+0x5c>)
 80017ae:	789b      	ldrb	r3, [r3, #2]
 80017b0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <SRV_ShowTimeNDate+0x5c>)
 80017b8:	709a      	strb	r2, [r3, #2]

	for(Local_u8Iterator=0;Local_u8Iterator <= RECEIVED_RTC_DATA_NUMBER;Local_u8Iterator++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	e00d      	b.n	80017dc <SRV_ShowTimeNDate+0x40>
	{
		//local_u8TimeNDate[Local_u8Iterator] = BCDToDecimal(local_u8TimeNDate[Local_u8Iterator]);
		HexToString(local_u8TimeNDate[Local_u8Iterator],&Local_u8StringBridge[Local_u8Iterator*2] );
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <SRV_ShowTimeNDate+0x5c>)
 80017c4:	5cd2      	ldrb	r2, [r2, r3]
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	490e      	ldr	r1, [pc, #56]	; (8001804 <SRV_ShowTimeNDate+0x68>)
 80017cc:	440b      	add	r3, r1
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f000 f97f 	bl	8001ad4 <HexToString>
	for(Local_u8Iterator=0;Local_u8Iterator <= RECEIVED_RTC_DATA_NUMBER;Local_u8Iterator++)
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	3301      	adds	r3, #1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b07      	cmp	r3, #7
 80017e0:	d9ee      	bls.n	80017c0 <SRV_ShowTimeNDate+0x24>
	}
	Print (  (uint8_t*)"\r\nTime and Date:");
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <SRV_ShowTimeNDate+0x6c>)
 80017e4:	f7ff ff06 	bl	80015f4 <Print>
	Send( Local_u8StringBridge ,14);
 80017e8:	210e      	movs	r1, #14
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <SRV_ShowTimeNDate+0x68>)
 80017ec:	f7ff ff5c 	bl	80016a8 <Send>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000014c 	.word	0x2000014c
 80017fc:	20000114 	.word	0x20000114
 8001800:	20000108 	.word	0x20000108
 8001804:	20000154 	.word	0x20000154
 8001808:	08002314 	.word	0x08002314

0800180c <StringToHex>:

	SYSTIC_delay_ms_IT(1000);
}

static uint8_t StringToHex(uint8_t Arg1,uint8_t Arg2)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	460a      	mov	r2, r1
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	4613      	mov	r3, r2
 800181a:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8Hex;
	Local_u8Hex = ((Arg1 - 48) | ((Arg2 - 48) << 4));
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	3b30      	subs	r3, #48	; 0x30
 8001820:	b2db      	uxtb	r3, r3
 8001822:	b25a      	sxtb	r2, r3
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	3b30      	subs	r3, #48	; 0x30
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	b25b      	sxtb	r3, r3
 800182c:	4313      	orrs	r3, r2
 800182e:	b25b      	sxtb	r3, r3
 8001830:	73fb      	strb	r3, [r7, #15]
	return Local_u8Hex;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DayOfWeekToNumber>:

static uint8_t DayOfWeekToNumber(uint8_t* copy_u8Day)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8DayNumber=0;
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]

	if((copy_u8Day[1] == 'O') || (copy_u8Day[1]=='o')){
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3301      	adds	r3, #1
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b4f      	cmp	r3, #79	; 0x4f
 8001854:	d004      	beq.n	8001860 <DayOfWeekToNumber+0x20>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b6f      	cmp	r3, #111	; 0x6f
 800185e:	d102      	bne.n	8001866 <DayOfWeekToNumber+0x26>
		//M'O'NDAY
		Local_u8DayNumber=MONDAY;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e04a      	b.n	80018fc <DayOfWeekToNumber+0xbc>
	}
	else if((copy_u8Day[1] == 'U') || (copy_u8Day[1]=='u')){
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3301      	adds	r3, #1
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b55      	cmp	r3, #85	; 0x55
 800186e:	d004      	beq.n	800187a <DayOfWeekToNumber+0x3a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b75      	cmp	r3, #117	; 0x75
 8001878:	d10d      	bne.n	8001896 <DayOfWeekToNumber+0x56>

		if((copy_u8Day[0] == 'T') || (copy_u8Day[0]=='t')){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b54      	cmp	r3, #84	; 0x54
 8001880:	d003      	beq.n	800188a <DayOfWeekToNumber+0x4a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b74      	cmp	r3, #116	; 0x74
 8001888:	d102      	bne.n	8001890 <DayOfWeekToNumber+0x50>
			//T'U'SDAY
			Local_u8DayNumber=TUESDAY;
 800188a:	2302      	movs	r3, #2
 800188c:	73fb      	strb	r3, [r7, #15]
		if((copy_u8Day[0] == 'T') || (copy_u8Day[0]=='t')){
 800188e:	e035      	b.n	80018fc <DayOfWeekToNumber+0xbc>
		}else
		{//S'U'NDAY
			Local_u8DayNumber=SUNDAY;
 8001890:	2307      	movs	r3, #7
 8001892:	73fb      	strb	r3, [r7, #15]
		if((copy_u8Day[0] == 'T') || (copy_u8Day[0]=='t')){
 8001894:	e032      	b.n	80018fc <DayOfWeekToNumber+0xbc>
		}
	}
	else if((copy_u8Day[1] == 'E') || (copy_u8Day[1]=='e')){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b45      	cmp	r3, #69	; 0x45
 800189e:	d004      	beq.n	80018aa <DayOfWeekToNumber+0x6a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3301      	adds	r3, #1
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b65      	cmp	r3, #101	; 0x65
 80018a8:	d102      	bne.n	80018b0 <DayOfWeekToNumber+0x70>
		//T'H'URSDAY
		Local_u8DayNumber=WEDNESDAY;
 80018aa:	2303      	movs	r3, #3
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e025      	b.n	80018fc <DayOfWeekToNumber+0xbc>
	}
	else if((copy_u8Day[1] == 'H') || (copy_u8Day[1]=='h')){
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3301      	adds	r3, #1
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b48      	cmp	r3, #72	; 0x48
 80018b8:	d004      	beq.n	80018c4 <DayOfWeekToNumber+0x84>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3301      	adds	r3, #1
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b68      	cmp	r3, #104	; 0x68
 80018c2:	d102      	bne.n	80018ca <DayOfWeekToNumber+0x8a>
		//T'H'URSDAY
		Local_u8DayNumber=THURSDAY;
 80018c4:	2304      	movs	r3, #4
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e018      	b.n	80018fc <DayOfWeekToNumber+0xbc>
	}
	else if((copy_u8Day[1] == 'R') || (copy_u8Day[1]=='r')){
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3301      	adds	r3, #1
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b52      	cmp	r3, #82	; 0x52
 80018d2:	d004      	beq.n	80018de <DayOfWeekToNumber+0x9e>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3301      	adds	r3, #1
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b72      	cmp	r3, #114	; 0x72
 80018dc:	d102      	bne.n	80018e4 <DayOfWeekToNumber+0xa4>
		//F'R'IDAY
		Local_u8DayNumber=FRIDAY;
 80018de:	2305      	movs	r3, #5
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	e00b      	b.n	80018fc <DayOfWeekToNumber+0xbc>
	}
	else if((copy_u8Day[1] == 'A') || (copy_u8Day[1]=='a')){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b41      	cmp	r3, #65	; 0x41
 80018ec:	d004      	beq.n	80018f8 <DayOfWeekToNumber+0xb8>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3301      	adds	r3, #1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b61      	cmp	r3, #97	; 0x61
 80018f6:	d101      	bne.n	80018fc <DayOfWeekToNumber+0xbc>
		//S'A'TURDAY
		Local_u8DayNumber=SATURDAY;
 80018f8:	2306      	movs	r3, #6
 80018fa:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8DayNumber;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <ReadCurrentDnTFromUser>:

static void ReadCurrentDnTFromUser(uint8_t* copy_u8array)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	Input( &copy_u8array[0] , 1);
 8001914:	2101      	movs	r1, #1
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fe78 	bl	800160c <Input>
	Input( &copy_u8array[1] , 1);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3301      	adds	r3, #1
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fe72 	bl	800160c <Input>
	SendChar(':');
 8001928:	203a      	movs	r0, #58	; 0x3a
 800192a:	f7ff fe7f 	bl	800162c <SendChar>
	//Min
	Input( &copy_u8array[2] ,1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3302      	adds	r3, #2
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fe69 	bl	800160c <Input>
	Input( &copy_u8array[3] , 1);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3303      	adds	r3, #3
 800193e:	2101      	movs	r1, #1
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fe63 	bl	800160c <Input>
	SendChar( ':');
 8001946:	203a      	movs	r0, #58	; 0x3a
 8001948:	f7ff fe70 	bl	800162c <SendChar>
	//sec
	Input( &copy_u8array[4] , 1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3304      	adds	r3, #4
 8001950:	2101      	movs	r1, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fe5a 	bl	800160c <Input>
	Input( &copy_u8array[5] , 1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3305      	adds	r3, #5
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fe54 	bl	800160c <Input>
	SendChar( ' ');
 8001964:	2020      	movs	r0, #32
 8001966:	f7ff fe61 	bl	800162c <SendChar>

	//Day
	Input( &copy_u8array[6] , 1);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3306      	adds	r3, #6
 800196e:	2101      	movs	r1, #1
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fe4b 	bl	800160c <Input>
	Input( &copy_u8array[7] , 1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3307      	adds	r3, #7
 800197a:	2101      	movs	r1, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe45 	bl	800160c <Input>
	Input( &copy_u8array[8] , 1);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3308      	adds	r3, #8
 8001986:	2101      	movs	r1, #1
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fe3f 	bl	800160c <Input>
	SendChar( ' ');
 800198e:	2020      	movs	r0, #32
 8001990:	f7ff fe4c 	bl	800162c <SendChar>

	//Date
	Input( &copy_u8array[9] , 1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3309      	adds	r3, #9
 8001998:	2101      	movs	r1, #1
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fe36 	bl	800160c <Input>
	Input( &copy_u8array[10] , 1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	330a      	adds	r3, #10
 80019a4:	2101      	movs	r1, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fe30 	bl	800160c <Input>
	SendChar( '/');
 80019ac:	202f      	movs	r0, #47	; 0x2f
 80019ae:	f7ff fe3d 	bl	800162c <SendChar>
	//Month
	Input( &copy_u8array[11] , 1);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	330b      	adds	r3, #11
 80019b6:	2101      	movs	r1, #1
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fe27 	bl	800160c <Input>
	Input( &copy_u8array[12] , 1);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	330c      	adds	r3, #12
 80019c2:	2101      	movs	r1, #1
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fe21 	bl	800160c <Input>
	SendChar( '/');
 80019ca:	202f      	movs	r0, #47	; 0x2f
 80019cc:	f7ff fe2e 	bl	800162c <SendChar>
	//Year
	Input( &copy_u8array[13] , 1);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	330d      	adds	r3, #13
 80019d4:	2101      	movs	r1, #1
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fe18 	bl	800160c <Input>
	Input( &copy_u8array[14] , 1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	330e      	adds	r3, #14
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fe12 	bl	800160c <Input>
	SendChar( ' ');
 80019e8:	2020      	movs	r0, #32
 80019ea:	f7ff fe1f 	bl	800162c <SendChar>
	Input( &copy_u8array[15] , 1);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	330f      	adds	r3, #15
 80019f2:	2101      	movs	r1, #1
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fe09 	bl	800160c <Input>

	if(copy_u8array[15] == '0')
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	330f      	adds	r3, #15
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b30      	cmp	r3, #48	; 0x30
 8001a02:	d108      	bne.n	8001a16 <ReadCurrentDnTFromUser+0x10a>
	{
		Print((uint8_t*)" AM or PM ?  ");
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <ReadCurrentDnTFromUser+0x114>)
 8001a06:	f7ff fdf5 	bl	80015f4 <Print>
		Input( &copy_u8array[16] , 1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3310      	adds	r3, #16
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fdfb 	bl	800160c <Input>
	}
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	08002340 	.word	0x08002340

08001a24 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
	uint8_t Local_u8Index1,Local_u8Index2;
	uint8_t Local_u8Validate=0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	737b      	strb	r3, [r7, #13]
	uint8_t Local_u8CurrentTD[7]={0};
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	2100      	movs	r1, #0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	801a      	strh	r2, [r3, #0]
 8001a3c:	460a      	mov	r2, r1
 8001a3e:	709a      	strb	r2, [r3, #2]

	RTC_ReadTimeDate(&I2C1_SysConfig, &RTC_DS1307_Config, Local_u8CurrentTD);
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	461a      	mov	r2, r3
 8001a44:	491f      	ldr	r1, [pc, #124]	; (8001ac4 <SysTick_Handler+0xa0>)
 8001a46:	4820      	ldr	r0, [pc, #128]	; (8001ac8 <SysTick_Handler+0xa4>)
 8001a48:	f7fe ff5a 	bl	8000900 <RTC_ReadTimeDate>

	Local_u8CurrentTD[2] &=~ (0x60);
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	71bb      	strb	r3, [r7, #6]
	for(Local_u8Index1=0 ; Local_u8Index1<5 ; Local_u8Index1++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	e027      	b.n	8001aac <SysTick_Handler+0x88>
	{
		for(Local_u8Index2=0 ; Local_u8Index2<7 ; Local_u8Index2++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73bb      	strb	r3, [r7, #14]
 8001a60:	e01e      	b.n	8001aa0 <SysTick_Handler+0x7c>
		{
			if(Alarm[Local_u8Index1][Local_u8Index2] != Local_u8CurrentTD[Local_u8Index2])
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	7bb9      	ldrb	r1, [r7, #14]
 8001a66:	4819      	ldr	r0, [pc, #100]	; (8001acc <SysTick_Handler+0xa8>)
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	4403      	add	r3, r0
 8001a70:	440b      	add	r3, r1
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	3310      	adds	r3, #16
 8001a78:	443b      	add	r3, r7
 8001a7a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d002      	beq.n	8001a88 <SysTick_Handler+0x64>
			{
				Local_u8Validate=0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	737b      	strb	r3, [r7, #13]
				break;
 8001a86:	e00e      	b.n	8001aa6 <SysTick_Handler+0x82>
			}
			else
			{
				Local_u8Validate++;
 8001a88:	7b7b      	ldrb	r3, [r7, #13]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	737b      	strb	r3, [r7, #13]
			}
			if(Local_u8Validate == 7)
 8001a8e:	7b7b      	ldrb	r3, [r7, #13]
 8001a90:	2b07      	cmp	r3, #7
 8001a92:	d102      	bne.n	8001a9a <SysTick_Handler+0x76>
			{
				Print( (uint8_t*)"\r\n ALARM NOTIFICATION   ");
 8001a94:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <SysTick_Handler+0xac>)
 8001a96:	f7ff fdad 	bl	80015f4 <Print>
		for(Local_u8Index2=0 ; Local_u8Index2<7 ; Local_u8Index2++)
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	73bb      	strb	r3, [r7, #14]
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d9dd      	bls.n	8001a62 <SysTick_Handler+0x3e>
	for(Local_u8Index1=0 ; Local_u8Index1<5 ; Local_u8Index1++)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d9d4      	bls.n	8001a5c <SysTick_Handler+0x38>
			}
		}
	}
	SYSTIC_delay_ms_IT(500);
 8001ab2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab6:	f7ff fd65 	bl	8001584 <SYSTIC_delay_ms_IT>

}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000114 	.word	0x20000114
 8001ac8:	20000108 	.word	0x20000108
 8001acc:	20000128 	.word	0x20000128
 8001ad0:	08002350 	.word	0x08002350

08001ad4 <HexToString>:

static void HexToString(uint8_t copy_u8HexVal, uint8_t* copy_u8buffer)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]

	copy_u8buffer[0] = (copy_u8HexVal >> 4) + '0';
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	3330      	adds	r3, #48	; 0x30
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	701a      	strb	r2, [r3, #0]
	copy_u8buffer[1] = (copy_u8HexVal & 0x0F) + '0';
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	3230      	adds	r2, #48	; 0x30
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]

}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <USART_u8Init>:


static   USART_REG* USART_Index[6]={USART1,USART2,USART3,UART4,UART5,USART6};

uint8_t  USART_u8Init( USART_Cnfg_t * Copy_psCnfg )
{
 8001b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b10:	b088      	sub	sp, #32
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   uint8_t Local_u8ErrorState = OK ;
 8001b16:	2300      	movs	r3, #0
 8001b18:	77fb      	strb	r3, [r7, #31]

   if (Copy_psCnfg != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8140 	beq.w	8001da2 <USART_u8Init+0x296>
   {

        /* Set Oversampling */
        CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_OVER8);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	4ba2      	ldr	r3, [pc, #648]	; (8001db4 <USART_u8Init+0x2a8>)
 8001b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	4b9f      	ldr	r3, [pc, #636]	; (8001db4 <USART_u8Init+0x2a8>)
 8001b38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b40:	60da      	str	r2, [r3, #12]
        USART_Index[Copy_psCnfg->USART_Num]->CR1 |= Copy_psCnfg->OverSampling << CR1_OVER8 ;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b9a      	ldr	r3, [pc, #616]	; (8001db4 <USART_u8Init+0x2a8>)
 8001b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	78db      	ldrb	r3, [r3, #3]
 8001b54:	03db      	lsls	r3, r3, #15
 8001b56:	4619      	mov	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	4b95      	ldr	r3, [pc, #596]	; (8001db4 <USART_u8Init+0x2a8>)
 8001b60:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	60da      	str	r2, [r3, #12]

        /* Select the wordlength  */
        CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_WORDLENGTH);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <USART_u8Init+0x2a8>)
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4b8d      	ldr	r3, [pc, #564]	; (8001db4 <USART_u8Init+0x2a8>)
 8001b7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b86:	60da      	str	r2, [r3, #12]
        USART_Index[Copy_psCnfg->USART_Num]->CR1 |= Copy_psCnfg->Word << CR1_WORDLENGTH ;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <USART_u8Init+0x2a8>)
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	789b      	ldrb	r3, [r3, #2]
 8001b9a:	031b      	lsls	r3, r3, #12
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4b83      	ldr	r3, [pc, #524]	; (8001db4 <USART_u8Init+0x2a8>)
 8001ba6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	60da      	str	r2, [r3, #12]


        /* Set parity status  */
        CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_PCE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b7f      	ldr	r3, [pc, #508]	; (8001db4 <USART_u8Init+0x2a8>)
 8001bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4b7c      	ldr	r3, [pc, #496]	; (8001db4 <USART_u8Init+0x2a8>)
 8001bc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bcc:	60da      	str	r2, [r3, #12]
        USART_Index[Copy_psCnfg->USART_Num]->CR1 |= Copy_psCnfg->Parity << CR1_PCE ;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b77      	ldr	r3, [pc, #476]	; (8001db4 <USART_u8Init+0x2a8>)
 8001bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	785b      	ldrb	r3, [r3, #1]
 8001be0:	029b      	lsls	r3, r3, #10
 8001be2:	4619      	mov	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	4b72      	ldr	r3, [pc, #456]	; (8001db4 <USART_u8Init+0x2a8>)
 8001bec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]



        /* Set RX TX state */

        switch (Copy_psCnfg->Mode)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	791b      	ldrb	r3, [r3, #4]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d048      	beq.n	8001c8e <USART_u8Init+0x182>
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	dc67      	bgt.n	8001cd0 <USART_u8Init+0x1c4>
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <USART_u8Init+0xfe>
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d021      	beq.n	8001c4c <USART_u8Init+0x140>
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
            break;
        
        default:
            break;
 8001c08:	e062      	b.n	8001cd0 <USART_u8Init+0x1c4>
            CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <USART_u8Init+0x2a8>)
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4b65      	ldr	r3, [pc, #404]	; (8001db4 <USART_u8Init+0x2a8>)
 8001c20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c24:	f022 0208 	bic.w	r2, r2, #8
 8001c28:	60da      	str	r2, [r3, #12]
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b60      	ldr	r3, [pc, #384]	; (8001db4 <USART_u8Init+0x2a8>)
 8001c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4b5d      	ldr	r3, [pc, #372]	; (8001db4 <USART_u8Init+0x2a8>)
 8001c40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c44:	f042 0204 	orr.w	r2, r2, #4
 8001c48:	60da      	str	r2, [r3, #12]
            break;
 8001c4a:	e042      	b.n	8001cd2 <USART_u8Init+0x1c6>
            CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b58      	ldr	r3, [pc, #352]	; (8001db4 <USART_u8Init+0x2a8>)
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4b54      	ldr	r3, [pc, #336]	; (8001db4 <USART_u8Init+0x2a8>)
 8001c62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c66:	f022 0204 	bic.w	r2, r2, #4
 8001c6a:	60da      	str	r2, [r3, #12]
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <USART_u8Init+0x2a8>)
 8001c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <USART_u8Init+0x2a8>)
 8001c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c86:	f042 0208 	orr.w	r2, r2, #8
 8001c8a:	60da      	str	r2, [r3, #12]
            break;
 8001c8c:	e021      	b.n	8001cd2 <USART_u8Init+0x1c6>
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <USART_u8Init+0x2a8>)
 8001c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <USART_u8Init+0x2a8>)
 8001ca4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ca8:	f042 0204 	orr.w	r2, r2, #4
 8001cac:	60da      	str	r2, [r3, #12]
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <USART_u8Init+0x2a8>)
 8001cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <USART_u8Init+0x2a8>)
 8001cc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cc8:	f042 0208 	orr.w	r2, r2, #8
 8001ccc:	60da      	str	r2, [r3, #12]
            break;
 8001cce:	e000      	b.n	8001cd2 <USART_u8Init+0x1c6>
            break;
 8001cd0:	bf00      	nop


        /* Baudrate configurations */

		uint8_t Local_u8OverSampling ;
		if (Copy_psCnfg->OverSampling == OVER8 )
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	78db      	ldrb	r3, [r3, #3]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <USART_u8Init+0x1d4>
		{
			Local_u8OverSampling=8;
 8001cda:	2308      	movs	r3, #8
 8001cdc:	77bb      	strb	r3, [r7, #30]
 8001cde:	e001      	b.n	8001ce4 <USART_u8Init+0x1d8>
		}
		else
		{
			Local_u8OverSampling=16;
 8001ce0:	2310      	movs	r3, #16
 8001ce2:	77bb      	strb	r3, [r7, #30]
		}
		uint64_t Local_u64Mantissa = ( F_COLCK ) / ( (Local_u8OverSampling) * USART1_BAUD_RATE ) ;
 8001ce4:	7fbb      	ldrb	r3, [r7, #30]
 8001ce6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4a32      	ldr	r2, [pc, #200]	; (8001db8 <USART_u8Init+0x2ac>)
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	469a      	mov	sl, r3
 8001cf8:	4693      	mov	fp, r2
 8001cfa:	e9c7 ab04 	strd	sl, fp, [r7, #16]
		uint64_t Local_u64Fraction = ( ( ( F_COLCK * 100 ) / ( (Local_u8OverSampling) * USART1_BAUD_RATE )  ) % 100 ) * (Local_u8OverSampling) ;
 8001cfe:	7fbb      	ldrb	r3, [r7, #30]
 8001d00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <USART_u8Init+0x2b0>)
 8001d0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <USART_u8Init+0x2b4>)
 8001d10:	fba3 1302 	umull	r1, r3, r3, r2
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	2164      	movs	r1, #100	; 0x64
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	7fba      	ldrb	r2, [r7, #30]
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	2200      	movs	r2, #0
 8001d26:	4698      	mov	r8, r3
 8001d28:	4691      	mov	r9, r2
 8001d2a:	e9c7 8902 	strd	r8, r9, [r7, #8]

		if( Local_u64Fraction > USART_MAX_FRAC )
 8001d2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d32:	f240 51dd 	movw	r1, #1501	; 0x5dd
 8001d36:	428a      	cmp	r2, r1
 8001d38:	f173 0300 	sbcs.w	r3, r3, #0
 8001d3c:	d30c      	bcc.n	8001d58 <USART_u8Init+0x24c>
		{
			Local_u64Mantissa += USART_MANTISSA ;
 8001d3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d42:	1c54      	adds	r4, r2, #1
 8001d44:	f143 0500 	adc.w	r5, r3, #0
 8001d48:	e9c7 4504 	strd	r4, r5, [r7, #16]
			Local_u64Fraction  = USART_FRACTION ;
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		USART_Index[Copy_psCnfg->USART_Num] -> BRR = ( Local_u64Mantissa << USART_BAUD_RATE_ACCESS  ) | ( Local_u64Fraction / 100 ) ;
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	011c      	lsls	r4, r3, #4
 8001d5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d60:	f04f 0264 	mov.w	r2, #100	; 0x64
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	f7fe fa4c 	bl	8000204 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <USART_u8Init+0x2a8>)
 8001d78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d7c:	4322      	orrs	r2, r4
 8001d7e:	609a      	str	r2, [r3, #8]
		


        
        /* Enable USART */
		SET_BIT ( USART_Index[Copy_psCnfg->USART_Num] -> CR1 , USART_CR1_UE );
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <USART_u8Init+0x2a8>)
 8001d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4619      	mov	r1, r3
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <USART_u8Init+0x2a8>)
 8001d96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	e001      	b.n	8001da6 <USART_u8Init+0x29a>


   }
   else
   {
        Local_u8ErrorState = NULL_PTR_ERR ;
 8001da2:	2302      	movs	r3, #2
 8001da4:	77fb      	strb	r3, [r7, #31]
   }
   
   

   return Local_u8ErrorState ;
 8001da6:	7ffb      	ldrb	r3, [r7, #31]
    
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db2:	bf00      	nop
 8001db4:	200000d4 	.word	0x200000d4
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	5f5e1000 	.word	0x5f5e1000
 8001dc0:	51eb851f 	.word	0x51eb851f

08001dc4 <USART_u8ReceiveCharSynch>:



uint8_t  USART_u8ReceiveCharSynch     ( USART_NUM_t Copy_USARTindex , uint8_t * Copy_pu8DataChar  )
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = OK ;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataChar != NULL )
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d01e      	beq.n	8001e18 <USART_u8ReceiveCharSynch+0x54>
	{
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <USART_u8ReceiveCharSynch+0x68>)
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4911      	ldr	r1, [pc, #68]	; (8001e2c <USART_u8ReceiveCharSynch+0x68>)
 8001de8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dec:	f022 0220 	bic.w	r2, r2, #32
 8001df0:	601a      	str	r2, [r3, #0]
	    while ( USART_SR_RXNE_DOWN_MASK == GET_BIT ( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE ) )  ;
 8001df2:	bf00      	nop
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <USART_u8ReceiveCharSynch+0x68>)
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f6      	beq.n	8001df4 <USART_u8ReceiveCharSynch+0x30>
	    *Copy_pu8DataChar = ( USART_Index[Copy_USARTindex] -> DR )  ;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <USART_u8ReceiveCharSynch+0x68>)
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	701a      	strb	r2, [r3, #0]
 8001e16:	e001      	b.n	8001e1c <USART_u8ReceiveCharSynch+0x58>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR ;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	200000d4 	.word	0x200000d4

08001e30 <USART_voidTransmitCharSynch>:




void  USART_voidTransmitCharSynch     ( USART_NUM_t Copy_USARTindex , uint8_t  Copy_u8DataChar  )
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	460a      	mov	r2, r1
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71bb      	strb	r3, [r7, #6]
	
		USART_Index[Copy_USARTindex] -> DR = Copy_u8DataChar ;
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <USART_voidTransmitCharSynch+0x54>)
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	79ba      	ldrb	r2, [r7, #6]
 8001e4a:	605a      	str	r2, [r3, #4]
		while ( USART_SR_TC_MASK == GET_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC ) )  ;
 8001e4c:	bf00      	nop
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <USART_voidTransmitCharSynch+0x54>)
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f6      	beq.n	8001e4e <USART_voidTransmitCharSynch+0x1e>
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC );
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <USART_voidTransmitCharSynch+0x54>)
 8001e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4905      	ldr	r1, [pc, #20]	; (8001e84 <USART_voidTransmitCharSynch+0x54>)
 8001e6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e76:	601a      	str	r2, [r3, #0]
	
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	200000d4 	.word	0x200000d4

08001e88 <USART_voidTransmitStringSynch>:




void     USART_voidTransmitStringSynch     ( USART_NUM_t Copy_USARTindex , uint8_t * Copy_pu8Data  )
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
	uint8_t LOCAL_u8LoopIterator = 0 ;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8Data[LOCAL_u8LoopIterator] != 0 )
 8001e98:	e00b      	b.n	8001eb2 <USART_voidTransmitStringSynch+0x2a>
	{
		USART_voidTransmitCharSynch(Copy_USARTindex , Copy_pu8Data[LOCAL_u8LoopIterator] );
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ffc2 	bl	8001e30 <USART_voidTransmitCharSynch>
		LOCAL_u8LoopIterator++ ;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8Data[LOCAL_u8LoopIterator] != 0 )
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ed      	bne.n	8001e9a <USART_voidTransmitStringSynch+0x12>

	}
}
 8001ebe:	bf00      	nop
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <USART_voidTransmitBufferSynch>:



void USART_voidTransmitBufferSynch( USART_NUM_t Copy_USARTindex , uint8_t * Copy_pu8Buffer  , uint8_t Copy_u8Size )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71bb      	strb	r3, [r7, #6]
	uint8_t LOCAL_u8LoopIterator = 0 ;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
	for (LOCAL_u8LoopIterator = 0; LOCAL_u8LoopIterator < Copy_u8Size ; LOCAL_u8LoopIterator++ )
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e00b      	b.n	8001efa <USART_voidTransmitBufferSynch+0x32>
	{
		USART_voidTransmitCharSynch(Copy_USARTindex , Copy_pu8Buffer[LOCAL_u8LoopIterator] );
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff9e 	bl	8001e30 <USART_voidTransmitCharSynch>
	for (LOCAL_u8LoopIterator = 0; LOCAL_u8LoopIterator < Copy_u8Size ; LOCAL_u8LoopIterator++ )
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d3ef      	bcc.n	8001ee2 <USART_voidTransmitBufferSynch+0x1a>
	}
	
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <USART_u8ReceiveBufferSynch>:


void  USART_u8ReceiveBufferSynch     ( USART_NUM_t Copy_USARTindex , uint8_t * Copy_pu8Data , uint8_t Copy_u8Size  )
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	71bb      	strb	r3, [r7, #6]
	uint8_t LOCAL_u8LoopIterator ;

	for(LOCAL_u8LoopIterator = 0 ; LOCAL_u8LoopIterator < Copy_u8Size  ; LOCAL_u8LoopIterator++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e00a      	b.n	8001f38 <USART_u8ReceiveBufferSynch+0x2c>
	{
		USART_u8ReceiveCharSynch(Copy_USARTindex , &Copy_pu8Data[LOCAL_u8LoopIterator]);
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	441a      	add	r2, r3
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff49 	bl	8001dc4 <USART_u8ReceiveCharSynch>
	for(LOCAL_u8LoopIterator = 0 ; LOCAL_u8LoopIterator < Copy_u8Size  ; LOCAL_u8LoopIterator++)
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	3301      	adds	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d3f0      	bcc.n	8001f22 <USART_u8ReceiveBufferSynch+0x16>
	}

}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <main>:
#include "APP.h"
#include "Service.h"


int main(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0



	APP_voidInit();
 8001f4e:	f7fe fad7 	bl	8000500 <APP_voidInit>

	

	APP_voidLogin();
 8001f52:	f7fe fb6f 	bl	8000634 <APP_voidLogin>

	APP_FirstSetUp();
 8001f56:	f7fe fc55 	bl	8000804 <APP_FirstSetUp>


	
	while (1)
	{
		APP_voidMenu();
 8001f5a:	f7fe fb89 	bl	8000670 <APP_voidMenu>
 8001f5e:	e7fc      	b.n	8001f5a <main+0x10>

08001f60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	; (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	; (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f8e:	f000 f811 	bl	8001fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f92:	f7ff ffda 	bl	8001f4a <main>

08001f96 <LoopForever>:

LoopForever:
  b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   r0, =_estack
 8001f98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001fa4:	0800237c 	.word	0x0800237c
  ldr r2, =_sbss
 8001fa8:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001fac:	20000164 	.word	0x20000164

08001fb0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC_IRQHandler>
	...

08001fb4 <__libc_init_array>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	4d0d      	ldr	r5, [pc, #52]	; (8001fec <__libc_init_array+0x38>)
 8001fb8:	4c0d      	ldr	r4, [pc, #52]	; (8001ff0 <__libc_init_array+0x3c>)
 8001fba:	1b64      	subs	r4, r4, r5
 8001fbc:	10a4      	asrs	r4, r4, #2
 8001fbe:	2600      	movs	r6, #0
 8001fc0:	42a6      	cmp	r6, r4
 8001fc2:	d109      	bne.n	8001fd8 <__libc_init_array+0x24>
 8001fc4:	4d0b      	ldr	r5, [pc, #44]	; (8001ff4 <__libc_init_array+0x40>)
 8001fc6:	4c0c      	ldr	r4, [pc, #48]	; (8001ff8 <__libc_init_array+0x44>)
 8001fc8:	f000 f818 	bl	8001ffc <_init>
 8001fcc:	1b64      	subs	r4, r4, r5
 8001fce:	10a4      	asrs	r4, r4, #2
 8001fd0:	2600      	movs	r6, #0
 8001fd2:	42a6      	cmp	r6, r4
 8001fd4:	d105      	bne.n	8001fe2 <__libc_init_array+0x2e>
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
 8001fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fdc:	4798      	blx	r3
 8001fde:	3601      	adds	r6, #1
 8001fe0:	e7ee      	b.n	8001fc0 <__libc_init_array+0xc>
 8001fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe6:	4798      	blx	r3
 8001fe8:	3601      	adds	r6, #1
 8001fea:	e7f2      	b.n	8001fd2 <__libc_init_array+0x1e>
 8001fec:	08002374 	.word	0x08002374
 8001ff0:	08002374 	.word	0x08002374
 8001ff4:	08002374 	.word	0x08002374
 8001ff8:	08002378 	.word	0x08002378

08001ffc <_init>:
 8001ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffe:	bf00      	nop
 8002000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002002:	bc08      	pop	{r3}
 8002004:	469e      	mov	lr, r3
 8002006:	4770      	bx	lr

08002008 <_fini>:
 8002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200a:	bf00      	nop
 800200c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800200e:	bc08      	pop	{r3}
 8002010:	469e      	mov	lr, r3
 8002012:	4770      	bx	lr
