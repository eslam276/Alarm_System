
Alarm_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004a8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800066c  0800066c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800066c  0800066c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800066c  0800066c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800066c  0800066c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800066c  0800066c  0001066c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000670  08000670  00010670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000694  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000694  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000142f  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000041e  00000000  00000000  000214c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  000218e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d0  00000000  00000000  00021a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001346  00000000  00000000  00021ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001788  00000000  00000000  00022e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005069  00000000  00000000  000245ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000003a4  00000000  00000000  00029618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000299bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000654 	.word	0x08000654

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08000654 	.word	0x08000654

08000204 <GPIO_u8PinInit>:
				OutputType,
				PullType,
				AltFunc
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* PinConfig)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState=OK;
 800020c:	2300      	movs	r3, #0
 800020e:	73fb      	strb	r3, [r7, #15]
	/*Check weather the pointer points to Null or Not*/
	if(PinConfig != NULL)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	f000 810a 	beq.w	800042c <GPIO_u8PinInit+0x228>
	{
		/* * * * * Select GPIO Mode: Input, Output, Analog, AltFunc * * * * */
		(GPIOx[PinConfig->Port]->GPIO_MODER) &=~(MODER_MASK<<(MODER_PIN_ACCESS* (PinConfig->PinNum)));
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	461a      	mov	r2, r3
 800021e:	4b88      	ldr	r3, [pc, #544]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	785b      	ldrb	r3, [r3, #1]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	4619      	mov	r1, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	4618      	mov	r0, r3
 800023c:	4b80      	ldr	r3, [pc, #512]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800023e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000242:	400a      	ands	r2, r1
 8000244:	601a      	str	r2, [r3, #0]
		(GPIOx[PinConfig->Port]->GPIO_MODER) |=((PinConfig->Mode)<<(MODER_PIN_ACCESS* (PinConfig->PinNum)));
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	461a      	mov	r2, r3
 800024c:	4b7c      	ldr	r3, [pc, #496]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800024e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	789b      	ldrb	r3, [r3, #2]
 8000258:	4619      	mov	r1, r3
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	785b      	ldrb	r3, [r3, #1]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	fa01 f303 	lsl.w	r3, r1, r3
 8000264:	4619      	mov	r1, r3
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	4618      	mov	r0, r3
 800026c:	4b74      	ldr	r3, [pc, #464]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800026e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000272:	430a      	orrs	r2, r1
 8000274:	601a      	str	r2, [r3, #0]

		/* * * * * Select GPIO Pull State: PullUp ,PullDown ,NoPull * * * * */
		(GPIOx[PinConfig->Port]->GPIO_PUPDR) &=~(PUPDR_MASK<<(PUPDR_PIN_ACCESS* (PinConfig->PinNum)));
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	461a      	mov	r2, r3
 800027c:	4b70      	ldr	r3, [pc, #448]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800027e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000282:	68da      	ldr	r2, [r3, #12]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	785b      	ldrb	r3, [r3, #1]
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	2103      	movs	r1, #3
 800028c:	fa01 f303 	lsl.w	r3, r1, r3
 8000290:	43db      	mvns	r3, r3
 8000292:	4619      	mov	r1, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4618      	mov	r0, r3
 800029a:	4b69      	ldr	r3, [pc, #420]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800029c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002a0:	400a      	ands	r2, r1
 80002a2:	60da      	str	r2, [r3, #12]
		(GPIOx[PinConfig->Port]->GPIO_PUPDR) |=((PinConfig->PullType)<<(PUPDR_PIN_ACCESS* (PinConfig->PinNum)));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b65      	ldr	r3, [pc, #404]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80002ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002b0:	68da      	ldr	r2, [r3, #12]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	795b      	ldrb	r3, [r3, #5]
 80002b6:	4619      	mov	r1, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	785b      	ldrb	r3, [r3, #1]
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	4619      	mov	r1, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	4b5d      	ldr	r3, [pc, #372]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80002cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002d0:	430a      	orrs	r2, r1
 80002d2:	60da      	str	r2, [r3, #12]
		 * IF OUTPUT MODE: OutputType AND OutputSpeed (Setting)
		 *
		 * IF ALTERNATE FUNCTION: OutputType AND OutputSpeed AND ALTERNATIVE FUNCTION (Setting)
		 *
		 * */
		if( ( (PinConfig->Mode) ==OUTPUT) || ( (PinConfig->Mode) ==ALTERNATIVE_FUNCTION) )
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	789b      	ldrb	r3, [r3, #2]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d004      	beq.n	80002e6 <GPIO_u8PinInit+0xe2>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	789b      	ldrb	r3, [r3, #2]
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	f040 80a5 	bne.w	8000430 <GPIO_u8PinInit+0x22c>
		{
			/* * * * * Select the OutputType: PushPull ,Open Drain * * * * */
			(GPIOx[PinConfig->Port]->GPIO_OTYPE) &=~(OTYPER_MASK<<(PinConfig->PinNum));
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	461a      	mov	r2, r3
 80002ec:	4b54      	ldr	r3, [pc, #336]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80002ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	785b      	ldrb	r3, [r3, #1]
 80002f8:	4619      	mov	r1, r3
 80002fa:	2301      	movs	r3, #1
 80002fc:	408b      	lsls	r3, r1
 80002fe:	43db      	mvns	r3, r3
 8000300:	4619      	mov	r1, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	4b4d      	ldr	r3, [pc, #308]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800030a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800030e:	400a      	ands	r2, r1
 8000310:	605a      	str	r2, [r3, #4]
			(GPIOx[PinConfig->Port]->GPIO_OTYPE) |=((PinConfig->OutputType)<<(PinConfig->PinNum));
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b49      	ldr	r3, [pc, #292]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800031a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800031e:	685a      	ldr	r2, [r3, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	791b      	ldrb	r3, [r3, #4]
 8000324:	4619      	mov	r1, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	785b      	ldrb	r3, [r3, #1]
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	4619      	mov	r1, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	4b42      	ldr	r3, [pc, #264]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000338:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800033c:	430a      	orrs	r2, r1
 800033e:	605a      	str	r2, [r3, #4]

			/* * * * * Select the OutputSpeed:Low, Medium, Fast, High * * * * */
			(GPIOx[PinConfig->Port]->GPIO_OSPEEDER) &=~(OSPEEDR_MASK<<(OSPEEDR_PIN_ACCESS*(PinConfig->PinNum)));
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	461a      	mov	r2, r3
 8000346:	4b3e      	ldr	r3, [pc, #248]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800034c:	689a      	ldr	r2, [r3, #8]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	785b      	ldrb	r3, [r3, #1]
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	2103      	movs	r1, #3
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	43db      	mvns	r3, r3
 800035c:	4619      	mov	r1, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	4618      	mov	r0, r3
 8000364:	4b36      	ldr	r3, [pc, #216]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000366:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800036a:	400a      	ands	r2, r1
 800036c:	609a      	str	r2, [r3, #8]
			(GPIOx[PinConfig->Port]->GPIO_OSPEEDER) |=((PinConfig->Speed)<<(OSPEEDR_PIN_ACCESS*(PinConfig->PinNum)));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	4b32      	ldr	r3, [pc, #200]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	78db      	ldrb	r3, [r3, #3]
 8000380:	4619      	mov	r1, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	785b      	ldrb	r3, [r3, #1]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	4619      	mov	r1, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	4b2a      	ldr	r3, [pc, #168]	; (8000440 <GPIO_u8PinInit+0x23c>)
 8000396:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800039a:	430a      	orrs	r2, r1
 800039c:	609a      	str	r2, [r3, #8]

			/* * * * * Select the Pin Alternate Function * * * * */
			if((PinConfig->Mode)==ALTERNATIVE_FUNCTION)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	789b      	ldrb	r3, [r3, #2]
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	d144      	bne.n	8000430 <GPIO_u8PinInit+0x22c>
			{
				/* * * * * ALTERNATIVE FUNCTION * * * * */
				uint8_t Local_u8RegNum = (PinConfig->PinNum) / AFR_PIN_SHIFTING;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	785b      	ldrb	r3, [r3, #1]
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	73bb      	strb	r3, [r7, #14]
				uint8_t Local_u8BitNum = (PinConfig->PinNum) % AFR_PIN_SHIFTING;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	785b      	ldrb	r3, [r3, #1]
 80003b2:	f003 0307 	and.w	r3, r3, #7
 80003b6:	737b      	strb	r3, [r7, #13]
				GPIOx[PinConfig->Port]->GPIO_AFR[Local_u8RegNum] &=~(AFR_MASK<<(AFR_PIN_ACCESS*(Local_u8BitNum)));
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	461a      	mov	r2, r3
 80003be:	4b20      	ldr	r3, [pc, #128]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80003c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003c4:	7bba      	ldrb	r2, [r7, #14]
 80003c6:	3208      	adds	r2, #8
 80003c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80003cc:	7b7b      	ldrb	r3, [r7, #13]
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	220f      	movs	r2, #15
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	43db      	mvns	r3, r3
 80003d8:	4618      	mov	r0, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	461a      	mov	r2, r3
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80003e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003e6:	7bba      	ldrb	r2, [r7, #14]
 80003e8:	4001      	ands	r1, r0
 80003ea:	3208      	adds	r2, #8
 80003ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				GPIOx[PinConfig->Port]->GPIO_AFR[Local_u8RegNum] |=((PinConfig->AltFunc)<<(AFR_PIN_ACCESS*(Local_u8BitNum)));
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <GPIO_u8PinInit+0x23c>)
 80003f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003fc:	7bba      	ldrb	r2, [r7, #14]
 80003fe:	3208      	adds	r2, #8
 8000400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	799b      	ldrb	r3, [r3, #6]
 8000408:	461a      	mov	r2, r3
 800040a:	7b7b      	ldrb	r3, [r7, #13]
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	4618      	mov	r0, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <GPIO_u8PinInit+0x23c>)
 800041c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000420:	7bba      	ldrb	r2, [r7, #14]
 8000422:	4301      	orrs	r1, r0
 8000424:	3208      	adds	r2, #8
 8000426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800042a:	e001      	b.n	8000430 <GPIO_u8PinInit+0x22c>

	}
	else
	{
		/*Null pointer*/
		Local_u8ErrorState=NULL_POINTER;
 800042c:	2302      	movs	r3, #2
 800042e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000430:	7bfb      	ldrb	r3, [r7, #15]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000000 	.word	0x20000000

08000444 <GPIO_u8SetPinValue>:
 * @param[in] Port ,PinNum ,PinVal
 * @retval Local_u8ErrorState
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 */
uint8_t GPIO_u8SetPinValue(Port_t	Port , Pin_t	PinNum , PinVal_t PinVal)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	460b      	mov	r3, r1
 8000450:	71bb      	strb	r3, [r7, #6]
 8000452:	4613      	mov	r3, r2
 8000454:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState=OK;
 8000456:	2300      	movs	r3, #0
 8000458:	73fb      	strb	r3, [r7, #15]
	if((Port <= PORTH) && (PinNum <= PIN15))
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	2b07      	cmp	r3, #7
 800045e:	d82e      	bhi.n	80004be <GPIO_u8SetPinValue+0x7a>
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	2b0f      	cmp	r3, #15
 8000464:	d82b      	bhi.n	80004be <GPIO_u8SetPinValue+0x7a>
	{
		if(PinVal==PIN_HIGH)
 8000466:	797b      	ldrb	r3, [r7, #5]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d110      	bne.n	800048e <GPIO_u8SetPinValue+0x4a>
		{
			/*Set PIN*/
			GPIOx[Port]->GPIO_ODR |= (0x01<<(PinNum));
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	4a18      	ldr	r2, [pc, #96]	; (80004d0 <GPIO_u8SetPinValue+0x8c>)
 8000470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	2101      	movs	r1, #1
 800047a:	fa01 f303 	lsl.w	r3, r1, r3
 800047e:	4618      	mov	r0, r3
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4913      	ldr	r1, [pc, #76]	; (80004d0 <GPIO_u8SetPinValue+0x8c>)
 8000484:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000488:	4302      	orrs	r2, r0
 800048a:	615a      	str	r2, [r3, #20]
		if(PinVal==PIN_HIGH)
 800048c:	e019      	b.n	80004c2 <GPIO_u8SetPinValue+0x7e>
			/*GPIOx[Port]->GPIO_BSRR = (0x01<<(16+PinNum));*/
		}
		else if(PinVal==PIN_LOW)
 800048e:	797b      	ldrb	r3, [r7, #5]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <GPIO_u8SetPinValue+0x74>
		{
			/*Clear PIN*/
			GPIOx[Port]->GPIO_ODR &= ~(0x01<<(PinNum));
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <GPIO_u8SetPinValue+0x8c>)
 8000498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	2101      	movs	r1, #1
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	43db      	mvns	r3, r3
 80004a8:	4618      	mov	r0, r3
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4908      	ldr	r1, [pc, #32]	; (80004d0 <GPIO_u8SetPinValue+0x8c>)
 80004ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004b2:	4002      	ands	r2, r0
 80004b4:	615a      	str	r2, [r3, #20]
		if(PinVal==PIN_HIGH)
 80004b6:	e004      	b.n	80004c2 <GPIO_u8SetPinValue+0x7e>
			/*GPIOx[Port]->GPIO_BSRR = (0x01<<(PinNum));*/
		}
		else
		{
			Local_u8ErrorState=NOK;
 80004b8:	2301      	movs	r3, #1
 80004ba:	73fb      	strb	r3, [r7, #15]
		if(PinVal==PIN_HIGH)
 80004bc:	e001      	b.n	80004c2 <GPIO_u8SetPinValue+0x7e>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
 80004be:	2301      	movs	r3, #1
 80004c0:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	20000000 	.word	0x20000000

080004d4 <RCC_AHB1EnableClock>:
	@Brief  the function enables AHB1 Clock 
	@param[in] Copy_Peripheral			@AHB1Periperals_t
	@retval void
 */
void RCC_AHB1EnableClock(AHB1Periperals_t     Copy_Peripheral)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	/*Enable the peripheraL*/
	RCC->RCC_AHB1ENR |= (ONE << Copy_Peripheral);
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <RCC_AHB1EnableClock+0x2c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	79fa      	ldrb	r2, [r7, #7]
 80004e4:	2101      	movs	r1, #1
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <RCC_AHB1EnableClock+0x2c>)
 80004ee:	430b      	orrs	r3, r1
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800

08000504 <SYSTICK_DelayMs>:
@brief	 Timer in ms
@param[in] Copy_u32TimeMs
@retval void
 */
void SYSTICK_DelayMs(uint32_t Copy_u32TimeMs)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	/*CLK SRC*/
	SYSTICK->SYSTICK_CSR |= (SET_BIT<<CLKSOURCE);
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <SYSTICK_DelayMs+0x54>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <SYSTICK_DelayMs+0x54>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6013      	str	r3, [r2, #0]
	/*Reset current SYSTICK counter value*/
	SYSTICK->SYSTICK_CVR = INITIAL_LOAD_VAL;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <SYSTICK_DelayMs+0x54>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
	/*RELOAD VALUE*/
	SYSTICK->SYSTICK_RVR = (Copy_u32TimeMs*(SYSTEM_FREQUANCY/_10POW3));
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <SYSTICK_DelayMs+0x54>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000526:	fb01 f303 	mul.w	r3, r1, r3
 800052a:	6053      	str	r3, [r2, #4]
	/*Enable SYSTICK*/
	SYSTICK->SYSTICK_CSR |= (SET_BIT<<ENABLE);
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <SYSTICK_DelayMs+0x54>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <SYSTICK_DelayMs+0x54>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]
	/*Busy waiting count flag*/
	while((((SYSTICK->SYSTICK_CSR)>>COUNTFLAG)&GET_NUM) != READY_FLAG)
 8000538:	bf00      	nop
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <SYSTICK_DelayMs+0x54>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	0c1b      	lsrs	r3, r3, #16
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	2b01      	cmp	r3, #1
 8000546:	d1f8      	bne.n	800053a <SYSTICK_DelayMs+0x36>
	{
		/*do nothing*/
	}
}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000e010 	.word	0xe000e010

0800055c <setup>:
#include "RCC_Interface.h"
#include "GPIO_interface.h"
#include "SYSTICK_interface.h"

void setup(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0

	RCC_AHB1EnableClock(GPIOAEN);
 8000562:	2000      	movs	r0, #0
 8000564:	f7ff ffb6 	bl	80004d4 <RCC_AHB1EnableClock>

	PinConfig_t PINA5 = {
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	f8c3 2003 	str.w	r2, [r3, #3]
 8000572:	2305      	movs	r3, #5
 8000574:	707b      	strb	r3, [r7, #1]
 8000576:	2301      	movs	r3, #1
 8000578:	70bb      	strb	r3, [r7, #2]
			.Mode = OUTPUT ,
			.OutputType = PUSH_PULL,

	};

	GPIO_u8PinInit(&PINA5);
 800057a:	463b      	mov	r3, r7
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fe41 	bl	8000204 <GPIO_u8PinInit>

}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <main>:

int main(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
	setup();
 800058e:	f7ff ffe5 	bl	800055c <setup>

	while(1)
	{
		GPIO_u8SetPinValue(PORTA, PIN5, PIN_HIGH);
 8000592:	2201      	movs	r2, #1
 8000594:	2105      	movs	r1, #5
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff ff54 	bl	8000444 <GPIO_u8SetPinValue>
		SYSTICK_DelayMs(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f7ff ffb0 	bl	8000504 <SYSTICK_DelayMs>
		GPIO_u8SetPinValue(PORTA, PIN5, PIN_LOW);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2105      	movs	r1, #5
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ff4b 	bl	8000444 <GPIO_u8SetPinValue>
		SYSTICK_DelayMs(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b2:	f7ff ffa7 	bl	8000504 <SYSTICK_DelayMs>
		GPIO_u8SetPinValue(PORTA, PIN5, PIN_HIGH);
 80005b6:	e7ec      	b.n	8000592 <main+0x8>

080005b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c2:	490d      	ldr	r1, [pc, #52]	; (80005f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <LoopForever+0xe>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d8:	4c0a      	ldr	r4, [pc, #40]	; (8000604 <LoopForever+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005e6:	f000 f811 	bl	800060c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff ffce 	bl	800058a <main>

080005ee <LoopForever>:

LoopForever:
  b LoopForever
 80005ee:	e7fe      	b.n	80005ee <LoopForever>
  ldr   r0, =_estack
 80005f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80005fc:	08000674 	.word	0x08000674
  ldr r2, =_sbss
 8000600:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000604:	2000003c 	.word	0x2000003c

08000608 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC_IRQHandler>
	...

0800060c <__libc_init_array>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	4d0d      	ldr	r5, [pc, #52]	; (8000644 <__libc_init_array+0x38>)
 8000610:	4c0d      	ldr	r4, [pc, #52]	; (8000648 <__libc_init_array+0x3c>)
 8000612:	1b64      	subs	r4, r4, r5
 8000614:	10a4      	asrs	r4, r4, #2
 8000616:	2600      	movs	r6, #0
 8000618:	42a6      	cmp	r6, r4
 800061a:	d109      	bne.n	8000630 <__libc_init_array+0x24>
 800061c:	4d0b      	ldr	r5, [pc, #44]	; (800064c <__libc_init_array+0x40>)
 800061e:	4c0c      	ldr	r4, [pc, #48]	; (8000650 <__libc_init_array+0x44>)
 8000620:	f000 f818 	bl	8000654 <_init>
 8000624:	1b64      	subs	r4, r4, r5
 8000626:	10a4      	asrs	r4, r4, #2
 8000628:	2600      	movs	r6, #0
 800062a:	42a6      	cmp	r6, r4
 800062c:	d105      	bne.n	800063a <__libc_init_array+0x2e>
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f855 3b04 	ldr.w	r3, [r5], #4
 8000634:	4798      	blx	r3
 8000636:	3601      	adds	r6, #1
 8000638:	e7ee      	b.n	8000618 <__libc_init_array+0xc>
 800063a:	f855 3b04 	ldr.w	r3, [r5], #4
 800063e:	4798      	blx	r3
 8000640:	3601      	adds	r6, #1
 8000642:	e7f2      	b.n	800062a <__libc_init_array+0x1e>
 8000644:	0800066c 	.word	0x0800066c
 8000648:	0800066c 	.word	0x0800066c
 800064c:	0800066c 	.word	0x0800066c
 8000650:	08000670 	.word	0x08000670

08000654 <_init>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr

08000660 <_fini>:
 8000660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000662:	bf00      	nop
 8000664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000666:	bc08      	pop	{r3}
 8000668:	469e      	mov	lr, r3
 800066a:	4770      	bx	lr
