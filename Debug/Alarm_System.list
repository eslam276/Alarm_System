
Alarm_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e20  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08000fe4  08000fe4  00010fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011e4  080011e4  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  080011e4  080011e4  000111e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080011ec  080011ec  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011ec  080011ec  000111ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011f0  080011f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080011f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000048  0800123c  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  0800123c  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c56  00000000  00000000  000200bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000729  00000000  00000000  00021d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00022440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000166  00000000  00000000  00022648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000213e  00000000  00000000  000227ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002912  00000000  00000000  000248ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008ce7  00000000  00000000  000271fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006c8  00000000  00000000  0002fee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000305b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000048 	.word	0x20000048
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000fcc 	.word	0x08000fcc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	08000fcc 	.word	0x08000fcc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <APP_voidInit>:




void APP_voidInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0

	 RCC_AHB1EnableClk(AHB1_GPIOA);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 fac0 	bl	8000a8c <RCC_AHB1EnableClk>
	 RCC_APB1Enable(APB1_USART2);
 800050c:	2011      	movs	r0, #17
 800050e:	f000 fad5 	bl	8000abc <RCC_APB1Enable>


	 GPIO_PIN_CFG_t PINA5 =
 8000512:	f107 0318 	add.w	r3, r7, #24
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	f8c3 2003 	str.w	r2, [r3, #3]
 800051e:	2305      	movs	r3, #5
 8000520:	767b      	strb	r3, [r7, #25]
 8000522:	2301      	movs	r3, #1
 8000524:	76bb      	strb	r3, [r7, #26]
	 };




	 GPIO_PIN_CFG_t USART_TX_PIN = {
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	f8c3 2003 	str.w	r2, [r3, #3]
 8000532:	2302      	movs	r3, #2
 8000534:	747b      	strb	r3, [r7, #17]
 8000536:	2302      	movs	r3, #2
 8000538:	74bb      	strb	r3, [r7, #18]
 800053a:	2307      	movs	r3, #7
 800053c:	75bb      	strb	r3, [r7, #22]
			.AltFunc=AF7, .Mode=ALTERNATIVE_FUNCTION, .OutputType=PUSH_PULL,
			.PinNum=PIN2, .Port=PORTA
	};

	 GPIO_PIN_CFG_t USART_RX_PIN = {
 800053e:	f107 0308 	add.w	r3, r7, #8
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	f8c3 2003 	str.w	r2, [r3, #3]
 800054a:	2303      	movs	r3, #3
 800054c:	727b      	strb	r3, [r7, #9]
 800054e:	2302      	movs	r3, #2
 8000550:	72bb      	strb	r3, [r7, #10]
 8000552:	2307      	movs	r3, #7
 8000554:	73bb      	strb	r3, [r7, #14]
	};




		USART_Cnfg_t UART2 =
 8000556:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <APP_voidInit+0x94>)
 8000558:	463b      	mov	r3, r7
 800055a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800055e:	6018      	str	r0, [r3, #0]
 8000560:	3304      	adds	r3, #4
 8000562:	8019      	strh	r1, [r3, #0]





	 GPIO_u8PinInit(&PINA5);
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f8a3 	bl	80006b4 <GPIO_u8PinInit>

	 GPIO_u8PinInit(&USART_TX_PIN);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f89e 	bl	80006b4 <GPIO_u8PinInit>
	 GPIO_u8PinInit(&USART_RX_PIN);
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f899 	bl	80006b4 <GPIO_u8PinInit>
	 USART_u8Init(&UART2);
 8000582:	463b      	mov	r3, r7
 8000584:	4618      	mov	r0, r3
 8000586:	f000 facd 	bl	8000b24 <USART_u8Init>




}
 800058a:	bf00      	nop
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	08000fe4 	.word	0x08000fe4

08000598 <APP_voidLogin>:




void APP_voidLogin(void)
{ 
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	uint8_t Local_u8Check = LOGIN_IsValid() ;
 800059e:	f000 f9b7 	bl	8000910 <LOGIN_IsValid>
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	if (Local_u8Check == VALID)
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d103      	bne.n	80005b4 <APP_voidLogin+0x1c>
	{
		Print("\r\n\r\n Welcome to the alarm system.................");
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <APP_voidLogin+0x34>)
 80005ae:	f000 fa9d 	bl	8000aec <Print>
		
	}
	
	
	
}
 80005b2:	e006      	b.n	80005c2 <APP_voidLogin+0x2a>
	else if (Local_u8Check == INVALID)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d103      	bne.n	80005c2 <APP_voidLogin+0x2a>
		Print("\r\n The System is closed :(  ");
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <APP_voidLogin+0x38>)
 80005bc:	f000 fa96 	bl	8000aec <Print>
		while (1)
 80005c0:	e7fe      	b.n	80005c0 <APP_voidLogin+0x28>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	08000fec 	.word	0x08000fec
 80005d0:	08001020 	.word	0x08001020

080005d4 <APP_voidMenu>:


void APP_voidMenu(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	
	uint8_t Local_u8Number ;

	
	Print("\r\n\r\n Menu : ");
 80005da:	4821      	ldr	r0, [pc, #132]	; (8000660 <APP_voidMenu+0x8c>)
 80005dc:	f000 fa86 	bl	8000aec <Print>
	Print("\r\n\r\n 1) Display time and date ");
 80005e0:	4820      	ldr	r0, [pc, #128]	; (8000664 <APP_voidMenu+0x90>)
 80005e2:	f000 fa83 	bl	8000aec <Print>
	Print("\r\n 2) Set time and date ");
 80005e6:	4820      	ldr	r0, [pc, #128]	; (8000668 <APP_voidMenu+0x94>)
 80005e8:	f000 fa80 	bl	8000aec <Print>
	Print("\r\n 3) Set Alarm ");
 80005ec:	481f      	ldr	r0, [pc, #124]	; (800066c <APP_voidMenu+0x98>)
 80005ee:	f000 fa7d 	bl	8000aec <Print>
	Print("\r\n 4) Exit \r\n");
 80005f2:	481f      	ldr	r0, [pc, #124]	; (8000670 <APP_voidMenu+0x9c>)
 80005f4:	f000 fa7a 	bl	8000aec <Print>

	Input(&Local_u8Number , 1);
 80005f8:	1dfb      	adds	r3, r7, #7
 80005fa:	2101      	movs	r1, #1
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fa81 	bl	8000b04 <Input>

	while (Local_u8Number < '1' || Local_u8Number > '4')
 8000602:	e007      	b.n	8000614 <APP_voidMenu+0x40>
	{
		Print("\r\n Please enter a valid number ... ");
 8000604:	481b      	ldr	r0, [pc, #108]	; (8000674 <APP_voidMenu+0xa0>)
 8000606:	f000 fa71 	bl	8000aec <Print>
		Input(&Local_u8Number , 1);
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	2101      	movs	r1, #1
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fa78 	bl	8000b04 <Input>
	while (Local_u8Number < '1' || Local_u8Number > '4')
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b30      	cmp	r3, #48	; 0x30
 8000618:	d9f4      	bls.n	8000604 <APP_voidMenu+0x30>
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b34      	cmp	r3, #52	; 0x34
 800061e:	d8f1      	bhi.n	8000604 <APP_voidMenu+0x30>
	}

	switch (Local_u8Number)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3b31      	subs	r3, #49	; 0x31
 8000624:	2b03      	cmp	r3, #3
 8000626:	d815      	bhi.n	8000654 <APP_voidMenu+0x80>
 8000628:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <APP_voidMenu+0x5c>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	08000641 	.word	0x08000641
 8000634:	08000647 	.word	0x08000647
 8000638:	0800064d 	.word	0x0800064d
 800063c:	08000653 	.word	0x08000653
	{
		case '1' :
			Display_Time_And_Date();
 8000640:	f000 f81a 	bl	8000678 <Display_Time_And_Date>
			break;
 8000644:	e007      	b.n	8000656 <APP_voidMenu+0x82>
		case '2' :
			Set_Time_And_Date();
 8000646:	f000 f821 	bl	800068c <Set_Time_And_Date>
			break;
 800064a:	e004      	b.n	8000656 <APP_voidMenu+0x82>
		case '3' :
			Set_Alarm();
 800064c:	f000 f828 	bl	80006a0 <Set_Alarm>
			break;
 8000650:	e001      	b.n	8000656 <APP_voidMenu+0x82>

		case '4' :
			while (1)
 8000652:	e7fe      	b.n	8000652 <APP_voidMenu+0x7e>
			}
			
			break;
		
		default:
			break;
 8000654:	bf00      	nop
	}
	


}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	08001040 	.word	0x08001040
 8000664:	08001050 	.word	0x08001050
 8000668:	08001070 	.word	0x08001070
 800066c:	0800108c 	.word	0x0800108c
 8000670:	080010a0 	.word	0x080010a0
 8000674:	080010b0 	.word	0x080010b0

08000678 <Display_Time_And_Date>:




static void Display_Time_And_Date(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

	Print("\r\n Display function...");
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <Display_Time_And_Date+0x10>)
 800067e:	f000 fa35 	bl	8000aec <Print>

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	080010d4 	.word	0x080010d4

0800068c <Set_Time_And_Date>:


static void Set_Time_And_Date(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

	Print("\r\n Set time and date  function...");
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <Set_Time_And_Date+0x10>)
 8000692:	f000 fa2b 	bl	8000aec <Print>

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	080010ec 	.word	0x080010ec

080006a0 <Set_Alarm>:


static void Set_Alarm(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

	Print("\r\n Set Alarm  function...");
 80006a4:	4802      	ldr	r0, [pc, #8]	; (80006b0 <Set_Alarm+0x10>)
 80006a6:	f000 fa21 	bl	8000aec <Print>

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08001110 	.word	0x08001110

080006b4 <GPIO_u8PinInit>:
 */
/*===============================================================================================================*/


uint8_t GPIO_u8PinInit (const GPIO_PIN_CFG_t* PinCFG )
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    uint8_t Local_u8ErrorState = OK ;
 80006bc:	2300      	movs	r3, #0
 80006be:	73fb      	strb	r3, [r7, #15]

    if (PinCFG != NULL)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f000 8116 	beq.w	80008f4 <GPIO_u8PinInit+0x240>
    {

        /* You should check All Variables */
       if ((PinCFG->Port <= PORTH) && (PinCFG->PinNum <= PIN15))
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b07      	cmp	r3, #7
 80006ce:	f200 810e 	bhi.w	80008ee <GPIO_u8PinInit+0x23a>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	2b0f      	cmp	r3, #15
 80006d8:	f200 8109 	bhi.w	80008ee <GPIO_u8PinInit+0x23a>
       {
            /* Selsect GPIO mode : Input , Output , Analog , Alternate Function */
            (GPIOPort[PinCFG->Port]->MODER) &= ~(MODER_MASK << ((PinCFG->PinNum) * MODER_PIN_ACCESS)); /* Clear the mode bits*/
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b8a      	ldr	r3, [pc, #552]	; (800090c <GPIO_u8PinInit+0x258>)
 80006e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	785b      	ldrb	r3, [r3, #1]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	2103      	movs	r1, #3
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4619      	mov	r1, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	4b82      	ldr	r3, [pc, #520]	; (800090c <GPIO_u8PinInit+0x258>)
 8000702:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000706:	400a      	ands	r2, r1
 8000708:	601a      	str	r2, [r3, #0]
            (GPIOPort[PinCFG->Port]->MODER) |=  ( (PinCFG->Mode) << (PinCFG->PinNum) * MODER_PIN_ACCESS );
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b7e      	ldr	r3, [pc, #504]	; (800090c <GPIO_u8PinInit+0x258>)
 8000712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	789b      	ldrb	r3, [r3, #2]
 800071c:	4619      	mov	r1, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	785b      	ldrb	r3, [r3, #1]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	fa01 f303 	lsl.w	r3, r1, r3
 8000728:	4619      	mov	r1, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	4b76      	ldr	r3, [pc, #472]	; (800090c <GPIO_u8PinInit+0x258>)
 8000732:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000736:	430a      	orrs	r2, r1
 8000738:	601a      	str	r2, [r3, #0]

            /* Select GPIO pull state : Pullup , pulldown , no pull */
            (GPIOPort[PinCFG->Port]->PUPDR) &= ~(PUPDR_MASK << ((PinCFG->PinNum) * PUPDR_PIN_ACCESS));
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	4b72      	ldr	r3, [pc, #456]	; (800090c <GPIO_u8PinInit+0x258>)
 8000742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000746:	68da      	ldr	r2, [r3, #12]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	785b      	ldrb	r3, [r3, #1]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	2103      	movs	r1, #3
 8000750:	fa01 f303 	lsl.w	r3, r1, r3
 8000754:	43db      	mvns	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	4b6b      	ldr	r3, [pc, #428]	; (800090c <GPIO_u8PinInit+0x258>)
 8000760:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000764:	400a      	ands	r2, r1
 8000766:	60da      	str	r2, [r3, #12]
            (GPIOPort[PinCFG->Port]->PUPDR) |=  ( (PinCFG->PullType) << (PinCFG->PinNum) * PUPDR_PIN_ACCESS );
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b67      	ldr	r3, [pc, #412]	; (800090c <GPIO_u8PinInit+0x258>)
 8000770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000774:	68da      	ldr	r2, [r3, #12]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	4619      	mov	r1, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	785b      	ldrb	r3, [r3, #1]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	4619      	mov	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	4b5f      	ldr	r3, [pc, #380]	; (800090c <GPIO_u8PinInit+0x258>)
 8000790:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000794:	430a      	orrs	r2, r1
 8000796:	60da      	str	r2, [r3, #12]


            /* Select output type and output speed in case of general purpose output or alternate function */
            if ((PinCFG->Mode == OUTPUT) || (PinCFG->Mode == ALTERNATIVE_FUNCTION))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	789b      	ldrb	r3, [r3, #2]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d004      	beq.n	80007aa <GPIO_u8PinInit+0xf6>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	789b      	ldrb	r3, [r3, #2]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	f040 80a8 	bne.w	80008fa <GPIO_u8PinInit+0x246>
            {
                /* select output type : Push pull , op(en drain  */
                 (GPIOPort[PinCFG->Port]->OTYPER) &= ~( OTYPER_MASK << (PinCFG->PinNum));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b56      	ldr	r3, [pc, #344]	; (800090c <GPIO_u8PinInit+0x258>)
 80007b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b6:	6859      	ldr	r1, [r3, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	785b      	ldrb	r3, [r3, #1]
 80007bc:	461a      	mov	r2, r3
 80007be:	2301      	movs	r3, #1
 80007c0:	4093      	lsls	r3, r2
 80007c2:	43da      	mvns	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	4b50      	ldr	r3, [pc, #320]	; (800090c <GPIO_u8PinInit+0x258>)
 80007cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80007d0:	400a      	ands	r2, r1
 80007d2:	605a      	str	r2, [r3, #4]
                 (GPIOPort[PinCFG->Port]->OTYPER) |=  ( (PinCFG->OutputType)  << (PinCFG->PinNum) );
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b4c      	ldr	r3, [pc, #304]	; (800090c <GPIO_u8PinInit+0x258>)
 80007dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	4619      	mov	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	785b      	ldrb	r3, [r3, #1]
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	4619      	mov	r1, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	4b44      	ldr	r3, [pc, #272]	; (800090c <GPIO_u8PinInit+0x258>)
 80007fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80007fe:	430a      	orrs	r2, r1
 8000800:	605a      	str	r2, [r3, #4]

                /* Select output speed : Low Meduim High Fast */
                  (GPIOPort[PinCFG->Port]->OSPEEDER) &= ~(OSPEEDER_MASK << ((PinCFG->PinNum) * OSPEEDER_PIN_ACCESS)); 
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	4b40      	ldr	r3, [pc, #256]	; (800090c <GPIO_u8PinInit+0x258>)
 800080a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	785b      	ldrb	r3, [r3, #1]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	2103      	movs	r1, #3
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	43db      	mvns	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	4b39      	ldr	r3, [pc, #228]	; (800090c <GPIO_u8PinInit+0x258>)
 8000828:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800082c:	400a      	ands	r2, r1
 800082e:	609a      	str	r2, [r3, #8]
                  (GPIOPort[PinCFG->Port]->OSPEEDER) |=  ((PinCFG->Speed) << ((PinCFG->PinNum) * OSPEEDER_PIN_ACCESS));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b35      	ldr	r3, [pc, #212]	; (800090c <GPIO_u8PinInit+0x258>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	78db      	ldrb	r3, [r3, #3]
 8000842:	4619      	mov	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	785b      	ldrb	r3, [r3, #1]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	4619      	mov	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <GPIO_u8PinInit+0x258>)
 8000858:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800085c:	430a      	orrs	r2, r1
 800085e:	609a      	str	r2, [r3, #8]
            
                /* Select the pin alternative function */
                if ((PinCFG->Mode == ALTERNATIVE_FUNCTION))
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	2b02      	cmp	r3, #2
 8000866:	d148      	bne.n	80008fa <GPIO_u8PinInit+0x246>
                {
                    uint8_t Local_u8RegNum = (PinCFG->PinNum) / AFR_PIN_SHIFTING ;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	73bb      	strb	r3, [r7, #14]
                    uint8_t Local_u8BitNum = (PinCFG->PinNum) % AFR_PIN_SHIFTING ;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	785b      	ldrb	r3, [r3, #1]
 8000874:	f003 0307 	and.w	r3, r3, #7
 8000878:	737b      	strb	r3, [r7, #13]

                    (GPIOPort[PinCFG->Port]->AFR[Local_u8RegNum]) &= ~(AFR_MASK << (Local_u8BitNum * AFR_PIN_ACCESS) );
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <GPIO_u8PinInit+0x258>)
 8000882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000886:	7bba      	ldrb	r2, [r7, #14]
 8000888:	3208      	adds	r2, #8
 800088a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800088e:	7b7b      	ldrb	r3, [r7, #13]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	220f      	movs	r2, #15
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <GPIO_u8PinInit+0x258>)
 80008a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a8:	7bba      	ldrb	r2, [r7, #14]
 80008aa:	4001      	ands	r1, r0
 80008ac:	3208      	adds	r2, #8
 80008ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    (GPIOPort[PinCFG->Port]->AFR[Local_u8RegNum]) |=  (( PinCFG->AltFunc) << (Local_u8BitNum * AFR_PIN_ACCESS) );
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <GPIO_u8PinInit+0x258>)
 80008ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008be:	7bba      	ldrb	r2, [r7, #14]
 80008c0:	3208      	adds	r2, #8
 80008c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	799b      	ldrb	r3, [r3, #6]
 80008ca:	461a      	mov	r2, r3
 80008cc:	7b7b      	ldrb	r3, [r7, #13]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <GPIO_u8PinInit+0x258>)
 80008de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e2:	7bba      	ldrb	r2, [r7, #14]
 80008e4:	4301      	orrs	r1, r0
 80008e6:	3208      	adds	r2, #8
 80008e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if ((PinCFG->Mode == OUTPUT) || (PinCFG->Mode == ALTERNATIVE_FUNCTION))
 80008ec:	e005      	b.n	80008fa <GPIO_u8PinInit+0x246>


       }
       else
       {
            Local_u8ErrorState = NOK ;
 80008ee:	2301      	movs	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
 80008f2:	e003      	b.n	80008fc <GPIO_u8PinInit+0x248>
       
       
    }
    else
    {
        Local_u8ErrorState = NULL_PTR_ERR ;
 80008f4:	2302      	movs	r3, #2
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e000      	b.n	80008fc <GPIO_u8PinInit+0x248>
            if ((PinCFG->Mode == OUTPUT) || (PinCFG->Mode == ALTERNATIVE_FUNCTION))
 80008fa:	bf00      	nop
    




    return Local_u8ErrorState ;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000000 	.word	0x20000000

08000910 <LOGIN_IsValid>:




LOGIN_t LOGIN_IsValid(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0

    LOGIN_t LOCAL_Check = INVALID ;
 8000916:	2300      	movs	r3, #0
 8000918:	75fb      	strb	r3, [r7, #23]


    uint8_t LOCAL_u8Id[ID_LENGTH] = "1234" ;
 800091a:	4a50      	ldr	r2, [pc, #320]	; (8000a5c <LOGIN_IsValid+0x14c>)
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000924:	6018      	str	r0, [r3, #0]
 8000926:	3304      	adds	r3, #4
 8000928:	7019      	strb	r1, [r3, #0]
    uint8_t LOCAL_u8Password[PASSWORD_LENGTH] = "4321" ;
 800092a:	4a4d      	ldr	r2, [pc, #308]	; (8000a60 <LOGIN_IsValid+0x150>)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000932:	6018      	str	r0, [r3, #0]
 8000934:	3304      	adds	r3, #4
 8000936:	7019      	strb	r1, [r3, #0]
   


    uint8_t ID = 1 ;
 8000938:	2301      	movs	r3, #1
 800093a:	75bb      	strb	r3, [r7, #22]
    uint8_t Password = 1 ;
 800093c:	2301      	movs	r3, #1
 800093e:	757b      	strb	r3, [r7, #21]

   



    Print("\r\n Welcome to the alarm system .....");
 8000940:	4848      	ldr	r0, [pc, #288]	; (8000a64 <LOGIN_IsValid+0x154>)
 8000942:	f000 f8d3 	bl	8000aec <Print>
    

    for(LoginIterator=0 ; LoginIterator < TRIALS_NUM ; LoginIterator++)
 8000946:	2300      	movs	r3, #0
 8000948:	753b      	strb	r3, [r7, #20]
 800094a:	e070      	b.n	8000a2e <LOGIN_IsValid+0x11e>
    {

        ID = 1 ;
 800094c:	2301      	movs	r3, #1
 800094e:	75bb      	strb	r3, [r7, #22]
    	Password = 1 ;
 8000950:	2301      	movs	r3, #1
 8000952:	757b      	strb	r3, [r7, #21]

        uint8_t i  ;



        Print("\r\n Enter ID : ");
 8000954:	4844      	ldr	r0, [pc, #272]	; (8000a68 <LOGIN_IsValid+0x158>)
 8000956:	f000 f8c9 	bl	8000aec <Print>

        Input(LOCAL_u8Id ,4);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2104      	movs	r1, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f8cf 	bl	8000b04 <Input>

        

        

        for ( i = 0; i < ID_LENGTH ; i++)
 8000966:	2300      	movs	r3, #0
 8000968:	74fb      	strb	r3, [r7, #19]
 800096a:	e00e      	b.n	800098a <LOGIN_IsValid+0x7a>
        {
            if(LOGIN_u8CheckId[i]!=LOCAL_u8Id[i])
 800096c:	7cfb      	ldrb	r3, [r7, #19]
 800096e:	4a3f      	ldr	r2, [pc, #252]	; (8000a6c <LOGIN_IsValid+0x15c>)
 8000970:	5cd2      	ldrb	r2, [r2, r3]
 8000972:	7cfb      	ldrb	r3, [r7, #19]
 8000974:	3318      	adds	r3, #24
 8000976:	443b      	add	r3, r7
 8000978:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d001      	beq.n	8000984 <LOGIN_IsValid+0x74>
            {

                ID = 0 ;
 8000980:	2300      	movs	r3, #0
 8000982:	75bb      	strb	r3, [r7, #22]
        for ( i = 0; i < ID_LENGTH ; i++)
 8000984:	7cfb      	ldrb	r3, [r7, #19]
 8000986:	3301      	adds	r3, #1
 8000988:	74fb      	strb	r3, [r7, #19]
 800098a:	7cfb      	ldrb	r3, [r7, #19]
 800098c:	2b04      	cmp	r3, #4
 800098e:	d9ed      	bls.n	800096c <LOGIN_IsValid+0x5c>





        Print("\r\nEnter Password : ");
 8000990:	4837      	ldr	r0, [pc, #220]	; (8000a70 <LOGIN_IsValid+0x160>)
 8000992:	f000 f8ab 	bl	8000aec <Print>

        Input(LOCAL_u8Password ,4);
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2104      	movs	r1, #4
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f8b2 	bl	8000b04 <Input>

       

        for ( i = 0; i < PASSWORD_LENGTH ; i++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	74fb      	strb	r3, [r7, #19]
 80009a4:	e00e      	b.n	80009c4 <LOGIN_IsValid+0xb4>
        {
            if(LOGIN_u8CheckPassword[i]!=LOCAL_u8Password[i])
 80009a6:	7cfb      	ldrb	r3, [r7, #19]
 80009a8:	4a32      	ldr	r2, [pc, #200]	; (8000a74 <LOGIN_IsValid+0x164>)
 80009aa:	5cd2      	ldrb	r2, [r2, r3]
 80009ac:	7cfb      	ldrb	r3, [r7, #19]
 80009ae:	3318      	adds	r3, #24
 80009b0:	443b      	add	r3, r7
 80009b2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d001      	beq.n	80009be <LOGIN_IsValid+0xae>
            {

                Password = 0 ;
 80009ba:	2300      	movs	r3, #0
 80009bc:	757b      	strb	r3, [r7, #21]
        for ( i = 0; i < PASSWORD_LENGTH ; i++)
 80009be:	7cfb      	ldrb	r3, [r7, #19]
 80009c0:	3301      	adds	r3, #1
 80009c2:	74fb      	strb	r3, [r7, #19]
 80009c4:	7cfb      	ldrb	r3, [r7, #19]
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d9ed      	bls.n	80009a6 <LOGIN_IsValid+0x96>
            }
        }



        if (ID == 1 && Password == 1 )
 80009ca:	7dbb      	ldrb	r3, [r7, #22]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d105      	bne.n	80009dc <LOGIN_IsValid+0xcc>
 80009d0:	7d7b      	ldrb	r3, [r7, #21]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d102      	bne.n	80009dc <LOGIN_IsValid+0xcc>
        {


          LOCAL_Check = VALID ;
 80009d6:	2301      	movs	r3, #1
 80009d8:	75fb      	strb	r3, [r7, #23]

         /* Print("\r\n Welcome Eslam ...");  */ 
         
             
            break;
 80009da:	e02b      	b.n	8000a34 <LOGIN_IsValid+0x124>

        }


         else if (ID==0 && Password ==1)
 80009dc:	7dbb      	ldrb	r3, [r7, #22]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d106      	bne.n	80009f0 <LOGIN_IsValid+0xe0>
 80009e2:	7d7b      	ldrb	r3, [r7, #21]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d103      	bne.n	80009f0 <LOGIN_IsValid+0xe0>
        {

           

            Print("\r\n Invalid Id ");
 80009e8:	4823      	ldr	r0, [pc, #140]	; (8000a78 <LOGIN_IsValid+0x168>)
 80009ea:	f000 f87f 	bl	8000aec <Print>
 80009ee:	e015      	b.n	8000a1c <LOGIN_IsValid+0x10c>


        }


        else if (ID==1 && Password ==0)
 80009f0:	7dbb      	ldrb	r3, [r7, #22]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d106      	bne.n	8000a04 <LOGIN_IsValid+0xf4>
 80009f6:	7d7b      	ldrb	r3, [r7, #21]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d103      	bne.n	8000a04 <LOGIN_IsValid+0xf4>
        {

           

            Print("\r\n Invalid Password");
 80009fc:	481f      	ldr	r0, [pc, #124]	; (8000a7c <LOGIN_IsValid+0x16c>)
 80009fe:	f000 f875 	bl	8000aec <Print>
 8000a02:	e00b      	b.n	8000a1c <LOGIN_IsValid+0x10c>




        }
        else if (ID==0 && Password ==0)
 8000a04:	7dbb      	ldrb	r3, [r7, #22]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d108      	bne.n	8000a1c <LOGIN_IsValid+0x10c>
 8000a0a:	7d7b      	ldrb	r3, [r7, #21]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d105      	bne.n	8000a1c <LOGIN_IsValid+0x10c>
        {

            

           Print("\r\n Invalid Id");
 8000a10:	481b      	ldr	r0, [pc, #108]	; (8000a80 <LOGIN_IsValid+0x170>)
 8000a12:	f000 f86b 	bl	8000aec <Print>

         
            Print("\r\n Invalid Password");
 8000a16:	4819      	ldr	r0, [pc, #100]	; (8000a7c <LOGIN_IsValid+0x16c>)
 8000a18:	f000 f868 	bl	8000aec <Print>


        }


        if(LoginIterator < TRIALS_NUM -1 )
 8000a1c:	7d3b      	ldrb	r3, [r7, #20]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d802      	bhi.n	8000a28 <LOGIN_IsValid+0x118>

        {
        			

                  
            Print("\r\n Try Again....");
 8000a22:	4818      	ldr	r0, [pc, #96]	; (8000a84 <LOGIN_IsValid+0x174>)
 8000a24:	f000 f862 	bl	8000aec <Print>
    for(LoginIterator=0 ; LoginIterator < TRIALS_NUM ; LoginIterator++)
 8000a28:	7d3b      	ldrb	r3, [r7, #20]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	753b      	strb	r3, [r7, #20]
 8000a2e:	7d3b      	ldrb	r3, [r7, #20]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d98b      	bls.n	800094c <LOGIN_IsValid+0x3c>

    }



    if (ID == 1 && Password == 1 )
 8000a34:	7dbb      	ldrb	r3, [r7, #22]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d105      	bne.n	8000a46 <LOGIN_IsValid+0x136>
 8000a3a:	7d7b      	ldrb	r3, [r7, #21]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d102      	bne.n	8000a46 <LOGIN_IsValid+0x136>
    {
        LOCAL_Check = VALID ;
 8000a40:	2301      	movs	r3, #1
 8000a42:	75fb      	strb	r3, [r7, #23]
 8000a44:	e004      	b.n	8000a50 <LOGIN_IsValid+0x140>
    }

    else
    {
    	
        Print("\r\n Invalid Login ");
 8000a46:	4810      	ldr	r0, [pc, #64]	; (8000a88 <LOGIN_IsValid+0x178>)
 8000a48:	f000 f850 	bl	8000aec <Print>



       LOCAL_Check = INVALID ;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	75fb      	strb	r3, [r7, #23]





    return  LOCAL_Check ;
 8000a50:	7dfb      	ldrb	r3, [r7, #23]

}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	080011d4 	.word	0x080011d4
 8000a60:	080011dc 	.word	0x080011dc
 8000a64:	0800112c 	.word	0x0800112c
 8000a68:	08001154 	.word	0x08001154
 8000a6c:	20000020 	.word	0x20000020
 8000a70:	08001164 	.word	0x08001164
 8000a74:	20000028 	.word	0x20000028
 8000a78:	08001178 	.word	0x08001178
 8000a7c:	08001188 	.word	0x08001188
 8000a80:	0800119c 	.word	0x0800119c
 8000a84:	080011ac 	.word	0x080011ac
 8000a88:	080011c0 	.word	0x080011c0

08000a8c <RCC_AHB1EnableClk>:
void RCC_APB2ResetClk(RCC_APB2ENR_t Copy_enPeripheral)
{
	RCC->APB2RSTR |= (1 << Copy_enPeripheral);
}
void RCC_AHB1EnableClk(RCC_AHB1ENR_t Copy_enPeripheral)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
     RCC->AHB1ENR |= (1 << Copy_enPeripheral);
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <RCC_AHB1EnableClk+0x2c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <RCC_AHB1EnableClk+0x2c>)
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <RCC_APB1Enable>:
void RCC_AHB3DisableClk(RCC_AHB3ENR_t Copy_enPeripheral)
{
	RCC->AHB3ENR &= ~(1 << Copy_enPeripheral);
}
void RCC_APB1Enable(RCC_APB1ENR_t Copy_enPeripheral)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	RCC->APB1ENR |= (1 << Copy_enPeripheral);
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <RCC_APB1Enable+0x2c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <RCC_APB1Enable+0x2c>)
 8000ad6:	430b      	orrs	r3, r1
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <Print>:




void Print(uint8_t* Copy_pu8String)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    USART_voidTransmitStringSynch(USART_2 , Copy_pu8String);
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 f9d2 	bl	8000ea0 <USART_voidTransmitStringSynch>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Input>:

void Input(uint8_t* Copy_pu8String , uint8_t Copy_u8size)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
    USART_u8ReceiveBufferSynch(USART_2 , Copy_pu8String  , Copy_u8size );
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	461a      	mov	r2, r3
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	2001      	movs	r0, #1
 8000b18:	f000 f9e2 	bl	8000ee0 <USART_u8ReceiveBufferSynch>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <USART_u8Init>:


static   USART_REG* USART_Index[6]={USART1,USART2,USART3,UART4,UART5,USART6};

uint8_t  USART_u8Init( USART_Cnfg_t * Copy_psCnfg )
{
 8000b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b28:	b088      	sub	sp, #32
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
   uint8_t Local_u8ErrorState = OK ;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	77fb      	strb	r3, [r7, #31]

   if (Copy_psCnfg != NULL)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	f000 8140 	beq.w	8000dba <USART_u8Init+0x296>
   {

        /* Set Oversampling */
        CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_OVER8);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4ba2      	ldr	r3, [pc, #648]	; (8000dcc <USART_u8Init+0x2a8>)
 8000b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4b9f      	ldr	r3, [pc, #636]	; (8000dcc <USART_u8Init+0x2a8>)
 8000b50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b58:	60da      	str	r2, [r3, #12]
        USART_Index[Copy_psCnfg->USART_Num]->CR1 |= Copy_psCnfg->OverSampling << CR1_OVER8 ;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b9a      	ldr	r3, [pc, #616]	; (8000dcc <USART_u8Init+0x2a8>)
 8000b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b66:	68da      	ldr	r2, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	78db      	ldrb	r3, [r3, #3]
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4619      	mov	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	4b95      	ldr	r3, [pc, #596]	; (8000dcc <USART_u8Init+0x2a8>)
 8000b78:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	60da      	str	r2, [r3, #12]

        /* Select the wordlength  */
        CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_WORDLENGTH);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b91      	ldr	r3, [pc, #580]	; (8000dcc <USART_u8Init+0x2a8>)
 8000b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b8c:	68da      	ldr	r2, [r3, #12]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4b8d      	ldr	r3, [pc, #564]	; (8000dcc <USART_u8Init+0x2a8>)
 8000b96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b9e:	60da      	str	r2, [r3, #12]
        USART_Index[Copy_psCnfg->USART_Num]->CR1 |= Copy_psCnfg->Word << CR1_WORDLENGTH ;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b89      	ldr	r3, [pc, #548]	; (8000dcc <USART_u8Init+0x2a8>)
 8000ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	789b      	ldrb	r3, [r3, #2]
 8000bb2:	031b      	lsls	r3, r3, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	4b83      	ldr	r3, [pc, #524]	; (8000dcc <USART_u8Init+0x2a8>)
 8000bbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	60da      	str	r2, [r3, #12]


        /* Set parity status  */
        CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_PCE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b7f      	ldr	r3, [pc, #508]	; (8000dcc <USART_u8Init+0x2a8>)
 8000bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4b7c      	ldr	r3, [pc, #496]	; (8000dcc <USART_u8Init+0x2a8>)
 8000bdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000be4:	60da      	str	r2, [r3, #12]
        USART_Index[Copy_psCnfg->USART_Num]->CR1 |= Copy_psCnfg->Parity << CR1_PCE ;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b77      	ldr	r3, [pc, #476]	; (8000dcc <USART_u8Init+0x2a8>)
 8000bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	029b      	lsls	r3, r3, #10
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	4b72      	ldr	r3, [pc, #456]	; (8000dcc <USART_u8Init+0x2a8>)
 8000c04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	60da      	str	r2, [r3, #12]



        /* Set RX TX state */

        switch (Copy_psCnfg->Mode)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	791b      	ldrb	r3, [r3, #4]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d048      	beq.n	8000ca6 <USART_u8Init+0x182>
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	dc67      	bgt.n	8000ce8 <USART_u8Init+0x1c4>
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <USART_u8Init+0xfe>
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d021      	beq.n	8000c64 <USART_u8Init+0x140>
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
            break;
        
        default:
            break;
 8000c20:	e062      	b.n	8000ce8 <USART_u8Init+0x1c4>
            CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b68      	ldr	r3, [pc, #416]	; (8000dcc <USART_u8Init+0x2a8>)
 8000c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	4b65      	ldr	r3, [pc, #404]	; (8000dcc <USART_u8Init+0x2a8>)
 8000c38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c3c:	f022 0208 	bic.w	r2, r2, #8
 8000c40:	60da      	str	r2, [r3, #12]
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b60      	ldr	r3, [pc, #384]	; (8000dcc <USART_u8Init+0x2a8>)
 8000c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4b5d      	ldr	r3, [pc, #372]	; (8000dcc <USART_u8Init+0x2a8>)
 8000c58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c5c:	f042 0204 	orr.w	r2, r2, #4
 8000c60:	60da      	str	r2, [r3, #12]
            break;
 8000c62:	e042      	b.n	8000cea <USART_u8Init+0x1c6>
            CLR_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <USART_u8Init+0x2a8>)
 8000c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4619      	mov	r1, r3
 8000c78:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <USART_u8Init+0x2a8>)
 8000c7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c7e:	f022 0204 	bic.w	r2, r2, #4
 8000c82:	60da      	str	r2, [r3, #12]
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <USART_u8Init+0x2a8>)
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4b4c      	ldr	r3, [pc, #304]	; (8000dcc <USART_u8Init+0x2a8>)
 8000c9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c9e:	f042 0208 	orr.w	r2, r2, #8
 8000ca2:	60da      	str	r2, [r3, #12]
            break;
 8000ca4:	e021      	b.n	8000cea <USART_u8Init+0x1c6>
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_RE);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <USART_u8Init+0x2a8>)
 8000cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <USART_u8Init+0x2a8>)
 8000cbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cc0:	f042 0204 	orr.w	r2, r2, #4
 8000cc4:	60da      	str	r2, [r3, #12]
            SET_BIT( USART_Index[Copy_psCnfg->USART_Num]->CR1  , CR1_TE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b3f      	ldr	r3, [pc, #252]	; (8000dcc <USART_u8Init+0x2a8>)
 8000cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <USART_u8Init+0x2a8>)
 8000cdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ce0:	f042 0208 	orr.w	r2, r2, #8
 8000ce4:	60da      	str	r2, [r3, #12]
            break;
 8000ce6:	e000      	b.n	8000cea <USART_u8Init+0x1c6>
            break;
 8000ce8:	bf00      	nop


        /* Baudrate configurations */

		uint8_t Local_u8OverSampling ;
		if (Copy_psCnfg->OverSampling == OVER8 )
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	78db      	ldrb	r3, [r3, #3]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d102      	bne.n	8000cf8 <USART_u8Init+0x1d4>
		{
			Local_u8OverSampling=8;
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	77bb      	strb	r3, [r7, #30]
 8000cf6:	e001      	b.n	8000cfc <USART_u8Init+0x1d8>
		}
		else
		{
			Local_u8OverSampling=16;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	77bb      	strb	r3, [r7, #30]
		}
		uint64_t Local_u64Mantissa = ( F_COLCK ) / ( (Local_u8OverSampling) * USART1_BAUD_RATE ) ;
 8000cfc:	7fbb      	ldrb	r3, [r7, #30]
 8000cfe:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	4a32      	ldr	r2, [pc, #200]	; (8000dd0 <USART_u8Init+0x2ac>)
 8000d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	469a      	mov	sl, r3
 8000d10:	4693      	mov	fp, r2
 8000d12:	e9c7 ab04 	strd	sl, fp, [r7, #16]
		uint64_t Local_u64Fraction = ( ( ( F_COLCK * 100 ) / ( (Local_u8OverSampling) * USART1_BAUD_RATE )  ) % 100 ) * (Local_u8OverSampling) ;
 8000d16:	7fbb      	ldrb	r3, [r7, #30]
 8000d18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d1c:	fb02 f303 	mul.w	r3, r2, r3
 8000d20:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <USART_u8Init+0x2b0>)
 8000d22:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d26:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <USART_u8Init+0x2b4>)
 8000d28:	fba3 1302 	umull	r1, r3, r3, r2
 8000d2c:	095b      	lsrs	r3, r3, #5
 8000d2e:	2164      	movs	r1, #100	; 0x64
 8000d30:	fb01 f303 	mul.w	r3, r1, r3
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	7fba      	ldrb	r2, [r7, #30]
 8000d38:	fb02 f303 	mul.w	r3, r2, r3
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4698      	mov	r8, r3
 8000d40:	4691      	mov	r9, r2
 8000d42:	e9c7 8902 	strd	r8, r9, [r7, #8]

		if( Local_u64Fraction > USART_MAX_FRAC )
 8000d46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d4a:	f240 51dd 	movw	r1, #1501	; 0x5dd
 8000d4e:	428a      	cmp	r2, r1
 8000d50:	f173 0300 	sbcs.w	r3, r3, #0
 8000d54:	d30c      	bcc.n	8000d70 <USART_u8Init+0x24c>
		{
			Local_u64Mantissa += USART_MANTISSA ;
 8000d56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d5a:	1c54      	adds	r4, r2, #1
 8000d5c:	f143 0500 	adc.w	r5, r3, #0
 8000d60:	e9c7 4504 	strd	r4, r5, [r7, #16]
			Local_u64Fraction  = USART_FRACTION ;
 8000d64:	f04f 0200 	mov.w	r2, #0
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		USART_Index[Copy_psCnfg->USART_Num] -> BRR = ( Local_u64Mantissa << USART_BAUD_RATE_ACCESS  ) | ( Local_u64Fraction / 100 ) ;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	011c      	lsls	r4, r3, #4
 8000d74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d78:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	f7ff fa40 	bl	8000204 <__aeabi_uldivmod>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <USART_u8Init+0x2a8>)
 8000d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d94:	4322      	orrs	r2, r4
 8000d96:	609a      	str	r2, [r3, #8]
		


        
        /* Enable USART */
		SET_BIT ( USART_Index[Copy_psCnfg->USART_Num] -> CR1 , USART_CR1_UE );
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <USART_u8Init+0x2a8>)
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <USART_u8Init+0x2a8>)
 8000dae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000db2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	e001      	b.n	8000dbe <USART_u8Init+0x29a>


   }
   else
   {
        Local_u8ErrorState = NULL_PTR_ERR ;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	77fb      	strb	r3, [r7, #31]
   }
   
   

   return Local_u8ErrorState ;
 8000dbe:	7ffb      	ldrb	r3, [r7, #31]
    
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3720      	adds	r7, #32
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000030 	.word	0x20000030
 8000dd0:	00f42400 	.word	0x00f42400
 8000dd4:	5f5e1000 	.word	0x5f5e1000
 8000dd8:	51eb851f 	.word	0x51eb851f

08000ddc <USART_u8ReceiveCharSynch>:



uint8_t  USART_u8ReceiveCharSynch     ( USART_NUM_t Copy_USARTindex , uint8_t * Copy_pu8DataChar  )
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = OK ;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataChar != NULL )
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d01e      	beq.n	8000e30 <USART_u8ReceiveCharSynch+0x54>
	{
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <USART_u8ReceiveCharSynch+0x68>)
 8000df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4911      	ldr	r1, [pc, #68]	; (8000e44 <USART_u8ReceiveCharSynch+0x68>)
 8000e00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e04:	f022 0220 	bic.w	r2, r2, #32
 8000e08:	601a      	str	r2, [r3, #0]
	    while ( USART_SR_RXNE_DOWN_MASK == GET_BIT ( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE ) )  ;
 8000e0a:	bf00      	nop
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <USART_u8ReceiveCharSynch+0x68>)
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0320 	and.w	r3, r3, #32
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f6      	beq.n	8000e0c <USART_u8ReceiveCharSynch+0x30>
	    *Copy_pu8DataChar = ( USART_Index[Copy_USARTindex] -> DR )  ;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <USART_u8ReceiveCharSynch+0x68>)
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e001      	b.n	8000e34 <USART_u8ReceiveCharSynch+0x58>
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR ;
 8000e30:	2302      	movs	r3, #2
 8000e32:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000030 	.word	0x20000030

08000e48 <USART_voidTransmitCharSynch>:




void  USART_voidTransmitCharSynch     ( USART_NUM_t Copy_USARTindex , uint8_t  Copy_u8DataChar  )
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	71bb      	strb	r3, [r7, #6]
	
		USART_Index[Copy_USARTindex] -> DR = Copy_u8DataChar ;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <USART_voidTransmitCharSynch+0x54>)
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	79ba      	ldrb	r2, [r7, #6]
 8000e62:	605a      	str	r2, [r3, #4]
		while ( USART_SR_TC_MASK == GET_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC ) )  ;
 8000e64:	bf00      	nop
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <USART_voidTransmitCharSynch+0x54>)
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f6      	beq.n	8000e66 <USART_voidTransmitCharSynch+0x1e>
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC );
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <USART_voidTransmitCharSynch+0x54>)
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	4905      	ldr	r1, [pc, #20]	; (8000e9c <USART_voidTransmitCharSynch+0x54>)
 8000e86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e8e:	601a      	str	r2, [r3, #0]
	
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20000030 	.word	0x20000030

08000ea0 <USART_voidTransmitStringSynch>:




void     USART_voidTransmitStringSynch     ( USART_NUM_t Copy_USARTindex , uint8_t * Copy_pu8Data  )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
	uint8_t LOCAL_u8LoopIterator = 0 ;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8Data[LOCAL_u8LoopIterator] != 0 )
 8000eb0:	e00b      	b.n	8000eca <USART_voidTransmitStringSynch+0x2a>
	{
		USART_voidTransmitCharSynch(Copy_USARTindex , Copy_pu8Data[LOCAL_u8LoopIterator] );
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ffc2 	bl	8000e48 <USART_voidTransmitCharSynch>
		LOCAL_u8LoopIterator++ ;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8Data[LOCAL_u8LoopIterator] != 0 )
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1ed      	bne.n	8000eb2 <USART_voidTransmitStringSynch+0x12>

	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <USART_u8ReceiveBufferSynch>:


void  USART_u8ReceiveBufferSynch     ( USART_NUM_t Copy_USARTindex , uint8_t * Copy_pu8Data , uint8_t Copy_u8Size  )
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]
	uint8_t LOCAL_u8LoopIterator ;

	for(LOCAL_u8LoopIterator = 0 ; LOCAL_u8LoopIterator < Copy_u8Size  ; LOCAL_u8LoopIterator++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e00a      	b.n	8000f0c <USART_u8ReceiveBufferSynch+0x2c>
	{
		USART_u8ReceiveCharSynch(Copy_USARTindex , &Copy_pu8Data[LOCAL_u8LoopIterator]);
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	441a      	add	r2, r3
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff6b 	bl	8000ddc <USART_u8ReceiveCharSynch>
	for(LOCAL_u8LoopIterator = 0 ; LOCAL_u8LoopIterator < Copy_u8Size  ; LOCAL_u8LoopIterator++)
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d3f0      	bcc.n	8000ef6 <USART_u8ReceiveBufferSynch+0x16>
	}

}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <main>:
#include "APP.h"
#include "Service.h"


int main(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0



	APP_voidInit();
 8000f22:	f7ff faed 	bl	8000500 <APP_voidInit>

	APP_voidLogin();
 8000f26:	f7ff fb37 	bl	8000598 <APP_voidLogin>

	
	while (1)
	{
		APP_voidMenu();
 8000f2a:	f7ff fb53 	bl	80005d4 <APP_voidMenu>
 8000f2e:	e7fc      	b.n	8000f2a <main+0xc>

08000f30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	; (8000f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <LoopForever+0xe>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	; (8000f7c <LoopForever+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f5e:	f000 f811 	bl	8000f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f62:	f7ff ffdc 	bl	8000f1e <main>

08000f66 <LoopForever>:

LoopForever:
  b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   r0, =_estack
 8000f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000f74:	080011f4 	.word	0x080011f4
  ldr r2, =_sbss
 8000f78:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000f7c:	20000064 	.word	0x20000064

08000f80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <__libc_init_array>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	4d0d      	ldr	r5, [pc, #52]	; (8000fbc <__libc_init_array+0x38>)
 8000f88:	4c0d      	ldr	r4, [pc, #52]	; (8000fc0 <__libc_init_array+0x3c>)
 8000f8a:	1b64      	subs	r4, r4, r5
 8000f8c:	10a4      	asrs	r4, r4, #2
 8000f8e:	2600      	movs	r6, #0
 8000f90:	42a6      	cmp	r6, r4
 8000f92:	d109      	bne.n	8000fa8 <__libc_init_array+0x24>
 8000f94:	4d0b      	ldr	r5, [pc, #44]	; (8000fc4 <__libc_init_array+0x40>)
 8000f96:	4c0c      	ldr	r4, [pc, #48]	; (8000fc8 <__libc_init_array+0x44>)
 8000f98:	f000 f818 	bl	8000fcc <_init>
 8000f9c:	1b64      	subs	r4, r4, r5
 8000f9e:	10a4      	asrs	r4, r4, #2
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	42a6      	cmp	r6, r4
 8000fa4:	d105      	bne.n	8000fb2 <__libc_init_array+0x2e>
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
 8000fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fac:	4798      	blx	r3
 8000fae:	3601      	adds	r6, #1
 8000fb0:	e7ee      	b.n	8000f90 <__libc_init_array+0xc>
 8000fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fb6:	4798      	blx	r3
 8000fb8:	3601      	adds	r6, #1
 8000fba:	e7f2      	b.n	8000fa2 <__libc_init_array+0x1e>
 8000fbc:	080011ec 	.word	0x080011ec
 8000fc0:	080011ec 	.word	0x080011ec
 8000fc4:	080011ec 	.word	0x080011ec
 8000fc8:	080011f0 	.word	0x080011f0

08000fcc <_init>:
 8000fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fce:	bf00      	nop
 8000fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd2:	bc08      	pop	{r3}
 8000fd4:	469e      	mov	lr, r3
 8000fd6:	4770      	bx	lr

08000fd8 <_fini>:
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fda:	bf00      	nop
 8000fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fde:	bc08      	pop	{r3}
 8000fe0:	469e      	mov	lr, r3
 8000fe2:	4770      	bx	lr
